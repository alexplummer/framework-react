{"version":3,"file":"app.js","sources":["../../node_modules/object-assign/index.js","../../node_modules/fbjs/lib/invariant.js","../../node_modules/fbjs/lib/emptyObject.js","../../node_modules/fbjs/lib/emptyFunction.js","../../node_modules/fbjs/lib/warning.js","../../node_modules/prop-types/lib/ReactPropTypesSecret.js","../../node_modules/prop-types/checkPropTypes.js","../../node_modules/react/cjs/react.development.js","../../node_modules/react/index.js","../../node_modules/fbjs/lib/ExecutionEnvironment.js","../../node_modules/fbjs/lib/EventListener.js","../../node_modules/fbjs/lib/getActiveElement.js","../../node_modules/fbjs/lib/shallowEqual.js","../../node_modules/fbjs/lib/isNode.js","../../node_modules/fbjs/lib/isTextNode.js","../../node_modules/fbjs/lib/containsNode.js","../../node_modules/fbjs/lib/focusNode.js","../../node_modules/fbjs/lib/hyphenate.js","../../node_modules/fbjs/lib/hyphenateStyleName.js","../../node_modules/fbjs/lib/camelize.js","../../node_modules/fbjs/lib/camelizeStyleName.js","../../node_modules/react-dom/cjs/react-dom.development.js","../../node_modules/react-dom/index.js","../../node_modules/prop-types/factoryWithTypeCheckers.js","../../node_modules/prop-types/index.js","../../node_modules/react-redux/es/utils/PropTypes.js","../../node_modules/react-redux/es/utils/warning.js","../../node_modules/react-redux/es/components/Provider.js","../../node_modules/hoist-non-react-statics/index.js","../../node_modules/invariant/invariant.js","../../node_modules/react-redux/es/utils/Subscription.js","../../node_modules/react-redux/es/components/connectAdvanced.js","../../node_modules/react-redux/es/utils/shallowEqual.js","../../node_modules/lodash-es/_freeGlobal.js","../../node_modules/lodash-es/_root.js","../../node_modules/lodash-es/_Symbol.js","../../node_modules/lodash-es/_getRawTag.js","../../node_modules/lodash-es/_objectToString.js","../../node_modules/lodash-es/_baseGetTag.js","../../node_modules/lodash-es/_overArg.js","../../node_modules/lodash-es/_getPrototype.js","../../node_modules/lodash-es/isObjectLike.js","../../node_modules/lodash-es/isPlainObject.js","../../node_modules/symbol-observable/es/ponyfill.js","../../node_modules/symbol-observable/es/index.js","../../node_modules/redux/es/createStore.js","../../node_modules/redux/es/utils/warning.js","../../node_modules/redux/es/bindActionCreators.js","../../node_modules/redux/es/compose.js","../../node_modules/redux/es/index.js","../../node_modules/react-redux/es/utils/verifyPlainObject.js","../../node_modules/react-redux/es/connect/wrapMapToProps.js","../../node_modules/react-redux/es/connect/mapDispatchToProps.js","../../node_modules/react-redux/es/connect/mapStateToProps.js","../../node_modules/react-redux/es/connect/mergeProps.js","../../node_modules/react-redux/es/connect/verifySubselectors.js","../../node_modules/react-redux/es/connect/selectorFactory.js","../../node_modules/react-redux/es/connect/connect.js","../store/reducers.js","../store/actions.js","../components/TextList/TextList.js","../components/TextListContainer/TextListContainer.js","../components/ListOfThings/ListOfThings.js","app.js"],"sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/** @license React v16.1.1\n * react.development.js\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar _assign = require('object-assign');\nvar invariant = require('fbjs/lib/invariant');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar warning = require('fbjs/lib/warning');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar checkPropTypes = require('prop-types/checkPropTypes');\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion = '16.1.1';\n\n/**\n * WARNING: DO NOT manually require this module.\n * This is a replacement for `invariant(...)` used by the error code system\n * and will _only_ be required by the corresponding babel pass.\n * It always throws.\n */\n\n// Exports React.Fragment\nvar enableReactFragment = false;\n// Exports ReactDOM.createRoot\n\n\n\n// Mutating mode (React DOM, React ART, React Native):\n\n// Experimental noop mode (currently unused):\n\n// Experimental persistent mode (CS):\n\n\n// Only used in www builds.\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarning$1 = lowPriorityWarning;\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var constructor = publicInstance.constructor;\n    var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';\n    var warningKey = componentName + '.' + callerName;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\\n\\nPlease check the code for the %s component.', callerName, callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction PureComponent(props, context, updater) {\n  // Duplicated from Component.\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\n_assign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\nfunction AsyncComponent(props, context, updater) {\n  // Duplicated from Component.\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();\nasyncComponentPrototype.constructor = AsyncComponent;\n// Avoid an extra prototype jump for these methods.\n_assign(asyncComponentPrototype, Component.prototype);\nasyncComponentPrototype.unstable_isAsyncReactComponent = true;\nasyncComponentPrototype.render = function () {\n  return this.props.children;\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n// The Symbol used to tag the ReactElement type. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, no instanceof check\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allow us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE$1,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nfunction createElement(type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  {\n    if (key || ref) {\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE$1) {\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n        if (key) {\n          defineKeyPropWarningGetter(props, displayName);\n        }\n        if (ref) {\n          defineRefPropWarningGetter(props, displayName);\n        }\n      }\n    }\n  }\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nfunction cloneElement(element, config, children) {\n  var propName;\n\n  // Original props are copied\n  var props = _assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    var defaultProps;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE$1;\n}\n\nvar ReactDebugCurrentFrame = {};\n\n{\n  // Component that is being worked on\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n    if (impl) {\n      return impl();\n    }\n    return null;\n  };\n}\n\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n// The Symbol used to tag the ReactElement type. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;\nvar REACT_PORTAL_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.portal') || 0xeaca;\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps = false;\n\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null || type === 'string' || type === 'number' ||\n  // The following is inlined from ReactElement. This means we can optimize\n  // some checks. React Fiber also inlines this logic for similar purposes.\n  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE || type === 'object' && children.$$typeof === REACT_PORTAL_TYPE) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];\n    if (typeof iteratorFn === 'function') {\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step;\n      var ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n      var childrenString = '' + children;\n      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.foreach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.map\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.count\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.toarray\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);\n  return result;\n}\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.only\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;\n  return children;\n}\n\nvar describeComponentFrame = function (name, source, ownerName) {\n  return '\\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n};\n\nfunction getComponentName(fiber) {\n  var type = fiber.type;\n\n  if (typeof type === 'string') {\n    return type;\n  }\n  if (typeof type === 'function') {\n    return type.displayName || type.name;\n  }\n  return null;\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n{\n  var currentlyValidatingElement = null;\n\n  var getDisplayName = function (element) {\n    if (element == null) {\n      return '#empty';\n    } else if (typeof element === 'string' || typeof element === 'number') {\n      return '#text';\n    } else if (typeof element.type === 'string') {\n      return element.type;\n    } else if (element.type === REACT_FRAGMENT_TYPE$1) {\n      return 'React.Fragment';\n    } else {\n      return element.type.displayName || element.type.name || 'Unknown';\n    }\n  };\n\n  var getStackAddendum = function () {\n    var stack = '';\n    if (currentlyValidatingElement) {\n      var name = getDisplayName(currentlyValidatingElement);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));\n    }\n    stack += ReactDebugCurrentFrame.getStackAddendum() || '';\n    return stack;\n  };\n\n  var REACT_FRAGMENT_TYPE$1 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.fragment') || 0xeacb;\n\n  var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);\n}\n\nvar ITERATOR_SYMBOL$1 = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL$1 = '@@iterator'; // Before Symbol spec.\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current);\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(elementProps) {\n  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {\n    var source = elementProps.__source;\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      info = '\\n\\nCheck the top-level render call using <' + parentName + '>.';\n    }\n  }\n  return info;\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwner = '';\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';\n  }\n\n  currentlyValidatingElement = element;\n  {\n    warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());\n  }\n  currentlyValidatingElement = null;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = ITERATOR_SYMBOL$1 && node[ITERATOR_SYMBOL$1] || node[FAUX_ITERATOR_SYMBOL$1];\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  var propTypes = componentClass.propTypes;\n\n  if (propTypes) {\n    currentlyValidatingElement = element;\n    checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);\n    currentlyValidatingElement = null;\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n  }\n}\n\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\nfunction validateFragmentProps(fragment) {\n  currentlyValidatingElement = fragment;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (!VALID_FRAGMENT_PROPS.has(key)) {\n        warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());\n        break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator['return']) {\n        _iterator['return']();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (fragment.ref !== null) {\n    warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());\n  }\n\n  currentlyValidatingElement = null;\n}\n\nfunction createElementWithValidation(type, props, children) {\n  var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';\n  // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n  if (!validType) {\n    var info = '';\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendum(props);\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    info += getStackAddendum() || '';\n\n    warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);\n  }\n\n  var element = createElement.apply(this, arguments);\n\n  // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n  if (element == null) {\n    return element;\n  }\n\n  // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE$1) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\n\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  // Legacy hook TODO: Warn if this is accessed\n  validatedFactory.type = type;\n\n  {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\n\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nvar REACT_FRAGMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.fragment') || 0xeacb;\n\nvar React = {\n  Children: {\n    map: mapChildren,\n    forEach: forEachChildren,\n    count: countChildren,\n    toArray: toArray,\n    only: onlyChild\n  },\n\n  Component: Component,\n  PureComponent: PureComponent,\n  unstable_AsyncComponent: AsyncComponent,\n\n  createElement: createElementWithValidation,\n  cloneElement: cloneElementWithValidation,\n  createFactory: createFactoryWithValidation,\n  isValidElement: isValidElement,\n\n  version: ReactVersion,\n\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: ReactCurrentOwner,\n    // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n    assign: _assign\n  }\n};\n\nif (enableReactFragment) {\n  React.Fragment = REACT_FRAGMENT_TYPE;\n}\n\n{\n  _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n\n\nvar React$2 = Object.freeze({\n\tdefault: React\n});\n\nvar React$3 = ( React$2 && React ) || React$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nvar react = React$3['default'] ? React$3['default'] : React$3;\n\nmodule.exports = react;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?DOMDocument} doc Defaults to current document.\n * @return {?DOMElement}\n */\nfunction getActiveElement(doc) /*?DOMElement*/{\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\nmodule.exports = getActiveElement;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  var doc = object ? object.ownerDocument || object : document;\n  var defaultView = doc.defaultView || window;\n  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\n\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar hyphenate = require('./hyphenate');\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar camelize = require('./camelize');\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;","/** @license React v16.1.1\n * react-dom.development.js\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar _assign = require('object-assign');\nvar emptyFunction$1 = require('fbjs/lib/emptyFunction');\nvar EventListener = require('fbjs/lib/EventListener');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar checkPropTypes = require('prop-types/checkPropTypes');\nvar hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');\nvar camelizeStyleName = require('fbjs/lib/camelizeStyleName');\n\n/**\n * WARNING: DO NOT manually require this module.\n * This is a replacement for `invariant(...)` used by the error code system\n * and will _only_ be required by the corresponding babel pass.\n * It always throws.\n */\n\n!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;\n\n// These attributes should be all lowercase to allow for\n// case insensitive checks\nvar RESERVED_PROPS = {\n  children: true,\n  dangerouslySetInnerHTML: true,\n  defaultValue: true,\n  defaultChecked: true,\n  innerHTML: true,\n  suppressContentEditableWarning: true,\n  suppressHydrationWarning: true,\n  style: true\n};\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_PROPERTY: 0x1,\n  HAS_BOOLEAN_VALUE: 0x4,\n  HAS_NUMERIC_VALUE: 0x8,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,\n  HAS_STRING_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    for (var propName in Properties) {\n      !!properties.hasOwnProperty(propName) ? invariant(false, \"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.\", propName) : void 0;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),\n        hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)\n      };\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, \"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s\", propName) : void 0;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n\n        propertyInfo.attributeName = attributeName;\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      // Downcase references to whitelist properties to check for membership\n      // without case-sensitivity. This allows the whitelist to pick up\n      // `allowfullscreen`, which should be written using the property configuration\n      // for `allowFullscreen`\n      properties[propName] = propertyInfo;\n    }\n  }\n};\n\n/* eslint-disable max-len */\nvar ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n/* eslint-enable max-len */\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n\n\nvar ROOT_ATTRIBUTE_NAME = 'data-reactroot';\n\n/**\n * Map from property \"standard name\" to an object with info about how to set\n * the property in the DOM. Each object contains:\n *\n * attributeName:\n *   Used when rendering markup or with `*Attribute()`.\n * attributeNamespace\n * propertyName:\n *   Used on DOM node instances. (This includes properties that mutate due to\n *   external factors.)\n * mutationMethod:\n *   If non-null, used instead of the property or `setAttribute()` after\n *   initial render.\n * mustUseProperty:\n *   Whether the property must be accessed and mutated as an object property.\n * hasBooleanValue:\n *   Whether the property should be removed when set to a falsey value.\n * hasNumericValue:\n *   Whether the property must be numeric or parse as a numeric and should be\n *   removed when set to a falsey value.\n * hasPositiveNumericValue:\n *   Whether the property must be positive numeric or parse as a positive\n *   numeric and should be removed when set to a falsey value.\n * hasOverloadedBooleanValue:\n *   Whether the property can be used as a flag as well as with a value.\n *   Removed when strictly equal to false; present without a value when\n *   strictly equal to true; present with a value otherwise.\n */\nvar properties = {};\n\n/**\n * Checks whether a property name is a writeable attribute.\n * @method\n */\nfunction shouldSetAttribute(name, value) {\n  if (isReservedProp(name)) {\n    return false;\n  }\n  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n    return false;\n  }\n  if (value === null) {\n    return true;\n  }\n  switch (typeof value) {\n    case 'boolean':\n      return shouldAttributeAcceptBooleanValue(name);\n    case 'undefined':\n    case 'number':\n    case 'string':\n    case 'object':\n      return true;\n    default:\n      // function, symbol\n      return false;\n  }\n}\n\nfunction getPropertyInfo(name) {\n  return properties.hasOwnProperty(name) ? properties[name] : null;\n}\n\nfunction shouldAttributeAcceptBooleanValue(name) {\n  if (isReservedProp(name)) {\n    return true;\n  }\n  var propertyInfo = getPropertyInfo(name);\n  if (propertyInfo) {\n    return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;\n  }\n  var prefix = name.toLowerCase().slice(0, 5);\n  return prefix === 'data-' || prefix === 'aria-';\n}\n\n/**\n * Checks to see if a property name is within the list of properties\n * reserved for internal React operations. These properties should\n * not be set on an HTML element.\n *\n * @private\n * @param {string} name\n * @return {boolean} If the name is within reserved props\n */\nfunction isReservedProp(name) {\n  return RESERVED_PROPS.hasOwnProperty(name);\n}\n\nvar injection = DOMPropertyInjection;\n\nvar MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;\nvar HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE;\n\nvar HTMLDOMPropertyConfig = {\n  // When adding attributes to this list, be sure to also add them to\n  // the `possibleStandardNames` module to ensure casing and incorrect\n  // name warnings.\n  Properties: {\n    allowFullScreen: HAS_BOOLEAN_VALUE,\n    // specifies target context for links with `preload` type\n    async: HAS_BOOLEAN_VALUE,\n    // Note: there is a special case that prevents it from being written to the DOM\n    // on the client side because the browsers are inconsistent. Instead we call focus().\n    autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    capture: HAS_OVERLOADED_BOOLEAN_VALUE,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    cols: HAS_POSITIVE_NUMERIC_VALUE,\n    contentEditable: HAS_STRING_BOOLEAN_VALUE,\n    controls: HAS_BOOLEAN_VALUE,\n    'default': HAS_BOOLEAN_VALUE,\n    defer: HAS_BOOLEAN_VALUE,\n    disabled: HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: HAS_STRING_BOOLEAN_VALUE,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    hidden: HAS_BOOLEAN_VALUE,\n    loop: HAS_BOOLEAN_VALUE,\n    // Caution; `option.selected` is not updated if `select.multiple` is\n    // disabled with `removeAttribute`.\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: HAS_BOOLEAN_VALUE,\n    playsInline: HAS_BOOLEAN_VALUE,\n    readOnly: HAS_BOOLEAN_VALUE,\n    required: HAS_BOOLEAN_VALUE,\n    reversed: HAS_BOOLEAN_VALUE,\n    rows: HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: HAS_NUMERIC_VALUE,\n    scoped: HAS_BOOLEAN_VALUE,\n    seamless: HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    size: HAS_POSITIVE_NUMERIC_VALUE,\n    start: HAS_NUMERIC_VALUE,\n    // support for projecting regular DOM Elements via V1 named slots ( shadow dom )\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: HAS_STRING_BOOLEAN_VALUE,\n    // Style must be explicitly set in the attribute list. React components\n    // expect a style object\n    style: 0,\n    // Keep it in the whitelist because it is case-sensitive for SVG.\n    tabIndex: 0,\n    // itemScope is for for Microdata support.\n    // See http://schema.org/docs/gs.html\n    itemScope: HAS_BOOLEAN_VALUE,\n    // These attributes must stay in the white-list because they have\n    // different attribute names (see DOMAttributeNames below)\n    acceptCharset: 0,\n    className: 0,\n    htmlFor: 0,\n    httpEquiv: 0,\n    // Attributes with mutation methods must be specified in the whitelist\n    // Set the string boolean flag to allow the behavior\n    value: HAS_STRING_BOOLEAN_VALUE\n  },\n  DOMAttributeNames: {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n  },\n  DOMMutationMethods: {\n    value: function (node, value) {\n      if (value == null) {\n        return node.removeAttribute('value');\n      }\n\n      // Number inputs get special treatment due to some edge cases in\n      // Chrome. Let everything else assign the value attribute as normal.\n      // https://github.com/facebook/react/issues/7253#issuecomment-236074326\n      if (node.type !== 'number' || node.hasAttribute('value') === false) {\n        node.setAttribute('value', '' + value);\n      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {\n        // Don't assign an attribute if validation reports bad\n        // input. Chrome will clear the value. Additionally, don't\n        // operate on inputs that have focus, otherwise Chrome might\n        // strip off trailing decimal places and cause the user's\n        // cursor position to jump to the beginning of the input.\n        //\n        // In ReactDOMInput, we have an onBlur event that will trigger\n        // this function again when focus is lost.\n        node.setAttribute('value', '' + value);\n      }\n    }\n  }\n};\n\nvar HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE;\n\n\nvar NS = {\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace'\n};\n\n/**\n * This is a list of all SVG attributes that need special casing,\n * namespacing, or boolean value assignment.\n *\n * When adding attributes to this list, be sure to also add them to\n * the `possibleStandardNames` module to ensure casing and incorrect\n * name warnings.\n *\n * SVG Attributes List:\n * https://www.w3.org/TR/SVG/attindex.html\n * SMIL Spec:\n * https://www.w3.org/TR/smil\n */\nvar ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];\n\nvar SVGDOMPropertyConfig = {\n  Properties: {\n    autoReverse: HAS_STRING_BOOLEAN_VALUE$1,\n    externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,\n    preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1\n  },\n  DOMAttributeNames: {\n    autoReverse: 'autoReverse',\n    externalResourcesRequired: 'externalResourcesRequired',\n    preserveAlpha: 'preserveAlpha'\n  },\n  DOMAttributeNamespaces: {\n    xlinkActuate: NS.xlink,\n    xlinkArcrole: NS.xlink,\n    xlinkHref: NS.xlink,\n    xlinkRole: NS.xlink,\n    xlinkShow: NS.xlink,\n    xlinkTitle: NS.xlink,\n    xlinkType: NS.xlink,\n    xmlBase: NS.xml,\n    xmlLang: NS.xml,\n    xmlSpace: NS.xml\n  }\n};\n\nvar CAMELIZE = /[\\-\\:]([a-z])/g;\nvar capitalize = function (token) {\n  return token[1].toUpperCase();\n};\n\nATTRS.forEach(function (original) {\n  var reactName = original.replace(CAMELIZE, capitalize);\n\n  SVGDOMPropertyConfig.Properties[reactName] = 0;\n  SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;\n});\n\ninjection.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\ninjection.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\nvar ReactErrorUtils = {\n  // Used by Fiber to simulate a try-catch.\n  _caughtError: null,\n  _hasCaughtError: false,\n\n  // Used by event system to capture/rethrow the first error.\n  _rethrowError: null,\n  _hasRethrowError: false,\n\n  injection: {\n    injectErrorUtils: function (injectedErrorUtils) {\n      !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;\n      invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;\n    }\n  },\n\n  /**\n   * Call a function while guarding against errors that happens within it.\n   * Returns an error if it throws, otherwise null.\n   *\n   * In production, this is implemented using a try-catch. The reason we don't\n   * use a try-catch directly is so that we can swap out a different\n   * implementation in DEV mode.\n   *\n   * @param {String} name of the guard to use for logging or debugging\n   * @param {Function} func The function to invoke\n   * @param {*} context The context to use when calling the function\n   * @param {...*} args Arguments for function\n   */\n  invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {\n    invokeGuardedCallback.apply(ReactErrorUtils, arguments);\n  },\n\n  /**\n   * Same as invokeGuardedCallback, but instead of returning an error, it stores\n   * it in a global so it can be rethrown by `rethrowCaughtError` later.\n   * TODO: See if _caughtError and _rethrowError can be unified.\n   *\n   * @param {String} name of the guard to use for logging or debugging\n   * @param {Function} func The function to invoke\n   * @param {*} context The context to use when calling the function\n   * @param {...*} args Arguments for function\n   */\n  invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {\n    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);\n    if (ReactErrorUtils.hasCaughtError()) {\n      var error = ReactErrorUtils.clearCaughtError();\n      if (!ReactErrorUtils._hasRethrowError) {\n        ReactErrorUtils._hasRethrowError = true;\n        ReactErrorUtils._rethrowError = error;\n      }\n    }\n  },\n\n  /**\n   * During execution of guarded functions we will capture the first error which\n   * we will rethrow to be handled by the top level error handler.\n   */\n  rethrowCaughtError: function () {\n    return rethrowCaughtError.apply(ReactErrorUtils, arguments);\n  },\n\n  hasCaughtError: function () {\n    return ReactErrorUtils._hasCaughtError;\n  },\n\n  clearCaughtError: function () {\n    if (ReactErrorUtils._hasCaughtError) {\n      var error = ReactErrorUtils._caughtError;\n      ReactErrorUtils._caughtError = null;\n      ReactErrorUtils._hasCaughtError = false;\n      return error;\n    } else {\n      invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n};\n\nvar invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {\n  ReactErrorUtils._hasCaughtError = false;\n  ReactErrorUtils._caughtError = null;\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    ReactErrorUtils._caughtError = error;\n    ReactErrorUtils._hasCaughtError = true;\n  }\n};\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // untintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      var didError = true;\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      var error = void 0;\n      // Use this to track whether the error event is ever called.\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function onError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n      }\n\n      // Create a fake event type.\n      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');\n\n      // Attach our event handlers\n      window.addEventListener('error', onError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      var evt = document.createEvent('Event');\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');\n        }\n        ReactErrorUtils._hasCaughtError = true;\n        ReactErrorUtils._caughtError = error;\n      } else {\n        ReactErrorUtils._hasCaughtError = false;\n        ReactErrorUtils._caughtError = null;\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', onError);\n    };\n\n    invokeGuardedCallback = invokeGuardedCallbackDev;\n  }\n}\n\nvar rethrowCaughtError = function () {\n  if (ReactErrorUtils._hasRethrowError) {\n    var error = ReactErrorUtils._rethrowError;\n    ReactErrorUtils._rethrowError = null;\n    ReactErrorUtils._hasRethrowError = false;\n    throw error;\n  }\n};\n\n/**\n * Injectable ordering of event plugins.\n */\nvar eventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;\n    if (plugins[pluginIndex]) {\n      continue;\n    }\n    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;\n    plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;\n  eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {\n  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;\n  registrationNameModules[registrationName] = pluginModule;\n  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n\n  {\n    var lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\n\n/**\n * Ordered list of injected plugins.\n */\nvar plugins = [];\n\n/**\n * Mapping from event name to dispatch config\n */\nvar eventNameDispatchConfigs = {};\n\n/**\n * Mapping from registration name to plugin module\n */\nvar registrationNameModules = {};\n\n/**\n * Mapping from registration name to event name\n */\nvar registrationNameDependencies = {};\n\n/**\n * Mapping from lowercase registration names to the properly cased version,\n * used to warn in the case of missing event handlers. Available\n * only in true.\n * @type {Object}\n */\nvar possibleRegistrationNames = {};\n// Trust the developer to only use possibleRegistrationNames in true\n\n/**\n * Injects an ordering of plugins (by plugin name). This allows the ordering\n * to be decoupled from injection of the actual plugins so that ordering is\n * always deterministic regardless of packaging, on-the-fly injection, etc.\n *\n * @param {array} InjectedEventPluginOrder\n * @internal\n * @see {EventPluginHub.injection.injectEventPluginOrder}\n */\nfunction injectEventPluginOrder(injectedEventPluginOrder) {\n  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;\n  // Clone the ordering so it cannot be dynamically mutated.\n  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n  recomputePluginOrdering();\n}\n\n/**\n * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n * in the ordering injected by `injectEventPluginOrder`.\n *\n * Plugins can be injected as part of page initialization or on-the-fly.\n *\n * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n * @internal\n * @see {EventPluginHub.injection.injectEventPluginsByName}\n */\nfunction injectEventPluginsByName(injectedNamesToPlugins) {\n  var isOrderingDirty = false;\n  for (var pluginName in injectedNamesToPlugins) {\n    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n      continue;\n    }\n    var pluginModule = injectedNamesToPlugins[pluginName];\n    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;\n      namesToPlugins[pluginName] = pluginModule;\n      isOrderingDirty = true;\n    }\n  }\n  if (isOrderingDirty) {\n    recomputePluginOrdering();\n  }\n}\n\nvar EventPluginRegistry = Object.freeze({\n\tplugins: plugins,\n\teventNameDispatchConfigs: eventNameDispatchConfigs,\n\tregistrationNameModules: registrationNameModules,\n\tregistrationNameDependencies: registrationNameDependencies,\n\tpossibleRegistrationNames: possibleRegistrationNames,\n\tinjectEventPluginOrder: injectEventPluginOrder,\n\tinjectEventPluginsByName: injectEventPluginsByName\n});\n\nvar getFiberCurrentPropsFromNode = null;\nvar getInstanceFromNode = null;\nvar getNodeFromInstance = null;\n\nvar injection$2 = {\n  injectComponentTree: function (Injected) {\n    getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;\n    getInstanceFromNode = Injected.getInstanceFromNode;\n    getNodeFromInstance = Injected.getNodeFromInstance;\n\n    {\n      warning(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');\n    }\n  }\n};\n\n\n\n\n\n\nvar validateEventDispatches;\n{\n  validateEventDispatches = function (event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchInstances = event._dispatchInstances;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n\n    var instancesIsArr = Array.isArray(dispatchInstances);\n    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;\n\n    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @param {function} listener Application-level callback\n * @param {*} inst Internal component instance\n */\nfunction executeDispatch(event, simulated, listener, inst) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = getNodeFromInstance(inst);\n  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, simulated) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchInstances = event._dispatchInstances;\n  {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);\n  }\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\n\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\n\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (Array.isArray(current)) {\n    if (Array.isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (Array.isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n * @param {function} cb Callback invoked with each element or a collection.\n * @param {?} [scope] Scope used as `this` in a callback.\n */\nfunction forEachAccumulated(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n      return !!(props.disabled && isInteractive(type));\n    default:\n      return false;\n  }\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\n\n/**\n * Methods for injecting dependencies.\n */\nvar injection$1 = {\n  /**\n   * @param {array} InjectedEventPluginOrder\n   * @public\n   */\n  injectEventPluginOrder: injectEventPluginOrder,\n\n  /**\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   */\n  injectEventPluginsByName: injectEventPluginsByName\n};\n\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\nfunction getListener(inst, registrationName) {\n  var listener;\n\n  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not\n  // live here; needs to be moved to a better place soon\n  var stateNode = inst.stateNode;\n  if (!stateNode) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  var props = getFiberCurrentPropsFromNode(stateNode);\n  if (!props) {\n    // Work in progress.\n    return null;\n  }\n  listener = props[registrationName];\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;\n  return listener;\n}\n\n/**\n * Allows registered plugins an opportunity to extract events from top-level\n * native browser events.\n *\n * @return {*} An accumulation of synthetic events.\n * @internal\n */\nfunction extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var events;\n  for (var i = 0; i < plugins.length; i++) {\n    // Not every plugin in the ordering may be loaded at runtime.\n    var possiblePlugin = plugins[i];\n    if (possiblePlugin) {\n      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n      if (extractedEvents) {\n        events = accumulateInto(events, extractedEvents);\n      }\n    }\n  }\n  return events;\n}\n\n/**\n * Enqueues a synthetic event that should be dispatched when\n * `processEventQueue` is invoked.\n *\n * @param {*} events An accumulation of synthetic events.\n * @internal\n */\nfunction enqueueEvents(events) {\n  if (events) {\n    eventQueue = accumulateInto(eventQueue, events);\n  }\n}\n\n/**\n * Dispatches all synthetic events on the event queue.\n *\n * @internal\n */\nfunction processEventQueue(simulated) {\n  // Set `eventQueue` to null before processing it so that we can tell if more\n  // events get enqueued while processing.\n  var processingEventQueue = eventQueue;\n  eventQueue = null;\n  if (simulated) {\n    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n  } else {\n    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n  }\n  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;\n  // This would be a good time to rethrow if any of the event handlers threw.\n  ReactErrorUtils.rethrowCaughtError();\n}\n\nvar EventPluginHub = Object.freeze({\n\tinjection: injection$1,\n\tgetListener: getListener,\n\textractEvents: extractEvents,\n\tenqueueEvents: enqueueEvents,\n\tprocessEventQueue: processEventQueue\n});\n\nvar IndeterminateComponent = 0; // Before we know whether it is functional or class\nvar FunctionalComponent = 1;\nvar ClassComponent = 2;\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nvar HostComponent = 5;\nvar HostText = 6;\nvar CallComponent = 7;\nvar CallHandlerPhase = 8;\nvar ReturnComponent = 9;\nvar Fragment = 10;\n\nvar randomKey = Math.random().toString(36).slice(2);\nvar internalInstanceKey = '__reactInternalInstance$' + randomKey;\nvar internalEventHandlersKey = '__reactEventHandlers$' + randomKey;\n\nfunction precacheFiberNode$1(hostInst, node) {\n  node[internalInstanceKey] = hostInst;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest = void 0;\n  var inst = node[internalInstanceKey];\n  if (inst.tag === HostComponent || inst.tag === HostText) {\n    // In Fiber, this will always be the deepest root.\n    return inst;\n  }\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n  }\n\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode$1(node) {\n  var inst = node[internalInstanceKey];\n  if (inst) {\n    if (inst.tag === HostComponent || inst.tag === HostText) {\n      return inst;\n    } else {\n      return null;\n    }\n  }\n  return null;\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance$1(inst) {\n  if (inst.tag === HostComponent || inst.tag === HostText) {\n    // In Fiber this, is just the state node right now. We assume it will be\n    // a host component or host text.\n    return inst.stateNode;\n  }\n\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  invariant(false, 'getNodeFromInstance: Invalid argument.');\n}\n\nfunction getFiberCurrentPropsFromNode$1(node) {\n  return node[internalEventHandlersKey] || null;\n}\n\nfunction updateFiberProps$1(node, props) {\n  node[internalEventHandlersKey] = props;\n}\n\nvar ReactDOMComponentTree = Object.freeze({\n\tprecacheFiberNode: precacheFiberNode$1,\n\tgetClosestInstanceFromNode: getClosestInstanceFromNode,\n\tgetInstanceFromNode: getInstanceFromNode$1,\n\tgetNodeFromInstance: getNodeFromInstance$1,\n\tgetFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,\n\tupdateFiberProps: updateFiberProps$1\n});\n\nfunction getParent(inst) {\n  do {\n    inst = inst['return'];\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\nfunction getLowestCommonAncestor(instA, instB) {\n  var depthA = 0;\n  for (var tempA = instA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n  var depthB = 0;\n  for (var tempB = instB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  }\n\n  // If A is deeper, crawl up.\n  while (depthA - depthB > 0) {\n    instA = getParent(instA);\n    depthA--;\n  }\n\n  // If B is deeper, crawl up.\n  while (depthB - depthA > 0) {\n    instB = getParent(instB);\n    depthB--;\n  }\n\n  // Walk in lockstep until we find a match.\n  var depth = depthA;\n  while (depth--) {\n    if (instA === instB || instA === instB.alternate) {\n      return instA;\n    }\n    instA = getParent(instA);\n    instB = getParent(instB);\n  }\n  return null;\n}\n\n/**\n * Return if A is an ancestor of B.\n */\n\n\n/**\n * Return the parent instance of the passed-in instance.\n */\nfunction getParentInstance(inst) {\n  return getParent(inst);\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nfunction traverseTwoPhase(inst, fn, arg) {\n  var path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  var i;\n  for (i = path.length; i-- > 0;) {\n    fn(path[i], 'captured', arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], 'bubbled', arg);\n  }\n}\n\n/**\n * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n * should would receive a `mouseEnter` or `mouseLeave` event.\n *\n * Does not invoke the callback on the nearest common ancestor because nothing\n * \"entered\" or \"left\" that element.\n */\nfunction traverseEnterLeave(from, to, fn, argFrom, argTo) {\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;\n  var pathFrom = [];\n  while (true) {\n    if (!from) {\n      break;\n    }\n    if (from === common) {\n      break;\n    }\n    var alternate = from.alternate;\n    if (alternate !== null && alternate === common) {\n      break;\n    }\n    pathFrom.push(from);\n    from = getParent(from);\n  }\n  var pathTo = [];\n  while (true) {\n    if (!to) {\n      break;\n    }\n    if (to === common) {\n      break;\n    }\n    var _alternate = to.alternate;\n    if (_alternate !== null && _alternate === common) {\n      break;\n    }\n    pathTo.push(to);\n    to = getParent(to);\n  }\n  for (var i = 0; i < pathFrom.length; i++) {\n    fn(pathFrom[i], 'bubbled', argFrom);\n  }\n  for (var _i = pathTo.length; _i-- > 0;) {\n    fn(pathTo[_i], 'captured', argTo);\n  }\n}\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(inst, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(inst, registrationName);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing even a\n * single one.\n */\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  {\n    warning(inst, 'Dispatching inst must not be null');\n  }\n  var listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We cannot perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.\n */\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    var targetInst = event._targetInst;\n    var parentInst = targetInst ? getParentInstance(targetInst) : null;\n    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(inst, ignoredDirection, event) {\n  if (inst && event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {\n  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\nvar EventPropagators = Object.freeze({\n\taccumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n\taccumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,\n\taccumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,\n\taccumulateDirectDispatches: accumulateDirectDispatches\n});\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';\n  }\n  return contentKey;\n}\n\n/**\n * This helper object stores information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\nvar compositionState = {\n  _root: null,\n  _startText: null,\n  _fallbackText: null\n};\n\nfunction initialize(nativeEventTarget) {\n  compositionState._root = nativeEventTarget;\n  compositionState._startText = getText();\n  return true;\n}\n\nfunction reset() {\n  compositionState._root = null;\n  compositionState._startText = null;\n  compositionState._fallbackText = null;\n}\n\nfunction getData() {\n  if (compositionState._fallbackText) {\n    return compositionState._fallbackText;\n  }\n\n  var start;\n  var startValue = compositionState._startText;\n  var startLength = startValue.length;\n  var end;\n  var endValue = getText();\n  var endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  var minEnd = startLength - start;\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  var sliceTail = end > 1 ? 1 - end : undefined;\n  compositionState._fallbackText = endValue.slice(start, sliceTail);\n  return compositionState._fallbackText;\n}\n\nfunction getText() {\n  if ('value' in compositionState._root) {\n    return compositionState._root.value;\n  }\n  return compositionState._root[getTextContentAccessor()];\n}\n\n/* eslint valid-typeof: 0 */\n\nvar didWarnForAddedNewProperty = false;\nvar isProxySupported = typeof Proxy === 'function';\nvar EVENT_POOL_SIZE = 10;\n\nvar shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction$1.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function (event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {*} targetInst Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @param {DOMEventTarget} nativeEventTarget Target node.\n */\nfunction SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {\n  {\n    // these have a getter/setter for warnings\n    delete this.nativeEvent;\n    delete this.preventDefault;\n    delete this.stopPropagation;\n  }\n\n  this.dispatchConfig = dispatchConfig;\n  this._targetInst = targetInst;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    {\n      delete this[propName]; // this has a getter/setter for warnings\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = emptyFunction$1.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = emptyFunction$1.thatReturnsFalse;\n  }\n  this.isPropagationStopped = emptyFunction$1.thatReturnsFalse;\n  return this;\n}\n\n_assign(SyntheticEvent.prototype, {\n  preventDefault: function () {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else if (typeof event.returnValue !== 'unknown') {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction$1.thatReturnsTrue;\n  },\n\n  stopPropagation: function () {\n    var event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else if (typeof event.cancelBubble !== 'unknown') {\n      // The ChangeEventPlugin registers a \"propertychange\" event for\n      // IE. This event does not support bubbling or cancelling, and\n      // any references to cancelBubble throw \"Member not found\".  A\n      // typeof check of \"unknown\" circumvents this issue (and is also\n      // IE specific).\n      event.cancelBubble = true;\n    }\n\n    this.isPropagationStopped = emptyFunction$1.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function () {\n    this.isPersistent = emptyFunction$1.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction$1.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function () {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      {\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));\n      }\n    }\n    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {\n      this[shouldBeReleasedProperties[i]] = null;\n    }\n    {\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction$1));\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction$1));\n    }\n  }\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass = function (Class, Interface) {\n  var Super = this;\n\n  var E = function () {};\n  E.prototype = Super.prototype;\n  var prototype = new E();\n\n  _assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = _assign({}, Super.Interface, Interface);\n  Class.augmentClass = Super.augmentClass;\n  addEventPoolingTo(Class);\n};\n\n/** Proxying after everything set on SyntheticEvent\n * to resolve Proxy issue on some WebKit browsers\n * in which some Event properties are set to undefined (GH#10010)\n */\n{\n  if (isProxySupported) {\n    /*eslint-disable no-func-assign */\n    SyntheticEvent = new Proxy(SyntheticEvent, {\n      construct: function (target, args) {\n        return this.apply(target, Object.create(target.prototype), args);\n      },\n      apply: function (constructor, that, args) {\n        return new Proxy(constructor.apply(that, args), {\n          set: function (target, prop, value) {\n            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {\n              warning(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');\n              didWarnForAddedNewProperty = true;\n            }\n            target[prop] = value;\n            return true;\n          }\n        });\n      }\n    });\n    /*eslint-enable no-func-assign */\n  }\n}\n\naddEventPoolingTo(SyntheticEvent);\n\n/**\n * Helper to nullify syntheticEvent instance properties when destructing\n *\n * @param {String} propName\n * @param {?object} getVal\n * @return {object} defineProperty object\n */\nfunction getPooledWarningPropertyDefinition(propName, getVal) {\n  var isFunction = typeof getVal === 'function';\n  return {\n    configurable: true,\n    set: set,\n    get: get\n  };\n\n  function set(val) {\n    var action = isFunction ? 'setting the method' : 'setting the property';\n    warn(action, 'This is effectively a no-op');\n    return val;\n  }\n\n  function get() {\n    var action = isFunction ? 'accessing the method' : 'accessing the property';\n    var result = isFunction ? 'This is a no-op function' : 'This is set to null';\n    warn(action, result);\n    return getVal;\n  }\n\n  function warn(action, result) {\n    var warningCondition = false;\n    warning(warningCondition, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);\n  }\n}\n\nfunction getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {\n  var EventConstructor = this;\n  if (EventConstructor.eventPool.length) {\n    var instance = EventConstructor.eventPool.pop();\n    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);\n    return instance;\n  }\n  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);\n}\n\nfunction releasePooledEvent(event) {\n  var EventConstructor = this;\n  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;\n  event.destructor();\n  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n    EventConstructor.eventPool.push(event);\n  }\n}\n\nfunction addEventPoolingTo(EventConstructor) {\n  EventConstructor.eventPool = [];\n  EventConstructor.getPooled = getPooledEvent;\n  EventConstructor.release = releasePooledEvent;\n}\n\nvar SyntheticEvent$1 = SyntheticEvent;\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent$1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent$1.augmentClass(SyntheticInputEvent, InputEventInterface);\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: 'onBeforeInput',\n      captured: 'onBeforeInputCapture'\n    },\n    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionEnd',\n      captured: 'onCompositionEndCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionStart',\n      captured: 'onCompositionStartCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionUpdate',\n      captured: 'onCompositionUpdateCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case 'topCompositionStart':\n      return eventTypes.compositionStart;\n    case 'topCompositionEnd':\n      return eventTypes.compositionEnd;\n    case 'topCompositionUpdate':\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topKeyUp':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case 'topKeyDown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case 'topKeyPress':\n    case 'topMouseDown':\n    case 'topBlur':\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition status, if any.\nvar isComposing = false;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!isComposing) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!isComposing && eventType === eventTypes.compositionStart) {\n      isComposing = initialize(nativeEventTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (isComposing) {\n        fallbackData = getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topCompositionEnd':\n      return getDataFromCustomEvent(nativeEvent);\n    case 'topKeyPress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'topTextInput':\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (isComposing) {\n    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = getData();\n      reset();\n      isComposing = false;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case 'topPaste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case 'topKeyPress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (!isKeypressCommand(nativeEvent)) {\n        // IE fires the `keypress` event when a user types an emoji via\n        // Touch keyboard of Windows.  In such a case, the `char` property\n        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n        // is 2, the property `which` does not represent an emoji correctly.\n        // In such a case, we directly return the `char` property instead of\n        // using `which`.\n        if (nativeEvent.char && nativeEvent.char.length > 1) {\n          return nativeEvent.char;\n        } else if (nativeEvent.which) {\n          return String.fromCharCode(nativeEvent.which);\n        }\n      }\n      return null;\n    case 'topCompositionEnd':\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }\n};\n\n// Use to restore controlled state after a change event has fired.\n\nvar fiberHostComponent = null;\n\nvar ReactControlledComponentInjection = {\n  injectFiberControlledHostComponent: function (hostComponentImpl) {\n    // The fiber implementation doesn't use dynamic dispatch so we need to\n    // inject the implementation.\n    fiberHostComponent = hostComponentImpl;\n  }\n};\n\nvar restoreTarget = null;\nvar restoreQueue = null;\n\nfunction restoreStateOfTarget(target) {\n  // We perform this translation at the end of the event loop so that we\n  // always receive the correct fiber here\n  var internalInstance = getInstanceFromNode(target);\n  if (!internalInstance) {\n    // Unmounted\n    return;\n  }\n  !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);\n  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);\n}\n\nvar injection$3 = ReactControlledComponentInjection;\n\nfunction enqueueStateRestore(target) {\n  if (restoreTarget) {\n    if (restoreQueue) {\n      restoreQueue.push(target);\n    } else {\n      restoreQueue = [target];\n    }\n  } else {\n    restoreTarget = target;\n  }\n}\n\nfunction restoreStateIfNeeded() {\n  if (!restoreTarget) {\n    return;\n  }\n  var target = restoreTarget;\n  var queuedTargets = restoreQueue;\n  restoreTarget = null;\n  restoreQueue = null;\n\n  restoreStateOfTarget(target);\n  if (queuedTargets) {\n    for (var i = 0; i < queuedTargets.length; i++) {\n      restoreStateOfTarget(queuedTargets[i]);\n    }\n  }\n}\n\nvar ReactControlledComponent = Object.freeze({\n\tinjection: injection$3,\n\tenqueueStateRestore: enqueueStateRestore,\n\trestoreStateIfNeeded: restoreStateIfNeeded\n});\n\n// Used as a way to call batchedUpdates when we don't have a reference to\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n\n// Defaults\nvar fiberBatchedUpdates = function (fn, bookkeeping) {\n  return fn(bookkeeping);\n};\n\nvar isNestingBatched = false;\nfunction batchedUpdates(fn, bookkeeping) {\n  if (isNestingBatched) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state. Therefore, we add the target to\n    // a queue of work.\n    return fiberBatchedUpdates(fn, bookkeeping);\n  }\n  isNestingBatched = true;\n  try {\n    return fiberBatchedUpdates(fn, bookkeeping);\n  } finally {\n    // Here we wait until all updates have propagated, which is important\n    // when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    // Then we restore state of any controlled component.\n    isNestingBatched = false;\n    restoreStateIfNeeded();\n  }\n}\n\nvar ReactGenericBatchingInjection = {\n  injectFiberBatchedUpdates: function (_batchedUpdates) {\n    fiberBatchedUpdates = _batchedUpdates;\n  }\n};\n\nvar injection$4 = ReactGenericBatchingInjection;\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes = {\n  color: true,\n  date: true,\n  datetime: true,\n  'datetime-local': true,\n  email: true,\n  month: true,\n  number: true,\n  password: true,\n  range: true,\n  search: true,\n  tel: true,\n  text: true,\n  time: true,\n  url: true,\n  week: true\n};\n\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n\n  if (nodeName === 'input') {\n    return !!supportedInputTypes[elem.type];\n  }\n\n  if (nodeName === 'textarea') {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * HTML nodeType values that represent the type of the node\n */\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\nvar DOCUMENT_NODE = 9;\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || nativeEvent.srcElement || window;\n\n  // Normalize SVG <use> element events #4963\n  if (target.correspondingUseElement) {\n    target = target.correspondingUseElement;\n  }\n\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === TEXT_NODE ? target.parentNode : target;\n}\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature = document.implementation && document.implementation.hasFeature &&\n  // always returns true in newer browsers as per the standard.\n  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n  document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(node) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value = '';\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(node) {\n  var valueField = isCheckable(node) ? 'checked' : 'value';\n  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n  var currentValue = '' + node[valueField];\n\n  // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n  if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n    return;\n  }\n\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable,\n    configurable: true,\n    get: function () {\n      return descriptor.get.call(this);\n    },\n    set: function (value) {\n      currentValue = '' + value;\n      descriptor.set.call(this, value);\n    }\n  });\n\n  var tracker = {\n    getValue: function () {\n      return currentValue;\n    },\n    setValue: function (value) {\n      currentValue = '' + value;\n    },\n    stopTracking: function () {\n      detachTracker(node);\n      delete node[valueField];\n    }\n  };\n  return tracker;\n}\n\nfunction track(node) {\n  if (getTracker(node)) {\n    return;\n  }\n\n  // TODO: Once it's just Fiber we can move this to node._wrapperState\n  node._valueTracker = trackValueOnNode(node);\n}\n\nfunction updateValueIfChanged(node) {\n  if (!node) {\n    return false;\n  }\n\n  var tracker = getTracker(node);\n  // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n  if (!tracker) {\n    return true;\n  }\n\n  var lastValue = tracker.getValue();\n  var nextValue = getValueFromNode(node);\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n  return false;\n}\n\nvar eventTypes$1 = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: 'onChange',\n      captured: 'onChangeCapture'\n    },\n    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']\n  }\n};\n\nfunction createAndAccumulateChangeEvent(inst, nativeEvent, target) {\n  var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);\n  event.type = 'change';\n  // Flag this event loop as needing state restore.\n  enqueueStateRestore(target);\n  accumulateTwoPhaseDispatches(event);\n  return event;\n}\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementInst = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  enqueueEvents(event);\n  processEventQueue(false);\n}\n\nfunction getInstIfValueChanged(targetInst) {\n  var targetNode = getNodeFromInstance$1(targetInst);\n  if (updateValueIfChanged(targetNode)) {\n    return targetInst;\n  }\n}\n\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topChange') {\n    return targetInst;\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);\n}\n\n/**\n * (For IE <=9) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For IE <=9) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementInst = null;\n}\n\n/**\n * (For IE <=9) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  if (getInstIfValueChanged(activeElementInst)) {\n    manualDispatchChangeEvent(nativeEvent);\n  }\n}\n\nfunction handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {\n  if (topLevelType === 'topFocus') {\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (topLevelType === 'topBlur') {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventPolyfill(topLevelType, targetInst) {\n  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    return getInstIfValueChanged(activeElementInst);\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topClick') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topInput' || topLevelType === 'topChange') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction handleControlledInputBlur(inst, node) {\n  // TODO: In IE, inst is occasionally null. Why?\n  if (inst == null) {\n    return;\n  }\n\n  // Fiber and ReactDOM keep wrapper state in separate places\n  var state = inst._wrapperState || node._wrapperState;\n\n  if (!state || !state.controlled || node.type !== 'number') {\n    return;\n  }\n\n  // If controlled, assign the value attribute to the current value on blur\n  var value = '' + node.value;\n  if (node.getAttribute('value') !== value) {\n    node.setAttribute('value', value);\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes$1,\n\n  _isInputEventSupported: isInputEventSupported,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;\n\n    var getTargetInstFunc, handleEventFunc;\n    if (shouldUseChangeEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForChangeEvent;\n    } else if (isTextInputElement(targetNode)) {\n      if (isInputEventSupported) {\n        getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n      } else {\n        getTargetInstFunc = getTargetInstForInputEventPolyfill;\n        handleEventFunc = handleEventsForInputEventPolyfill;\n      }\n    } else if (shouldUseClickEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForClickEvent;\n    }\n\n    if (getTargetInstFunc) {\n      var inst = getTargetInstFunc(topLevelType, targetInst);\n      if (inst) {\n        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, targetNode, targetInst);\n    }\n\n    // When blurring, set the value attribute for number inputs\n    if (topLevelType === 'topBlur') {\n      handleControlledInputBlur(targetInst, targetNode);\n    }\n  }\n};\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface = {\n  view: null,\n  detail: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface);\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface = {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  pageX: null,\n  pageY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: null,\n  buttons: null,\n  relatedTarget: function (event) {\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nvar eventTypes$2 = {\n  mouseEnter: {\n    registrationName: 'onMouseEnter',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  },\n  mouseLeave: {\n    registrationName: 'onMouseLeave',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n  eventTypes: eventTypes$2,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === 'topMouseOut') {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : getNodeFromInstance$1(from);\n    var toNode = to == null ? win : getNodeFromInstance$1(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n};\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\n\n\nfunction get(key) {\n  return key._reactInternalFiber;\n}\n\nfunction has(key) {\n  return key._reactInternalFiber !== undefined;\n}\n\nfunction set(key, value) {\n  key._reactInternalFiber = value;\n}\n\nvar ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar ReactCurrentOwner = ReactInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;\n\nfunction getComponentName(fiber) {\n  var type = fiber.type;\n\n  if (typeof type === 'string') {\n    return type;\n  }\n  if (typeof type === 'function') {\n    return type.displayName || type.name;\n  }\n  return null;\n}\n\n// Don't change these two values:\nvar NoEffect = 0; //           0b00000000\nvar PerformedWork = 1; //      0b00000001\n\n// You can change the rest (and add more).\nvar Placement = 2; //          0b00000010\nvar Update = 4; //             0b00000100\nvar PlacementAndUpdate = 6; // 0b00000110\nvar Deletion = 8; //           0b00001000\nvar ContentReset = 16; //      0b00010000\nvar Callback = 32; //          0b00100000\nvar Err = 64; //               0b01000000\nvar Ref = 128; //              0b10000000\n\nvar MOUNTING = 1;\nvar MOUNTED = 2;\nvar UNMOUNTED = 3;\n\nfunction isFiberMountedImpl(fiber) {\n  var node = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    if ((node.effectTag & Placement) !== NoEffect) {\n      return MOUNTING;\n    }\n    while (node['return']) {\n      node = node['return'];\n      if ((node.effectTag & Placement) !== NoEffect) {\n        return MOUNTING;\n      }\n    }\n  } else {\n    while (node['return']) {\n      node = node['return'];\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return MOUNTED;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return UNMOUNTED;\n}\n\nfunction isFiberMounted(fiber) {\n  return isFiberMountedImpl(fiber) === MOUNTED;\n}\n\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n      warning(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n  if (!fiber) {\n    return false;\n  }\n  return isFiberMountedImpl(fiber) === MOUNTED;\n}\n\nfunction assertIsMounted(fiber) {\n  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var state = isFiberMountedImpl(fiber);\n    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;\n    if (state === MOUNTING) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  var a = fiber;\n  var b = alternate;\n  while (true) {\n    var parentA = a['return'];\n    var parentB = parentA ? parentA.alternate : null;\n    if (!parentA || !parentB) {\n      // We're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a['return'] !== b['return']) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        _child = _child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          _child = _child.sibling;\n        }\n        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;\n      }\n    }\n\n    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  var node = currentParent;\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child) {\n      node.child['return'] = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node['return'] || node['return'] === currentParent) {\n        return null;\n      }\n      node = node['return'];\n    }\n    node.sibling['return'] = node['return'];\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  var node = currentParent;\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child && node.tag !== HostPortal) {\n      node.child['return'] = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node['return'] || node['return'] === currentParent) {\n        return null;\n      }\n      node = node['return'];\n    }\n    node.sibling['return'] = node['return'];\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nvar CALLBACK_BOOKKEEPING_POOL_SIZE = 10;\nvar callbackBookkeepingPool = [];\n\n/**\n * Find the deepest React component completely containing the root of the\n * passed-in instance (for use when entire React trees are nested within each\n * other). If React trees are not nested, returns null.\n */\nfunction findRootContainerNode(inst) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  while (inst['return']) {\n    inst = inst['return'];\n  }\n  if (inst.tag !== HostRoot) {\n    // This can happen if we're in a detached tree.\n    return null;\n  }\n  return inst.stateNode.containerInfo;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {\n  if (callbackBookkeepingPool.length) {\n    var instance = callbackBookkeepingPool.pop();\n    instance.topLevelType = topLevelType;\n    instance.nativeEvent = nativeEvent;\n    instance.targetInst = targetInst;\n    return instance;\n  }\n  return {\n    topLevelType: topLevelType,\n    nativeEvent: nativeEvent,\n    targetInst: targetInst,\n    ancestors: []\n  };\n}\n\nfunction releaseTopLevelCallbackBookKeeping(instance) {\n  instance.topLevelType = null;\n  instance.nativeEvent = null;\n  instance.targetInst = null;\n  instance.ancestors.length = 0;\n  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {\n    callbackBookkeepingPool.push(instance);\n  }\n}\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var targetInst = bookKeeping.targetInst;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = targetInst;\n  do {\n    if (!ancestor) {\n      bookKeeping.ancestors.push(ancestor);\n      break;\n    }\n    var root = findRootContainerNode(ancestor);\n    if (!root) {\n      break;\n    }\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = getClosestInstanceFromNode(root);\n  } while (ancestor);\n\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {\n    targetInst = bookKeeping.ancestors[i];\n    _handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\n// TODO: can we stop exporting these?\nvar _enabled = true;\nvar _handleTopLevel = void 0;\n\nfunction setHandleTopLevel(handleTopLevel) {\n  _handleTopLevel = handleTopLevel;\n}\n\nfunction setEnabled(enabled) {\n  _enabled = !!enabled;\n}\n\nfunction isEnabled() {\n  return _enabled;\n}\n\n/**\n * Traps top-level events by using event bubbling.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @param {string} handlerBaseName Event name (e.g. \"click\").\n * @param {object} element Element on which to attach listener.\n * @return {?object} An object with a remove function which will forcefully\n *                  remove the listener.\n * @internal\n */\nfunction trapBubbledEvent(topLevelType, handlerBaseName, element) {\n  if (!element) {\n    return null;\n  }\n  return EventListener.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));\n}\n\n/**\n * Traps a top-level event by using event capturing.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @param {string} handlerBaseName Event name (e.g. \"click\").\n * @param {object} element Element on which to attach listener.\n * @return {?object} An object with a remove function which will forcefully\n *                  remove the listener.\n * @internal\n */\nfunction trapCapturedEvent(topLevelType, handlerBaseName, element) {\n  if (!element) {\n    return null;\n  }\n  return EventListener.capture(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));\n}\n\nfunction dispatchEvent(topLevelType, nativeEvent) {\n  if (!_enabled) {\n    return;\n  }\n\n  var nativeEventTarget = getEventTarget(nativeEvent);\n  var targetInst = getClosestInstanceFromNode(nativeEventTarget);\n  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {\n    // If we get an event (ex: img onload) before committing that\n    // component's mount, ignore it for now (that is, treat it as if it was an\n    // event on a non-React tree). We might also consider queueing events and\n    // dispatching them after the mount.\n    targetInst = null;\n  }\n\n  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);\n\n  try {\n    // Event queue being processed in the same cycle allows\n    // `preventDefault`.\n    batchedUpdates(handleTopLevelImpl, bookKeeping);\n  } finally {\n    releaseTopLevelCallbackBookKeeping(bookKeeping);\n  }\n}\n\nvar ReactDOMEventListener = Object.freeze({\n\tget _enabled () { return _enabled; },\n\tget _handleTopLevel () { return _handleTopLevel; },\n\tsetHandleTopLevel: setHandleTopLevel,\n\tsetEnabled: setEnabled,\n\tisEnabled: isEnabled,\n\ttrapBubbledEvent: trapBubbledEvent,\n\ttrapCapturedEvent: trapCapturedEvent,\n\tdispatchEvent: dispatchEvent\n});\n\n/**\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.\n *\n * @param {string} styleProp\n * @param {string} eventName\n * @returns {object}\n */\nfunction makePrefixMap(styleProp, eventName) {\n  var prefixes = {};\n\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\n  prefixes['ms' + styleProp] = 'MS' + eventName;\n  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();\n\n  return prefixes;\n}\n\n/**\n * A list of event names to a configurable list of vendor prefixes.\n */\nvar vendorPrefixes = {\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')\n};\n\n/**\n * Event names that have already been detected and prefixed (if applicable).\n */\nvar prefixedEventNames = {};\n\n/**\n * Element to check for prefixes on.\n */\nvar style = {};\n\n/**\n * Bootstrap if a DOM exists.\n */\nif (ExecutionEnvironment.canUseDOM) {\n  style = document.createElement('div').style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are usable, and if not remove them from the map.\n  if (!('AnimationEvent' in window)) {\n    delete vendorPrefixes.animationend.animation;\n    delete vendorPrefixes.animationiteration.animation;\n    delete vendorPrefixes.animationstart.animation;\n  }\n\n  // Same as above\n  if (!('TransitionEvent' in window)) {\n    delete vendorPrefixes.transitionend.transition;\n  }\n}\n\n/**\n * Attempts to determine the correct vendor prefixed event name.\n *\n * @param {string} eventName\n * @returns {string}\n */\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  } else if (!vendorPrefixes[eventName]) {\n    return eventName;\n  }\n\n  var prefixMap = vendorPrefixes[eventName];\n\n  for (var styleProp in prefixMap) {\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\n      return prefixedEventNames[eventName] = prefixMap[styleProp];\n    }\n  }\n\n  return '';\n}\n\n/**\n * Types of raw signals from the browser caught at the top level.\n *\n * For events like 'submit' which don't consistently bubble (which we\n * trap at a lower node than `document`), binding at `document` would\n * cause duplicate events so we don't include them here.\n */\nvar topLevelTypes$1 = {\n  topAbort: 'abort',\n  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',\n  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',\n  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',\n  topBlur: 'blur',\n  topCancel: 'cancel',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topChange: 'change',\n  topClick: 'click',\n  topClose: 'close',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topLoadedData: 'loadeddata',\n  topLoad: 'load',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topScroll: 'scroll',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topSelectionChange: 'selectionchange',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTextInput: 'textInput',\n  topTimeUpdate: 'timeupdate',\n  topToggle: 'toggle',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting',\n  topWheel: 'wheel'\n};\n\nvar BrowserEventConstants = {\n  topLevelTypes: topLevelTypes$1\n};\n\nfunction runEventQueueInBatch(events) {\n  enqueueEvents(events);\n  processEventQueue(false);\n}\n\n/**\n * Streams a fired top-level event to `EventPluginHub` where plugins have the\n * opportunity to create `ReactEvent`s to be dispatched.\n */\nfunction handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n  runEventQueueInBatch(events);\n}\n\nvar topLevelTypes = BrowserEventConstants.topLevelTypes;\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactDOMEventListener, which is injected and can therefore support\n *    pluggable event sources. This is the only work that occurs in the main\n *    thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar alreadyListeningTo = {};\nvar reactTopListenersCounter = 0;\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * We listen for bubbled touch events on the document object.\n *\n * Firefox v8.01 (and possibly others) exhibited strange behavior when\n * mounting `onmousemove` events at some node that was not the document\n * element. The symptoms were that if your mouse is not moving over something\n * contained within that mount point (for example on the background) the\n * top-level listeners for `onmousemove` won't be called. However, if you\n * register the `mousemove` on the document object, then it will of course\n * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n * top-level listeners to the document object only, at least for these\n * movement types of events and possibly all events.\n *\n * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n *\n * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n * they bubble to document.\n *\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @param {object} contentDocumentHandle Document which owns the container\n */\nfunction listenTo(registrationName, contentDocumentHandle) {\n  var mountAt = contentDocumentHandle;\n  var isListening = getListeningForDocument(mountAt);\n  var dependencies = registrationNameDependencies[registrationName];\n\n  for (var i = 0; i < dependencies.length; i++) {\n    var dependency = dependencies[i];\n    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n      if (dependency === 'topWheel') {\n        if (isEventSupported('wheel')) {\n          trapBubbledEvent('topWheel', 'wheel', mountAt);\n        } else if (isEventSupported('mousewheel')) {\n          trapBubbledEvent('topWheel', 'mousewheel', mountAt);\n        } else {\n          // Firefox needs to capture a different mouse scroll event.\n          // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n          trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);\n        }\n      } else if (dependency === 'topScroll') {\n        trapCapturedEvent('topScroll', 'scroll', mountAt);\n      } else if (dependency === 'topFocus' || dependency === 'topBlur') {\n        trapCapturedEvent('topFocus', 'focus', mountAt);\n        trapCapturedEvent('topBlur', 'blur', mountAt);\n\n        // to make sure blur and focus event listeners are only attached once\n        isListening.topBlur = true;\n        isListening.topFocus = true;\n      } else if (dependency === 'topCancel') {\n        if (isEventSupported('cancel', true)) {\n          trapCapturedEvent('topCancel', 'cancel', mountAt);\n        }\n        isListening.topCancel = true;\n      } else if (dependency === 'topClose') {\n        if (isEventSupported('close', true)) {\n          trapCapturedEvent('topClose', 'close', mountAt);\n        }\n        isListening.topClose = true;\n      } else if (topLevelTypes.hasOwnProperty(dependency)) {\n        trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);\n      }\n\n      isListening[dependency] = true;\n    }\n  }\n}\n\nfunction isListeningToAllDependencies(registrationName, mountAt) {\n  var isListening = getListeningForDocument(mountAt);\n  var dependencies = registrationNameDependencies[registrationName];\n  for (var i = 0; i < dependencies.length; i++) {\n    var dependency = dependencies[i];\n    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === TEXT_NODE) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\n/**\n * @param {DOMElement} outerNode\n * @return {?object}\n */\nfunction getOffsets(outerNode) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode$$1 = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  // In Firefox, anchorNode and focusNode can be \"anonymous divs\", e.g. the\n  // up/down buttons on an <input type=\"number\">. Anonymous divs do not seem to\n  // expose properties, triggering a \"Permission denied error\" if any of its\n  // properties are accessed. The only seemingly possible way to avoid erroring\n  // is to access a property that typically works for non-anonymous divs and\n  // catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n  try {\n    /* eslint-disable no-unused-expressions */\n    anchorNode.nodeType;\n    focusNode$$1.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset);\n}\n\n/**\n * Returns {start, end} where `start` is the character/codepoint index of\n * (anchorNode, anchorOffset) within the textContent of `outerNode`, and\n * `end` is the index of (focusNode, focusOffset).\n *\n * Returns null if you pass in garbage input but we should probably just crash.\n *\n * Exported only for testing.\n */\nfunction getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset) {\n  var length = 0;\n  var start = -1;\n  var end = -1;\n  var indexWithinAnchor = 0;\n  var indexWithinFocus = 0;\n  var node = outerNode;\n  var parentNode = null;\n\n  outer: while (true) {\n    var next = null;\n\n    while (true) {\n      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {\n        start = length + anchorOffset;\n      }\n      if (node === focusNode$$1 && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {\n        end = length + focusOffset;\n      }\n\n      if (node.nodeType === TEXT_NODE) {\n        length += node.nodeValue.length;\n      }\n\n      if ((next = node.firstChild) === null) {\n        break;\n      }\n      // Moving from `node` to its first child `next`.\n      parentNode = node;\n      node = next;\n    }\n\n    while (true) {\n      if (node === outerNode) {\n        // If `outerNode` has children, this is always the second time visiting\n        // it. If it has no children, this is still the first loop, and the only\n        // valid selection is anchorNode and focusNode both equal to this node\n        // and both offsets 0, in which case we will have handled above.\n        break outer;\n      }\n      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {\n        start = length;\n      }\n      if (parentNode === focusNode$$1 && ++indexWithinFocus === focusOffset) {\n        end = length;\n      }\n      if ((next = node.nextSibling) !== null) {\n        break;\n      }\n      node = parentNode;\n      parentNode = node.parentNode;\n    }\n\n    // Moving from `node` to its next sibling `next`.\n    node = next;\n  }\n\n  if (start === -1 || end === -1) {\n    // This should never happen. (Would happen if the anchor/focus nodes aren't\n    // actually inside the passed-in node.)\n    return null;\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programmatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {\n      return;\n    }\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\n\nfunction hasSelectionCapabilities(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n}\n\nfunction getSelectionInformation() {\n  var focusedElem = getActiveElement();\n  return {\n    focusedElem: focusedElem,\n    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null\n  };\n}\n\n/**\n * @restoreSelection: If any selection information was potentially lost,\n * restore it. This is useful when performing operations that could remove dom\n * nodes and place them back in, resulting in focus being lost.\n */\nfunction restoreSelection(priorSelectionInformation) {\n  var curFocusedElem = getActiveElement();\n  var priorFocusedElem = priorSelectionInformation.focusedElem;\n  var priorSelectionRange = priorSelectionInformation.selectionRange;\n  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n    if (hasSelectionCapabilities(priorFocusedElem)) {\n      setSelection(priorFocusedElem, priorSelectionRange);\n    }\n\n    // Focusing a node can change the scroll position, which is undesirable\n    var ancestors = [];\n    var ancestor = priorFocusedElem;\n    while (ancestor = ancestor.parentNode) {\n      if (ancestor.nodeType === ELEMENT_NODE) {\n        ancestors.push({\n          element: ancestor,\n          left: ancestor.scrollLeft,\n          top: ancestor.scrollTop\n        });\n      }\n    }\n\n    focusNode(priorFocusedElem);\n\n    for (var i = 0; i < ancestors.length; i++) {\n      var info = ancestors[i];\n      info.element.scrollLeft = info.left;\n      info.element.scrollTop = info.top;\n    }\n  }\n}\n\n/**\n * @getSelection: Gets the selection bounds of a focused textarea, input or\n * contentEditable node.\n * -@input: Look up selection bounds of this input\n * -@return {start: selectionStart, end: selectionEnd}\n */\nfunction getSelection$1(input) {\n  var selection = void 0;\n\n  if ('selectionStart' in input) {\n    // Modern browser with input or textarea.\n    selection = {\n      start: input.selectionStart,\n      end: input.selectionEnd\n    };\n  } else {\n    // Content editable or old IE textarea.\n    selection = getOffsets(input);\n  }\n\n  return selection || { start: 0, end: 0 };\n}\n\n/**\n * @setSelection: Sets the selection bounds of a textarea or input and focuses\n * the input.\n * -@input     Set selection bounds of this input or textarea\n * -@offsets   Object of same form that is returned from get*\n */\nfunction setSelection(input, offsets) {\n  var start = offsets.start,\n      end = offsets.end;\n\n  if (end === undefined) {\n    end = start;\n  }\n\n  if ('selectionStart' in input) {\n    input.selectionStart = start;\n    input.selectionEnd = Math.min(end, input.value.length);\n  } else {\n    setOffsets(input, offsets);\n  }\n}\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes$3 = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelect',\n      captured: 'onSelectCapture'\n    },\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\n  }\n};\n\nvar activeElement$1 = null;\nvar activeElementInst$1 = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement$1);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement$1;\n\n    accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n  eventTypes: eventTypes$3,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;\n    // Track whether all listeners exists for this plugin. If none exist, we do\n    // not extract events. See #3639.\n    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {\n      return null;\n    }\n\n    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case 'topFocus':\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement$1 = targetNode;\n          activeElementInst$1 = targetInst;\n          lastSelection = null;\n        }\n        break;\n      case 'topBlur':\n        activeElement$1 = null;\n        activeElementInst$1 = null;\n        lastSelection = null;\n        break;\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case 'topMouseDown':\n        mouseDown = true;\n        break;\n      case 'topContextMenu':\n      case 'topMouseUp':\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case 'topSelectionChange':\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case 'topKeyDown':\n      case 'topKeyUp':\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  }\n};\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\nvar AnimationEventInterface = {\n  animationName: null,\n  elapsedTime: null,\n  pseudoElement: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent$1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function (event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent$1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface = {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface = {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface = {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\nvar TransitionEventInterface = {\n  propertyName: null,\n  elapsedTime: null,\n  pseudoElement: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent$1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\n/**\n * Turns\n * ['abort', ...]\n * into\n * eventTypes = {\n *   'abort': {\n *     phasedRegistrationNames: {\n *       bubbled: 'onAbort',\n *       captured: 'onAbortCapture',\n *     },\n *     dependencies: ['topAbort'],\n *   },\n *   ...\n * };\n * topLevelEventsToDispatchConfig = {\n *   'topAbort': { sameConfig }\n * };\n */\nvar eventTypes$4 = {};\nvar topLevelEventsToDispatchConfig = {};\n['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {\n  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);\n  var onEvent = 'on' + capitalizedEvent;\n  var topEvent = 'top' + capitalizedEvent;\n\n  var type = {\n    phasedRegistrationNames: {\n      bubbled: onEvent,\n      captured: onEvent + 'Capture'\n    },\n    dependencies: [topEvent]\n  };\n  eventTypes$4[event] = type;\n  topLevelEventsToDispatchConfig[topEvent] = type;\n});\n\n// Only used in DEV for exhaustiveness validation.\nvar knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];\n\nvar SimpleEventPlugin = {\n  eventTypes: eventTypes$4,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case 'topKeyPress':\n        // Firefox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n      /* falls through */\n      case 'topKeyDown':\n      case 'topKeyUp':\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n      case 'topBlur':\n      case 'topFocus':\n        EventConstructor = SyntheticFocusEvent;\n        break;\n      case 'topClick':\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n      /* falls through */\n      case 'topDoubleClick':\n      case 'topMouseDown':\n      case 'topMouseMove':\n      case 'topMouseUp':\n      // TODO: Disabled elements should not respond to mouse events\n      /* falls through */\n      case 'topMouseOut':\n      case 'topMouseOver':\n      case 'topContextMenu':\n        EventConstructor = SyntheticMouseEvent;\n        break;\n      case 'topDrag':\n      case 'topDragEnd':\n      case 'topDragEnter':\n      case 'topDragExit':\n      case 'topDragLeave':\n      case 'topDragOver':\n      case 'topDragStart':\n      case 'topDrop':\n        EventConstructor = SyntheticDragEvent;\n        break;\n      case 'topTouchCancel':\n      case 'topTouchEnd':\n      case 'topTouchMove':\n      case 'topTouchStart':\n        EventConstructor = SyntheticTouchEvent;\n        break;\n      case 'topAnimationEnd':\n      case 'topAnimationIteration':\n      case 'topAnimationStart':\n        EventConstructor = SyntheticAnimationEvent;\n        break;\n      case 'topTransitionEnd':\n        EventConstructor = SyntheticTransitionEvent;\n        break;\n      case 'topScroll':\n        EventConstructor = SyntheticUIEvent;\n        break;\n      case 'topWheel':\n        EventConstructor = SyntheticWheelEvent;\n        break;\n      case 'topCopy':\n      case 'topCut':\n      case 'topPaste':\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n      default:\n        {\n          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {\n            warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);\n          }\n        }\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent$1;\n        break;\n    }\n    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);\n    accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n};\n\nsetHandleTopLevel(handleTopLevel);\n\n/**\n * Inject modules for resolving DOM hierarchy and plugin ordering.\n */\ninjection$1.injectEventPluginOrder(DOMEventPluginOrder);\ninjection$2.injectComponentTree(ReactDOMComponentTree);\n\n/**\n * Some important event plugins included by default (without having to require\n * them).\n */\ninjection$1.injectEventPluginsByName({\n  SimpleEventPlugin: SimpleEventPlugin,\n  EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n  ChangeEventPlugin: ChangeEventPlugin,\n  SelectEventPlugin: SelectEventPlugin,\n  BeforeInputEventPlugin: BeforeInputEventPlugin\n});\n\nvar enableAsyncSubtreeAPI = true;\nvar enableAsyncSchedulingByDefaultInReactDOM = false;\n// Exports React.Fragment\nvar enableReactFragment = false;\n// Exports ReactDOM.createRoot\nvar enableCreateRoot = false;\nvar enableUserTimingAPI = true;\n\n// Mutating mode (React DOM, React ART, React Native):\nvar enableMutatingReconciler = true;\n// Experimental noop mode (currently unused):\nvar enableNoopReconciler = false;\n// Experimental persistent mode (CS):\nvar enablePersistentReconciler = false;\n\n// Only used in www builds.\n\nvar valueStack = [];\n\n{\n  var fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\n\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      warning(false, 'Unexpected pop.');\n    }\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      warning(false, 'Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction reset$1() {\n  while (index > -1) {\n    valueStack[index] = null;\n\n    {\n      fiberStack[index] = null;\n    }\n\n    index--;\n  }\n}\n\nvar describeComponentFrame = function (name, source, ownerName) {\n  return '\\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n};\n\nfunction describeFiber(fiber) {\n  switch (fiber.tag) {\n    case IndeterminateComponent:\n    case FunctionalComponent:\n    case ClassComponent:\n    case HostComponent:\n      var owner = fiber._debugOwner;\n      var source = fiber._debugSource;\n      var name = getComponentName(fiber);\n      var ownerName = null;\n      if (owner) {\n        ownerName = getComponentName(owner);\n      }\n      return describeComponentFrame(name, source, ownerName);\n    default:\n      return '';\n  }\n}\n\n// This function can only be called with a work-in-progress fiber and\n// only during begin or complete phase. Do not call it under any other\n// circumstances.\nfunction getStackAddendumByWorkInProgressFiber(workInProgress) {\n  var info = '';\n  var node = workInProgress;\n  do {\n    info += describeFiber(node);\n    // Otherwise this return pointer might point to the wrong tree:\n    node = node['return'];\n  } while (node);\n  return info;\n}\n\nfunction getCurrentFiberOwnerName() {\n  {\n    var fiber = ReactDebugCurrentFiber.current;\n    if (fiber === null) {\n      return null;\n    }\n    var owner = fiber._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackAddendum() {\n  {\n    var fiber = ReactDebugCurrentFiber.current;\n    if (fiber === null) {\n      return null;\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackAddendumByWorkInProgressFiber(fiber);\n  }\n  return null;\n}\n\nfunction resetCurrentFiber() {\n  ReactDebugCurrentFrame.getCurrentStack = null;\n  ReactDebugCurrentFiber.current = null;\n  ReactDebugCurrentFiber.phase = null;\n}\n\nfunction setCurrentFiber(fiber) {\n  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;\n  ReactDebugCurrentFiber.current = fiber;\n  ReactDebugCurrentFiber.phase = null;\n}\n\nfunction setCurrentPhase(phase) {\n  ReactDebugCurrentFiber.phase = phase;\n}\n\nvar ReactDebugCurrentFiber = {\n  current: null,\n  phase: null,\n  resetCurrentFiber: resetCurrentFiber,\n  setCurrentFiber: setCurrentFiber,\n  setCurrentPhase: setCurrentPhase,\n  getCurrentFiberOwnerName: getCurrentFiberOwnerName,\n  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum\n};\n\n// Prefix measurements so that it's possible to filter them.\n// Longer prefixes are hard to read in DevTools.\nvar reactEmoji = '\\u269B';\nvar warningEmoji = '\\u26D4';\nvar supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';\n\n// Keep track of current fiber so that we know the path to unwind on pause.\n// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?\nvar currentFiber = null;\n// If we're in the middle of user code, which fiber and method is it?\n// Reusing `currentFiber` would be confusing for this because user code fiber\n// can change during commit phase too, but we don't need to unwind it (since\n// lifecycles in the commit phase don't resemble a tree).\nvar currentPhase = null;\nvar currentPhaseFiber = null;\n// Did lifecycle hook schedule an update? This is often a performance problem,\n// so we will keep track of it, and include it in the report.\n// Track commits caused by cascading updates.\nvar isCommitting = false;\nvar hasScheduledUpdateInCurrentCommit = false;\nvar hasScheduledUpdateInCurrentPhase = false;\nvar commitCountInCurrentWorkLoop = 0;\nvar effectCountInCurrentCommit = 0;\nvar isWaitingForCallback = false;\n// During commits, we only show a measurement once per method name\n// to avoid stretch the commit phase with measurement overhead.\nvar labelsInCurrentCommit = new Set();\n\nvar formatMarkName = function (markName) {\n  return reactEmoji + ' ' + markName;\n};\n\nvar formatLabel = function (label, warning$$1) {\n  var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';\n  var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';\n  return '' + prefix + label + suffix;\n};\n\nvar beginMark = function (markName) {\n  performance.mark(formatMarkName(markName));\n};\n\nvar clearMark = function (markName) {\n  performance.clearMarks(formatMarkName(markName));\n};\n\nvar endMark = function (label, markName, warning$$1) {\n  var formattedMarkName = formatMarkName(markName);\n  var formattedLabel = formatLabel(label, warning$$1);\n  try {\n    performance.measure(formattedLabel, formattedMarkName);\n  } catch (err) {}\n  // If previous mark was missing for some reason, this will throw.\n  // This could only happen if React crashed in an unexpected place earlier.\n  // Don't pile on with more errors.\n\n  // Clear marks immediately to avoid growing buffer.\n  performance.clearMarks(formattedMarkName);\n  performance.clearMeasures(formattedLabel);\n};\n\nvar getFiberMarkName = function (label, debugID) {\n  return label + ' (#' + debugID + ')';\n};\n\nvar getFiberLabel = function (componentName, isMounted, phase) {\n  if (phase === null) {\n    // These are composite component total time measurements.\n    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';\n  } else {\n    // Composite component methods.\n    return componentName + '.' + phase;\n  }\n};\n\nvar beginFiberMark = function (fiber, phase) {\n  var componentName = getComponentName(fiber) || 'Unknown';\n  var debugID = fiber._debugID;\n  var isMounted = fiber.alternate !== null;\n  var label = getFiberLabel(componentName, isMounted, phase);\n\n  if (isCommitting && labelsInCurrentCommit.has(label)) {\n    // During the commit phase, we don't show duplicate labels because\n    // there is a fixed overhead for every measurement, and we don't\n    // want to stretch the commit phase beyond necessary.\n    return false;\n  }\n  labelsInCurrentCommit.add(label);\n\n  var markName = getFiberMarkName(label, debugID);\n  beginMark(markName);\n  return true;\n};\n\nvar clearFiberMark = function (fiber, phase) {\n  var componentName = getComponentName(fiber) || 'Unknown';\n  var debugID = fiber._debugID;\n  var isMounted = fiber.alternate !== null;\n  var label = getFiberLabel(componentName, isMounted, phase);\n  var markName = getFiberMarkName(label, debugID);\n  clearMark(markName);\n};\n\nvar endFiberMark = function (fiber, phase, warning$$1) {\n  var componentName = getComponentName(fiber) || 'Unknown';\n  var debugID = fiber._debugID;\n  var isMounted = fiber.alternate !== null;\n  var label = getFiberLabel(componentName, isMounted, phase);\n  var markName = getFiberMarkName(label, debugID);\n  endMark(label, markName, warning$$1);\n};\n\nvar shouldIgnoreFiber = function (fiber) {\n  // Host components should be skipped in the timeline.\n  // We could check typeof fiber.type, but does this work with RN?\n  switch (fiber.tag) {\n    case HostRoot:\n    case HostComponent:\n    case HostText:\n    case HostPortal:\n    case ReturnComponent:\n    case Fragment:\n      return true;\n    default:\n      return false;\n  }\n};\n\nvar clearPendingPhaseMeasurement = function () {\n  if (currentPhase !== null && currentPhaseFiber !== null) {\n    clearFiberMark(currentPhaseFiber, currentPhase);\n  }\n  currentPhaseFiber = null;\n  currentPhase = null;\n  hasScheduledUpdateInCurrentPhase = false;\n};\n\nvar pauseTimers = function () {\n  // Stops all currently active measurements so that they can be resumed\n  // if we continue in a later deferred loop from the same unit of work.\n  var fiber = currentFiber;\n  while (fiber) {\n    if (fiber._debugIsCurrentlyTiming) {\n      endFiberMark(fiber, null, null);\n    }\n    fiber = fiber['return'];\n  }\n};\n\nvar resumeTimersRecursively = function (fiber) {\n  if (fiber['return'] !== null) {\n    resumeTimersRecursively(fiber['return']);\n  }\n  if (fiber._debugIsCurrentlyTiming) {\n    beginFiberMark(fiber, null);\n  }\n};\n\nvar resumeTimers = function () {\n  // Resumes all measurements that were active during the last deferred loop.\n  if (currentFiber !== null) {\n    resumeTimersRecursively(currentFiber);\n  }\n};\n\nfunction recordEffect() {\n  if (enableUserTimingAPI) {\n    effectCountInCurrentCommit++;\n  }\n}\n\nfunction recordScheduleUpdate() {\n  if (enableUserTimingAPI) {\n    if (isCommitting) {\n      hasScheduledUpdateInCurrentCommit = true;\n    }\n    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {\n      hasScheduledUpdateInCurrentPhase = true;\n    }\n  }\n}\n\nfunction startRequestCallbackTimer() {\n  if (enableUserTimingAPI) {\n    if (supportsUserTiming && !isWaitingForCallback) {\n      isWaitingForCallback = true;\n      beginMark('(Waiting for async callback...)');\n    }\n  }\n}\n\nfunction stopRequestCallbackTimer(didExpire) {\n  if (enableUserTimingAPI) {\n    if (supportsUserTiming) {\n      isWaitingForCallback = false;\n      var warning$$1 = didExpire ? 'React was blocked by main thread' : null;\n      endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning$$1);\n    }\n  }\n}\n\nfunction startWorkTimer(fiber) {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // If we pause, this is the fiber to unwind from.\n    currentFiber = fiber;\n    if (!beginFiberMark(fiber, null)) {\n      return;\n    }\n    fiber._debugIsCurrentlyTiming = true;\n  }\n}\n\nfunction cancelWorkTimer(fiber) {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // Remember we shouldn't complete measurement for this fiber.\n    // Otherwise flamechart will be deep even for small updates.\n    fiber._debugIsCurrentlyTiming = false;\n    clearFiberMark(fiber, null);\n  }\n}\n\nfunction stopWorkTimer(fiber) {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // If we pause, its parent is the fiber to unwind from.\n    currentFiber = fiber['return'];\n    if (!fiber._debugIsCurrentlyTiming) {\n      return;\n    }\n    fiber._debugIsCurrentlyTiming = false;\n    endFiberMark(fiber, null, null);\n  }\n}\n\nfunction stopFailedWorkTimer(fiber) {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // If we pause, its parent is the fiber to unwind from.\n    currentFiber = fiber['return'];\n    if (!fiber._debugIsCurrentlyTiming) {\n      return;\n    }\n    fiber._debugIsCurrentlyTiming = false;\n    var warning$$1 = 'An error was thrown inside this error boundary';\n    endFiberMark(fiber, null, warning$$1);\n  }\n}\n\nfunction startPhaseTimer(fiber, phase) {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    clearPendingPhaseMeasurement();\n    if (!beginFiberMark(fiber, phase)) {\n      return;\n    }\n    currentPhaseFiber = fiber;\n    currentPhase = phase;\n  }\n}\n\nfunction stopPhaseTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    if (currentPhase !== null && currentPhaseFiber !== null) {\n      var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;\n      endFiberMark(currentPhaseFiber, currentPhase, warning$$1);\n    }\n    currentPhase = null;\n    currentPhaseFiber = null;\n  }\n}\n\nfunction startWorkLoopTimer(nextUnitOfWork) {\n  if (enableUserTimingAPI) {\n    currentFiber = nextUnitOfWork;\n    if (!supportsUserTiming) {\n      return;\n    }\n    commitCountInCurrentWorkLoop = 0;\n    // This is top level call.\n    // Any other measurements are performed within.\n    beginMark('(React Tree Reconciliation)');\n    // Resume any measurements that were in progress during the last loop.\n    resumeTimers();\n  }\n}\n\nfunction stopWorkLoopTimer(interruptedBy) {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var warning$$1 = null;\n    if (interruptedBy !== null) {\n      if (interruptedBy.tag === HostRoot) {\n        warning$$1 = 'A top-level update interrupted the previous render';\n      } else {\n        var componentName = getComponentName(interruptedBy) || 'Unknown';\n        warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';\n      }\n    } else if (commitCountInCurrentWorkLoop > 1) {\n      warning$$1 = 'There were cascading updates';\n    }\n    commitCountInCurrentWorkLoop = 0;\n    // Pause any measurements until the next loop.\n    pauseTimers();\n    endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning$$1);\n  }\n}\n\nfunction startCommitTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    isCommitting = true;\n    hasScheduledUpdateInCurrentCommit = false;\n    labelsInCurrentCommit.clear();\n    beginMark('(Committing Changes)');\n  }\n}\n\nfunction stopCommitTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n\n    var warning$$1 = null;\n    if (hasScheduledUpdateInCurrentCommit) {\n      warning$$1 = 'Lifecycle hook scheduled a cascading update';\n    } else if (commitCountInCurrentWorkLoop > 0) {\n      warning$$1 = 'Caused by a cascading update in earlier commit';\n    }\n    hasScheduledUpdateInCurrentCommit = false;\n    commitCountInCurrentWorkLoop++;\n    isCommitting = false;\n    labelsInCurrentCommit.clear();\n\n    endMark('(Committing Changes)', '(Committing Changes)', warning$$1);\n  }\n}\n\nfunction startCommitHostEffectsTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    effectCountInCurrentCommit = 0;\n    beginMark('(Committing Host Effects)');\n  }\n}\n\nfunction stopCommitHostEffectsTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var count = effectCountInCurrentCommit;\n    effectCountInCurrentCommit = 0;\n    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);\n  }\n}\n\nfunction startCommitLifeCyclesTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    effectCountInCurrentCommit = 0;\n    beginMark('(Calling Lifecycle Methods)');\n  }\n}\n\nfunction stopCommitLifeCyclesTimer() {\n  if (enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var count = effectCountInCurrentCommit;\n    effectCountInCurrentCommit = 0;\n    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);\n  }\n}\n\n{\n  var warnedAboutMissingGetChildContext = {};\n}\n\n// A cursor to the current merged context object on the stack.\nvar contextStackCursor = createCursor(emptyObject);\n// A cursor to a boolean indicating whether the context has changed.\nvar didPerformWorkStackCursor = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nvar previousContext = emptyObject;\n\nfunction getUnmaskedContext(workInProgress) {\n  var hasOwnContext = isContextProvider(workInProgress);\n  if (hasOwnContext) {\n    // If the fiber is a context provider itself, when we read its context\n    // we have already pushed its own child context on the stack. A context\n    // provider should not \"see\" its own child context. Therefore we read the\n    // previous (parent) context instead for a context provider.\n    return previousContext;\n  }\n  return contextStackCursor.current;\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  var instance = workInProgress.stateNode;\n  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  var type = workInProgress.type;\n  var contextTypes = type.contextTypes;\n  if (!contextTypes) {\n    return emptyObject;\n  }\n\n  // Avoid recreating masked context unless unmasked context has changed.\n  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n  // This may trigger infinite loops if componentWillReceiveProps calls setState.\n  var instance = workInProgress.stateNode;\n  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n    return instance.__reactInternalMemoizedMaskedChildContext;\n  }\n\n  var context = {};\n  for (var key in contextTypes) {\n    context[key] = unmaskedContext[key];\n  }\n\n  {\n    var name = getComponentName(workInProgress) || 'Unknown';\n    checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // Context is created before the class component is instantiated so check for instance.\n  if (instance) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return context;\n}\n\nfunction hasContextChanged() {\n  return didPerformWorkStackCursor.current;\n}\n\nfunction isContextConsumer(fiber) {\n  return fiber.tag === ClassComponent && fiber.type.contextTypes != null;\n}\n\nfunction isContextProvider(fiber) {\n  return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;\n}\n\nfunction popContextProvider(fiber) {\n  if (!isContextProvider(fiber)) {\n    return;\n  }\n\n  pop(didPerformWorkStackCursor, fiber);\n  pop(contextStackCursor, fiber);\n}\n\nfunction popTopLevelContextObject(fiber) {\n  pop(didPerformWorkStackCursor, fiber);\n  pop(contextStackCursor, fiber);\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n  push(contextStackCursor, context, fiber);\n  push(didPerformWorkStackCursor, didChange, fiber);\n}\n\nfunction processChildContext(fiber, parentContext) {\n  var instance = fiber.stateNode;\n  var childContextTypes = fiber.type.childContextTypes;\n\n  // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n  // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n  if (typeof instance.getChildContext !== 'function') {\n    {\n      var componentName = getComponentName(fiber) || 'Unknown';\n\n      if (!warnedAboutMissingGetChildContext[componentName]) {\n        warnedAboutMissingGetChildContext[componentName] = true;\n        warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n      }\n    }\n    return parentContext;\n  }\n\n  var childContext = void 0;\n  {\n    ReactDebugCurrentFiber.setCurrentPhase('getChildContext');\n  }\n  startPhaseTimer(fiber, 'getChildContext');\n  childContext = instance.getChildContext();\n  stopPhaseTimer();\n  {\n    ReactDebugCurrentFiber.setCurrentPhase(null);\n  }\n  for (var contextKey in childContext) {\n    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;\n  }\n  {\n    var name = getComponentName(fiber) || 'Unknown';\n    checkPropTypes(childContextTypes, childContext, 'child context', name,\n    // In practice, there is one case in which we won't get a stack. It's when\n    // somebody calls unstable_renderSubtreeIntoContainer() and we process\n    // context from the parent component instance. The stack will be missing\n    // because it's outside of the reconciliation, and so the pointer has not\n    // been set. This is rare and doesn't matter. We'll also remove that API.\n    ReactDebugCurrentFiber.getCurrentFiberStackAddendum);\n  }\n\n  return _assign({}, parentContext, childContext);\n}\n\nfunction pushContextProvider(workInProgress) {\n  if (!isContextProvider(workInProgress)) {\n    return false;\n  }\n\n  var instance = workInProgress.stateNode;\n  // We push the context as early as possible to ensure stack integrity.\n  // If the instance does not exist yet, we will push null at first,\n  // and replace it on the stack later when invalidating the context.\n  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;\n\n  // Remember the parent context so we can merge with it later.\n  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n  previousContext = contextStackCursor.current;\n  push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n\n  return true;\n}\n\nfunction invalidateContextProvider(workInProgress, didChange) {\n  var instance = workInProgress.stateNode;\n  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n  if (didChange) {\n    // Merge parent and own context.\n    // Skip this if we're not updating due to sCU.\n    // This avoids unnecessarily recomputing memoized values.\n    var mergedContext = processChildContext(workInProgress, previousContext);\n    instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n    // Replace the old (or empty) context with the new one.\n    // It is important to unwind the context in the reverse order.\n    pop(didPerformWorkStackCursor, workInProgress);\n    pop(contextStackCursor, workInProgress);\n    // Now push the new context and mark that it has changed.\n    push(contextStackCursor, mergedContext, workInProgress);\n    push(didPerformWorkStackCursor, didChange, workInProgress);\n  } else {\n    pop(didPerformWorkStackCursor, workInProgress);\n    push(didPerformWorkStackCursor, didChange, workInProgress);\n  }\n}\n\nfunction resetContext() {\n  previousContext = emptyObject;\n  contextStackCursor.current = emptyObject;\n  didPerformWorkStackCursor.current = false;\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n  // makes sense elsewhere\n  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n  var node = fiber;\n  while (node.tag !== HostRoot) {\n    if (isContextProvider(node)) {\n      return node.stateNode.__reactInternalMemoizedMergedChildContext;\n    }\n    var parent = node['return'];\n    !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    node = parent;\n  }\n  return node.stateNode.context;\n}\n\nvar NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax\n\nvar Sync = 1;\nvar Never = 2147483647; // Max int32: Math.pow(2, 31) - 1\n\nvar UNIT_SIZE = 10;\nvar MAGIC_NUMBER_OFFSET = 2;\n\n// 1 unit of expiration time represents 10ms.\nfunction msToExpirationTime(ms) {\n  // Always add an offset so that we don't clash with the magic number for NoWork.\n  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;\n}\n\nfunction ceiling(num, precision) {\n  return ((num / precision | 0) + 1) * precision;\n}\n\nfunction computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {\n  return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);\n}\n\nvar NoContext = 0;\nvar AsyncUpdates = 1;\n\n{\n  var hasBadMapPolyfill = false;\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\n// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\n\n\n{\n  var debugCounter = 1;\n}\n\nfunction FiberNode(tag, key, internalContextTag) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this['return'] = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = null;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n\n  this.internalContextTag = internalContextTag;\n\n  // Effects\n  this.effectTag = NoEffect;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.expirationTime = NoWork;\n\n  this.alternate = null;\n\n  {\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugIsCurrentlyTiming = false;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nvar createFiber = function (tag, key, internalContextTag) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, key, internalContextTag);\n};\n\nfunction shouldConstruct(Component) {\n  return !!(Component.prototype && Component.prototype.isReactComponent);\n}\n\n// This is used to create an alternate fiber to do work on.\nfunction createWorkInProgress(current, pendingProps, expirationTime) {\n  var workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, current.key, current.internalContextTag);\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.effectTag = NoEffect;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n  }\n\n  workInProgress.expirationTime = expirationTime;\n  workInProgress.pendingProps = pendingProps;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  return workInProgress;\n}\n\nfunction createHostRootFiber() {\n  var fiber = createFiber(HostRoot, null, NoContext);\n  return fiber;\n}\n\nfunction createFiberFromElement(element, internalContextTag, expirationTime) {\n  var owner = null;\n  {\n    owner = element._owner;\n  }\n\n  var fiber = void 0;\n  var type = element.type,\n      key = element.key;\n\n  if (typeof type === 'function') {\n    fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);\n    fiber.type = type;\n    fiber.pendingProps = element.props;\n  } else if (typeof type === 'string') {\n    fiber = createFiber(HostComponent, key, internalContextTag);\n    fiber.type = type;\n    fiber.pendingProps = element.props;\n  } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {\n    // Currently assumed to be a continuation and therefore is a fiber already.\n    // TODO: The yield system is currently broken for updates in some cases.\n    // The reified yield stores a fiber, but we don't know which fiber that is;\n    // the current or a workInProgress? When the continuation gets rendered here\n    // we don't know if we can reuse that fiber or if we need to clone it.\n    // There is probably a clever way to restructure this.\n    fiber = type;\n    fiber.pendingProps = element.props;\n  } else {\n    var info = '';\n    {\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n      var ownerName = owner ? getComponentName(owner) : null;\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n    }\n    invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);\n  }\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  fiber.expirationTime = expirationTime;\n\n  return fiber;\n}\n\nfunction createFiberFromFragment(elements, internalContextTag, expirationTime, key) {\n  var fiber = createFiber(Fragment, key, internalContextTag);\n  fiber.pendingProps = elements;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromText(content, internalContextTag, expirationTime) {\n  var fiber = createFiber(HostText, null, internalContextTag);\n  fiber.pendingProps = content;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(HostComponent, null, NoContext);\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nfunction createFiberFromCall(call, internalContextTag, expirationTime) {\n  var fiber = createFiber(CallComponent, call.key, internalContextTag);\n  fiber.type = call.handler;\n  fiber.pendingProps = call;\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromReturn(returnNode, internalContextTag, expirationTime) {\n  var fiber = createFiber(ReturnComponent, null, internalContextTag);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromPortal(portal, internalContextTag, expirationTime) {\n  var fiber = createFiber(HostPortal, portal.key, internalContextTag);\n  fiber.pendingProps = portal.children || [];\n  fiber.expirationTime = expirationTime;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n}\n\nfunction createFiberRoot(containerInfo, hydrate) {\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  var uninitializedFiber = createHostRootFiber();\n  var root = {\n    current: uninitializedFiber,\n    containerInfo: containerInfo,\n    pendingChildren: null,\n    remainingExpirationTime: NoWork,\n    isReadyForCommit: false,\n    finishedWork: null,\n    context: null,\n    pendingContext: null,\n    hydrate: hydrate,\n    nextScheduledRoot: null\n  };\n  uninitializedFiber.stateNode = root;\n  return root;\n}\n\nvar onCommitFiberRoot = null;\nvar onCommitFiberUnmount = null;\nvar hasLoggedError = false;\n\nfunction catchErrors(fn) {\n  return function (arg) {\n    try {\n      return fn(arg);\n    } catch (err) {\n      if (true && !hasLoggedError) {\n        hasLoggedError = true;\n        warning(false, 'React DevTools encountered an error: %s', err);\n      }\n    }\n  };\n}\n\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    {\n      warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    var rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    onCommitFiberRoot = catchErrors(function (root) {\n      return hook.onCommitFiberRoot(rendererID, root);\n    });\n    onCommitFiberUnmount = catchErrors(function (fiber) {\n      return hook.onCommitFiberUnmount(rendererID, fiber);\n    });\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      warning(false, 'React DevTools encountered an error: %s.', err);\n    }\n  }\n  // DevTools exists\n  return true;\n}\n\nfunction onCommitRoot(root) {\n  if (typeof onCommitFiberRoot === 'function') {\n    onCommitFiberRoot(root);\n  }\n}\n\nfunction onCommitUnmount(fiber) {\n  if (typeof onCommitFiberUnmount === 'function') {\n    onCommitFiberUnmount(fiber);\n  }\n}\n\n{\n  var didWarnUpdateInsideUpdate = false;\n}\n\n// Callbacks are not validated until invocation\n\n\n// Singly linked-list of updates. When an update is scheduled, it is added to\n// the queue of the current fiber and the work-in-progress fiber. The two queues\n// are separate but they share a persistent structure.\n//\n// During reconciliation, updates are removed from the work-in-progress fiber,\n// but they remain on the current fiber. That ensures that if a work-in-progress\n// is aborted, the aborted updates are recovered by cloning from current.\n//\n// The work-in-progress queue is always a subset of the current queue.\n//\n// When the tree is committed, the work-in-progress becomes the current.\n\n\nfunction createUpdateQueue(baseState) {\n  var queue = {\n    baseState: baseState,\n    expirationTime: NoWork,\n    first: null,\n    last: null,\n    callbackList: null,\n    hasForceUpdate: false,\n    isInitialized: false\n  };\n  {\n    queue.isProcessing = false;\n  }\n  return queue;\n}\n\nfunction insertUpdateIntoQueue(queue, update) {\n  // Append the update to the end of the list.\n  if (queue.last === null) {\n    // Queue is empty\n    queue.first = queue.last = update;\n  } else {\n    queue.last.next = update;\n    queue.last = update;\n  }\n  if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {\n    queue.expirationTime = update.expirationTime;\n  }\n}\n\nfunction insertUpdateIntoFiber(fiber, update) {\n  // We'll have at least one and at most two distinct update queues.\n  var alternateFiber = fiber.alternate;\n  var queue1 = fiber.updateQueue;\n  if (queue1 === null) {\n    // TODO: We don't know what the base state will be until we begin work.\n    // It depends on which fiber is the next current. Initialize with an empty\n    // base state, then set to the memoizedState when rendering. Not super\n    // happy with this approach.\n    queue1 = fiber.updateQueue = createUpdateQueue(null);\n  }\n\n  var queue2 = void 0;\n  if (alternateFiber !== null) {\n    queue2 = alternateFiber.updateQueue;\n    if (queue2 === null) {\n      queue2 = alternateFiber.updateQueue = createUpdateQueue(null);\n    }\n  } else {\n    queue2 = null;\n  }\n  queue2 = queue2 !== queue1 ? queue2 : null;\n\n  // Warn if an update is scheduled from inside an updater function.\n  {\n    if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {\n      warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  // If there's only one queue, add the update to that queue and exit.\n  if (queue2 === null) {\n    insertUpdateIntoQueue(queue1, update);\n    return;\n  }\n\n  // If either queue is empty, we need to add to both queues.\n  if (queue1.last === null || queue2.last === null) {\n    insertUpdateIntoQueue(queue1, update);\n    insertUpdateIntoQueue(queue2, update);\n    return;\n  }\n\n  // If both lists are not empty, the last update is the same for both lists\n  // because of structural sharing. So, we should only append to one of\n  // the lists.\n  insertUpdateIntoQueue(queue1, update);\n  // But we still need to update the `last` pointer of queue2.\n  queue2.last = update;\n}\n\nfunction getUpdateExpirationTime(fiber) {\n  if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {\n    return NoWork;\n  }\n  var updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    return NoWork;\n  }\n  return updateQueue.expirationTime;\n}\n\nfunction getStateFromUpdate(update, instance, prevState, props) {\n  var partialState = update.partialState;\n  if (typeof partialState === 'function') {\n    var updateFn = partialState;\n    return updateFn.call(instance, prevState, props);\n  } else {\n    return partialState;\n  }\n}\n\nfunction processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {\n  if (current !== null && current.updateQueue === queue) {\n    // We need to create a work-in-progress queue, by cloning the current queue.\n    var currentQueue = queue;\n    queue = workInProgress.updateQueue = {\n      baseState: currentQueue.baseState,\n      expirationTime: currentQueue.expirationTime,\n      first: currentQueue.first,\n      last: currentQueue.last,\n      isInitialized: currentQueue.isInitialized,\n      // These fields are no longer valid because they were already committed.\n      // Reset them.\n      callbackList: null,\n      hasForceUpdate: false\n    };\n  }\n\n  {\n    // Set this flag so we can warn if setState is called inside the update\n    // function of another setState.\n    queue.isProcessing = true;\n  }\n\n  // Reset the remaining expiration time. If we skip over any updates, we'll\n  // increase this accordingly.\n  queue.expirationTime = NoWork;\n\n  // TODO: We don't know what the base state will be until we begin work.\n  // It depends on which fiber is the next current. Initialize with an empty\n  // base state, then set to the memoizedState when rendering. Not super\n  // happy with this approach.\n  var state = void 0;\n  if (queue.isInitialized) {\n    state = queue.baseState;\n  } else {\n    state = queue.baseState = workInProgress.memoizedState;\n    queue.isInitialized = true;\n  }\n  var dontMutatePrevState = true;\n  var update = queue.first;\n  var didSkip = false;\n  while (update !== null) {\n    var updateExpirationTime = update.expirationTime;\n    if (updateExpirationTime > renderExpirationTime) {\n      // This update does not have sufficient priority. Skip it.\n      var remainingExpirationTime = queue.expirationTime;\n      if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {\n        // Update the remaining expiration time.\n        queue.expirationTime = updateExpirationTime;\n      }\n      if (!didSkip) {\n        didSkip = true;\n        queue.baseState = state;\n      }\n      // Continue to the next update.\n      update = update.next;\n      continue;\n    }\n\n    // This update does have sufficient priority.\n\n    // If no previous updates were skipped, drop this update from the queue by\n    // advancing the head of the list.\n    if (!didSkip) {\n      queue.first = update.next;\n      if (queue.first === null) {\n        queue.last = null;\n      }\n    }\n\n    // Process the update\n    var _partialState = void 0;\n    if (update.isReplace) {\n      state = getStateFromUpdate(update, instance, state, props);\n      dontMutatePrevState = true;\n    } else {\n      _partialState = getStateFromUpdate(update, instance, state, props);\n      if (_partialState) {\n        if (dontMutatePrevState) {\n          // $FlowFixMe: Idk how to type this properly.\n          state = _assign({}, state, _partialState);\n        } else {\n          state = _assign(state, _partialState);\n        }\n        dontMutatePrevState = false;\n      }\n    }\n    if (update.isForced) {\n      queue.hasForceUpdate = true;\n    }\n    if (update.callback !== null) {\n      // Append to list of callbacks.\n      var _callbackList = queue.callbackList;\n      if (_callbackList === null) {\n        _callbackList = queue.callbackList = [];\n      }\n      _callbackList.push(update);\n    }\n    update = update.next;\n  }\n\n  if (queue.callbackList !== null) {\n    workInProgress.effectTag |= Callback;\n  } else if (queue.first === null && !queue.hasForceUpdate) {\n    // The queue is empty. We can reset it.\n    workInProgress.updateQueue = null;\n  }\n\n  if (!didSkip) {\n    didSkip = true;\n    queue.baseState = state;\n  }\n\n  {\n    // No longer processing.\n    queue.isProcessing = false;\n  }\n\n  return state;\n}\n\nfunction commitCallbacks(queue, context) {\n  var callbackList = queue.callbackList;\n  if (callbackList === null) {\n    return;\n  }\n  // Set the list to null to make sure they don't get called more than once.\n  queue.callbackList = null;\n  for (var i = 0; i < callbackList.length; i++) {\n    var update = callbackList[i];\n    var _callback = update.callback;\n    // This update might be processed again. Clear the callback so it's only\n    // called once.\n    update.callback = null;\n    !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;\n    _callback.call(context);\n  }\n}\n\nvar fakeInternalInstance = {};\nvar isArray = Array.isArray;\n\n{\n  var didWarnAboutStateAssignmentForComponent = {};\n\n  var warnOnInvalidCallback = function (callback, callerName) {\n    warning(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nvar ReactFiberClassComponent = function (scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {\n  // Class component state updater\n  var updater = {\n    isMounted: isMounted,\n    enqueueSetState: function (instance, partialState, callback) {\n      var fiber = get(instance);\n      callback = callback === undefined ? null : callback;\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      var expirationTime = computeExpirationForFiber(fiber);\n      var update = {\n        expirationTime: expirationTime,\n        partialState: partialState,\n        callback: callback,\n        isReplace: false,\n        isForced: false,\n        nextCallback: null,\n        next: null\n      };\n      insertUpdateIntoFiber(fiber, update);\n      scheduleWork(fiber, expirationTime);\n    },\n    enqueueReplaceState: function (instance, state, callback) {\n      var fiber = get(instance);\n      callback = callback === undefined ? null : callback;\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      var expirationTime = computeExpirationForFiber(fiber);\n      var update = {\n        expirationTime: expirationTime,\n        partialState: state,\n        callback: callback,\n        isReplace: true,\n        isForced: false,\n        nextCallback: null,\n        next: null\n      };\n      insertUpdateIntoFiber(fiber, update);\n      scheduleWork(fiber, expirationTime);\n    },\n    enqueueForceUpdate: function (instance, callback) {\n      var fiber = get(instance);\n      callback = callback === undefined ? null : callback;\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      var expirationTime = computeExpirationForFiber(fiber);\n      var update = {\n        expirationTime: expirationTime,\n        partialState: null,\n        callback: callback,\n        isReplace: false,\n        isForced: true,\n        nextCallback: null,\n        next: null\n      };\n      insertUpdateIntoFiber(fiber, update);\n      scheduleWork(fiber, expirationTime);\n    }\n  };\n\n  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {\n    if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {\n      // If the workInProgress already has an Update effect, return true\n      return true;\n    }\n\n    var instance = workInProgress.stateNode;\n    var type = workInProgress.type;\n    if (typeof instance.shouldComponentUpdate === 'function') {\n      startPhaseTimer(workInProgress, 'shouldComponentUpdate');\n      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);\n      stopPhaseTimer();\n\n      {\n        warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');\n      }\n\n      return shouldUpdate;\n    }\n\n    if (type.prototype && type.prototype.isPureReactComponent) {\n      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n    }\n\n    return true;\n  }\n\n  function checkClassInstance(workInProgress) {\n    var instance = workInProgress.stateNode;\n    var type = workInProgress.type;\n    {\n      var name = getComponentName(workInProgress);\n      var renderPresent = instance.render;\n\n      if (!renderPresent) {\n        if (type.prototype && typeof type.prototype.render === 'function') {\n          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n        } else {\n          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n        }\n      }\n\n      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;\n      warning(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;\n      warning(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n      var noInstancePropTypes = !instance.propTypes;\n      warning(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n      var noInstanceContextTypes = !instance.contextTypes;\n      warning(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';\n      warning(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n        warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');\n      }\n      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';\n      warning(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';\n      warning(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';\n      warning(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n      var hasMutatedProps = instance.props !== workInProgress.pendingProps;\n      warning(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n      var noInstanceDefaultProps = !instance.defaultProps;\n      warning(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    var state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      invariant(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));\n    }\n    if (typeof instance.getChildContext === 'function') {\n      !(typeof workInProgress.type.childContextTypes === 'object') ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', getComponentName(workInProgress)) : void 0;\n    }\n  }\n\n  function resetInputPointers(workInProgress, instance) {\n    instance.props = workInProgress.memoizedProps;\n    instance.state = workInProgress.memoizedState;\n  }\n\n  function adoptClassInstance(workInProgress, instance) {\n    instance.updater = updater;\n    workInProgress.stateNode = instance;\n    // The instance needs access to the fiber so that it can schedule updates\n    set(instance, workInProgress);\n    {\n      instance._reactInternalInstance = fakeInternalInstance;\n    }\n  }\n\n  function constructClassInstance(workInProgress, props) {\n    var ctor = workInProgress.type;\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n    var needsContext = isContextConsumer(workInProgress);\n    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;\n    var instance = new ctor(props, context);\n    adoptClassInstance(workInProgress, instance);\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // ReactFiberContext usually updates this cache but can't for newly-created instances.\n    if (needsContext) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return instance;\n  }\n\n  function callComponentWillMount(workInProgress, instance) {\n    startPhaseTimer(workInProgress, 'componentWillMount');\n    var oldState = instance.state;\n    instance.componentWillMount();\n\n    stopPhaseTimer();\n\n    if (oldState !== instance.state) {\n      {\n        warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentName(workInProgress));\n      }\n      updater.enqueueReplaceState(instance, instance.state, null);\n    }\n  }\n\n  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {\n    startPhaseTimer(workInProgress, 'componentWillReceiveProps');\n    var oldState = instance.state;\n    instance.componentWillReceiveProps(newProps, newContext);\n    stopPhaseTimer();\n\n    if (instance.state !== oldState) {\n      {\n        var componentName = getComponentName(workInProgress) || 'Component';\n        if (!didWarnAboutStateAssignmentForComponent[componentName]) {\n          warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n          didWarnAboutStateAssignmentForComponent[componentName] = true;\n        }\n      }\n      updater.enqueueReplaceState(instance, instance.state, null);\n    }\n  }\n\n  // Invokes the mount life-cycles on a previously never rendered instance.\n  function mountClassInstance(workInProgress, renderExpirationTime) {\n    var current = workInProgress.alternate;\n\n    {\n      checkClassInstance(workInProgress);\n    }\n\n    var instance = workInProgress.stateNode;\n    var state = instance.state || null;\n\n    var props = workInProgress.pendingProps;\n    !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n\n    instance.props = props;\n    instance.state = workInProgress.memoizedState = state;\n    instance.refs = emptyObject;\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n\n    if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {\n      workInProgress.internalContextTag |= AsyncUpdates;\n    }\n\n    if (typeof instance.componentWillMount === 'function') {\n      callComponentWillMount(workInProgress, instance);\n      // If we had additional state updates during this life-cycle, let's\n      // process them now.\n      var updateQueue = workInProgress.updateQueue;\n      if (updateQueue !== null) {\n        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.effectTag |= Update;\n    }\n  }\n\n  // Called on a preexisting class instance. Returns false if a resumed render\n  // could be reused.\n  // function resumeMountClassInstance(\n  //   workInProgress: Fiber,\n  //   priorityLevel: PriorityLevel,\n  // ): boolean {\n  //   const instance = workInProgress.stateNode;\n  //   resetInputPointers(workInProgress, instance);\n\n  //   let newState = workInProgress.memoizedState;\n  //   let newProps = workInProgress.pendingProps;\n  //   if (!newProps) {\n  //     // If there isn't any new props, then we'll reuse the memoized props.\n  //     // This could be from already completed work.\n  //     newProps = workInProgress.memoizedProps;\n  //     invariant(\n  //       newProps != null,\n  //       'There should always be pending or memoized props. This error is ' +\n  //         'likely caused by a bug in React. Please file an issue.',\n  //     );\n  //   }\n  //   const newUnmaskedContext = getUnmaskedContext(workInProgress);\n  //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);\n\n  //   const oldContext = instance.context;\n  //   const oldProps = workInProgress.memoizedProps;\n\n  //   if (\n  //     typeof instance.componentWillReceiveProps === 'function' &&\n  //     (oldProps !== newProps || oldContext !== newContext)\n  //   ) {\n  //     callComponentWillReceiveProps(\n  //       workInProgress,\n  //       instance,\n  //       newProps,\n  //       newContext,\n  //     );\n  //   }\n\n  //   // Process the update queue before calling shouldComponentUpdate\n  //   const updateQueue = workInProgress.updateQueue;\n  //   if (updateQueue !== null) {\n  //     newState = processUpdateQueue(\n  //       workInProgress,\n  //       updateQueue,\n  //       instance,\n  //       newState,\n  //       newProps,\n  //       priorityLevel,\n  //     );\n  //   }\n\n  //   // TODO: Should we deal with a setState that happened after the last\n  //   // componentWillMount and before this componentWillMount? Probably\n  //   // unsupported anyway.\n\n  //   if (\n  //     !checkShouldComponentUpdate(\n  //       workInProgress,\n  //       workInProgress.memoizedProps,\n  //       newProps,\n  //       workInProgress.memoizedState,\n  //       newState,\n  //       newContext,\n  //     )\n  //   ) {\n  //     // Update the existing instance's state, props, and context pointers even\n  //     // though we're bailing out.\n  //     instance.props = newProps;\n  //     instance.state = newState;\n  //     instance.context = newContext;\n  //     return false;\n  //   }\n\n  //   // Update the input pointers now so that they are correct when we call\n  //   // componentWillMount\n  //   instance.props = newProps;\n  //   instance.state = newState;\n  //   instance.context = newContext;\n\n  //   if (typeof instance.componentWillMount === 'function') {\n  //     callComponentWillMount(workInProgress, instance);\n  //     // componentWillMount may have called setState. Process the update queue.\n  //     const newUpdateQueue = workInProgress.updateQueue;\n  //     if (newUpdateQueue !== null) {\n  //       newState = processUpdateQueue(\n  //         workInProgress,\n  //         newUpdateQueue,\n  //         instance,\n  //         newState,\n  //         newProps,\n  //         priorityLevel,\n  //       );\n  //     }\n  //   }\n\n  //   if (typeof instance.componentDidMount === 'function') {\n  //     workInProgress.effectTag |= Update;\n  //   }\n\n  //   instance.state = newState;\n\n  //   return true;\n  // }\n\n  // Invokes the update life-cycles and returns false if it shouldn't rerender.\n  function updateClassInstance(current, workInProgress, renderExpirationTime) {\n    var instance = workInProgress.stateNode;\n    resetInputPointers(workInProgress, instance);\n\n    var oldProps = workInProgress.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n    if (!newProps) {\n      // If there aren't any new props, then we'll reuse the memoized props.\n      // This could be from already completed work.\n      newProps = oldProps;\n      !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    }\n    var oldContext = instance.context;\n    var newUnmaskedContext = getUnmaskedContext(workInProgress);\n    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);\n\n    // Note: During these life-cycles, instance.props/instance.state are what\n    // ever the previously attempted to render - not the \"current\". However,\n    // during componentDidUpdate we pass the \"current\" props.\n\n    if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);\n    }\n\n    // Compute the next state using the memoized state and the update queue.\n    var oldState = workInProgress.memoizedState;\n    // TODO: Previous state can be null.\n    var newState = void 0;\n    if (workInProgress.updateQueue !== null) {\n      newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);\n    } else {\n      newState = oldState;\n    }\n\n    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {\n      // If an update was already in progress, we should schedule an Update\n      // effect even though we're bailing out, so that cWU/cDU are called.\n      if (typeof instance.componentDidUpdate === 'function') {\n        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n          workInProgress.effectTag |= Update;\n        }\n      }\n      return false;\n    }\n\n    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);\n\n    if (shouldUpdate) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        startPhaseTimer(workInProgress, 'componentWillUpdate');\n        instance.componentWillUpdate(newProps, newState, newContext);\n        stopPhaseTimer();\n      }\n      if (typeof instance.componentDidUpdate === 'function') {\n        workInProgress.effectTag |= Update;\n      }\n    } else {\n      // If an update was already in progress, we should schedule an Update\n      // effect even though we're bailing out, so that cWU/cDU are called.\n      if (typeof instance.componentDidUpdate === 'function') {\n        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n          workInProgress.effectTag |= Update;\n        }\n      }\n\n      // If shouldComponentUpdate returned false, we should still update the\n      // memoized props/state to indicate that this work can be reused.\n      memoizeProps(workInProgress, newProps);\n      memoizeState(workInProgress, newState);\n    }\n\n    // Update the existing instance's state, props, and context pointers even\n    // if shouldComponentUpdate returns false.\n    instance.props = newProps;\n    instance.state = newState;\n    instance.context = newContext;\n\n    return shouldUpdate;\n  }\n\n  return {\n    adoptClassInstance: adoptClassInstance,\n    constructClassInstance: constructClassInstance,\n    mountClassInstance: mountClassInstance,\n    // resumeMountClassInstance,\n    updateClassInstance: updateClassInstance\n  };\n};\n\n// The Symbol used to tag the special React types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_PORTAL_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.portal') || 0xeaca;\n\nfunction createPortal$1(children, containerInfo,\n// TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\n\nvar getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;\n\n\n{\n  var didWarnAboutMaps = false;\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  var ownerHasKeyUseWarning = {};\n  var ownerHasFunctionTypeWarning = {};\n\n  var warnForMissingKey = function (child) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    child._store.validated = true;\n\n    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '\"key\" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n    warning(false, 'Each child in an array or iterator should have a unique ' + '\"key\" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());\n  };\n}\n\nvar isArray$1 = Array.isArray;\n\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE;\nvar REACT_CALL_TYPE;\nvar REACT_RETURN_TYPE;\nvar REACT_FRAGMENT_TYPE;\nif (typeof Symbol === 'function' && Symbol['for']) {\n  REACT_ELEMENT_TYPE = Symbol['for']('react.element');\n  REACT_CALL_TYPE = Symbol['for']('react.call');\n  REACT_RETURN_TYPE = Symbol['for']('react.return');\n  REACT_FRAGMENT_TYPE = Symbol['for']('react.fragment');\n} else {\n  REACT_ELEMENT_TYPE = 0xeac7;\n  REACT_CALL_TYPE = 0xeac8;\n  REACT_RETURN_TYPE = 0xeac9;\n  REACT_FRAGMENT_TYPE = 0xeacb;\n}\n\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable === 'undefined') {\n    return null;\n  }\n  var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n  return null;\n}\n\nfunction coerceRef(current, element) {\n  var mixedRef = element.ref;\n  if (mixedRef !== null && typeof mixedRef !== 'function') {\n    if (element._owner) {\n      var owner = element._owner;\n      var inst = void 0;\n      if (owner) {\n        var ownerFiber = owner;\n        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;\n        inst = ownerFiber.stateNode;\n      }\n      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;\n      var stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n      var ref = function (value) {\n        var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;\n      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  if (returnFiber.type !== 'textarea') {\n    var addendum = '';\n    {\n      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');\n    }\n    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);\n  }\n}\n\nfunction warnOnFunctionType() {\n  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');\n\n  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {\n    return;\n  }\n  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;\n\n  warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldClone, shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    if (!shouldClone) {\n      // When we're reconciling in place we have a work in progress copy. We\n      // actually want the current copy. If there is no current copy, then we\n      // don't need to track deletion side-effects.\n      if (childToDelete.alternate === null) {\n        return;\n      }\n      childToDelete = childToDelete.alternate;\n    }\n    // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n    var last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n    childToDelete.nextEffect = null;\n    childToDelete.effectTag = Deletion;\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    var childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    var existingChildren = new Map();\n\n    var existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps, expirationTime) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    if (shouldClone) {\n      var clone = createWorkInProgress(fiber, pendingProps, expirationTime);\n      clone.index = 0;\n      clone.sibling = null;\n      return clone;\n    } else {\n      // We override the expiration time even if it is earlier, because if\n      // we're reconciling at a later time that means that this was\n      // down-prioritized.\n      fiber.expirationTime = expirationTime;\n      fiber.effectTag = NoEffect;\n      fiber.index = 0;\n      fiber.sibling = null;\n      fiber.pendingProps = pendingProps;\n      return fiber;\n    }\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    var current = newFiber.alternate;\n    if (current !== null) {\n      var oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.effectTag = Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.effectTag = Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.effectTag = Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, expirationTime) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);\n      created['return'] = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent, expirationTime);\n      existing['return'] = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, expirationTime) {\n    if (current !== null && current.type === element.type) {\n      // Move based on index\n      var existing = useFiber(current, element.props, expirationTime);\n      existing.ref = coerceRef(current, element);\n      existing['return'] = returnFiber;\n      {\n        existing._debugSource = element._source;\n        existing._debugOwner = element._owner;\n      }\n      return existing;\n    } else {\n      // Insert\n      var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);\n      created.ref = coerceRef(current, element);\n      created['return'] = returnFiber;\n      return created;\n    }\n  }\n\n  function updateCall(returnFiber, current, call, expirationTime) {\n    // TODO: Should this also compare handler to determine whether to reuse?\n    if (current === null || current.tag !== CallComponent) {\n      // Insert\n      var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);\n      created['return'] = returnFiber;\n      return created;\n    } else {\n      // Move based on index\n      var existing = useFiber(current, call, expirationTime);\n      existing['return'] = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateReturn(returnFiber, current, returnNode, expirationTime) {\n    if (current === null || current.tag !== ReturnComponent) {\n      // Insert\n      var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);\n      created.type = returnNode.value;\n      created['return'] = returnFiber;\n      return created;\n    } else {\n      // Move based on index\n      var existing = useFiber(current, null, expirationTime);\n      existing.type = returnNode.value;\n      existing['return'] = returnFiber;\n      return existing;\n    }\n  }\n\n  function updatePortal(returnFiber, current, portal, expirationTime) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);\n      created['return'] = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || [], expirationTime);\n      existing['return'] = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, expirationTime, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);\n      created['return'] = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment, expirationTime);\n      existing['return'] = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, expirationTime) {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);\n      created['return'] = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);\n              _created['return'] = returnFiber;\n              return _created;\n            } else {\n              var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);\n              _created2.ref = coerceRef(null, newChild);\n              _created2['return'] = returnFiber;\n              return _created2;\n            }\n          }\n\n        case REACT_CALL_TYPE:\n          {\n            var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);\n            _created3['return'] = returnFiber;\n            return _created3;\n          }\n\n        case REACT_RETURN_TYPE:\n          {\n            var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);\n            _created4.type = newChild.value;\n            _created4['return'] = returnFiber;\n            return _created4;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);\n            _created5['return'] = returnFiber;\n            return _created5;\n          }\n      }\n\n      if (isArray$1(newChild) || getIteratorFn(newChild)) {\n        var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);\n        _created6['return'] = returnFiber;\n        return _created6;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {\n    // Update the fiber if the keys match, otherwise return null.\n\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              if (newChild.type === REACT_FRAGMENT_TYPE) {\n                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);\n              }\n              return updateElement(returnFiber, oldFiber, newChild, expirationTime);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_CALL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateCall(returnFiber, oldFiber, newChild, expirationTime);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_RETURN_TYPE:\n          {\n            // Returns don't have keys. If the previous node is implicitly keyed\n            // we can continue to replace it without aborting even if it is not a\n            // yield.\n            if (key === null) {\n              return updateReturn(returnFiber, oldFiber, newChild, expirationTime);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);\n            } else {\n              return null;\n            }\n          }\n      }\n\n      if (isArray$1(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);\n            }\n            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);\n          }\n\n        case REACT_CALL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);\n          }\n\n        case REACT_RETURN_TYPE:\n          {\n            // Returns don't have keys, so we neither have to check the old nor\n            // new node for the key. If both are returns, they match.\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n            return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);\n          }\n      }\n\n      if (isArray$1(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber5 = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(child, knownKeys) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_CALL_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child);\n          var key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {\n    // This algorithm can't optimize by searching from boths ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    {\n      // First, validate keys.\n      var knownKeys = null;\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);\n        if (!_newFiber) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n        previousNewFiber = _newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);\n      if (_newFiber2) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n    {\n      // Warn about using Maps as children\n      if (typeof newChildrenIterable.entries === 'function') {\n        var possibleMap = newChildrenIterable;\n        if (possibleMap.entries === iteratorFn) {\n          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());\n          didWarnAboutMaps = true;\n        }\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n      if (_newChildren) {\n        var knownKeys = null;\n        var _step = _newChildren.next();\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    var step = newChildren.next();\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (!oldFiber) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);\n        if (_newFiber3 === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n        previousNewFiber = _newFiber3;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent, expirationTime);\n      existing['return'] = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);\n    created['return'] = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {\n    var key = element.key;\n    var child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);\n          existing.ref = coerceRef(child, element);\n          existing['return'] = returnFiber;\n          {\n            existing._debugSource = element._source;\n            existing._debugOwner = element._owner;\n          }\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);\n      created['return'] = returnFiber;\n      return created;\n    } else {\n      var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);\n      _created7.ref = coerceRef(currentFirstChild, element);\n      _created7['return'] = returnFiber;\n      return _created7;\n    }\n  }\n\n  function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {\n    var key = call.key;\n    var child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === CallComponent) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, call, expirationTime);\n          existing['return'] = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);\n    created['return'] = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {\n    // There's no need to check for keys on yields since they're stateless.\n    var child = currentFirstChild;\n    if (child !== null) {\n      if (child.tag === ReturnComponent) {\n        deleteRemainingChildren(returnFiber, child.sibling);\n        var existing = useFiber(child, null, expirationTime);\n        existing.type = returnNode.value;\n        existing['return'] = returnFiber;\n        return existing;\n      } else {\n        deleteRemainingChildren(returnFiber, child);\n      }\n    }\n\n    var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);\n    created.type = returnNode.value;\n    created['return'] = returnFiber;\n    return created;\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {\n    var key = portal.key;\n    var child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || [], expirationTime);\n          existing['return'] = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);\n    created['return'] = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    if (enableReactFragment && typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    var isObject = typeof newChild === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));\n\n        case REACT_CALL_TYPE:\n          return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));\n        case REACT_RETURN_TYPE:\n          return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));\n    }\n\n    if (isArray$1(newChild)) {\n      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);\n    }\n\n    if (getIteratorFn(newChild)) {\n      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n    if (typeof newChild === 'undefined') {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case ClassComponent:\n          {\n            {\n              var instance = returnFiber.stateNode;\n              if (instance.render._isMockFunction) {\n                // We allow auto-mocks to proceed as if they're returning null.\n                break;\n              }\n            }\n          }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n        case FunctionalComponent:\n          {\n            var Component = returnFiber.type;\n            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');\n          }\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true, true);\n\nvar reconcileChildFibersInPlace = ChildReconciler(false, true);\n\nvar mountChildFibersInPlace = ChildReconciler(false, false);\n\nfunction cloneChildFibers(current, workInProgress) {\n  !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);\n  workInProgress.child = newChild;\n\n  newChild['return'] = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);\n    newChild['return'] = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n{\n  var warnedAboutStatelessRefs = {};\n}\n\nvar ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {\n  var shouldSetTextContent = config.shouldSetTextContent,\n      useSyncScheduling = config.useSyncScheduling,\n      shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;\n  var pushHostContext = hostContext.pushHostContext,\n      pushHostContainer = hostContext.pushHostContainer;\n  var enterHydrationState = hydrationContext.enterHydrationState,\n      resetHydrationState = hydrationContext.resetHydrationState,\n      tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;\n\n  var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),\n      adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,\n      constructClassInstance = _ReactFiberClassCompo.constructClassInstance,\n      mountClassInstance = _ReactFiberClassCompo.mountClassInstance,\n      updateClassInstance = _ReactFiberClassCompo.updateClassInstance;\n\n  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.\n\n\n  function reconcileChildren(current, workInProgress, nextChildren) {\n    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);\n  }\n\n  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {\n    if (current === null) {\n      // If this is a fresh new component that hasn't been rendered yet, we\n      // won't update its child set by applying minimal side-effects. Instead,\n      // we will add them all to the child before it gets rendered. That means\n      // we can optimize this reconciliation pass by not tracking side-effects.\n      workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);\n    } else if (current.child === workInProgress.child) {\n      // If the current child is the same as the work in progress, it means that\n      // we haven't yet started any work on these children. Therefore, we use\n      // the clone algorithm to create a copy of all the current children.\n\n      // If we had any progressed work already, that is invalid at this point so\n      // let's throw it out.\n      workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);\n    } else {\n      // If, on the other hand, it is already using a clone, that means we've\n      // already begun some work on this tree and we can continue where we left\n      // off by reconciling against the existing children.\n      workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);\n    }\n  }\n\n  function updateFragment(current, workInProgress) {\n    var nextChildren = workInProgress.pendingProps;\n    if (hasContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n      if (nextChildren === null) {\n        nextChildren = workInProgress.memoizedProps;\n      }\n    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextChildren);\n    return workInProgress.child;\n  }\n\n  function markRef(current, workInProgress) {\n    var ref = workInProgress.ref;\n    if (ref !== null && (!current || current.ref !== ref)) {\n      // Schedule a Ref effect\n      workInProgress.effectTag |= Ref;\n    }\n  }\n\n  function updateFunctionalComponent(current, workInProgress) {\n    var fn = workInProgress.type;\n    var nextProps = workInProgress.pendingProps;\n\n    var memoizedProps = workInProgress.memoizedProps;\n    if (hasContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n      if (nextProps === null) {\n        nextProps = memoizedProps;\n      }\n    } else {\n      if (nextProps === null || memoizedProps === nextProps) {\n        return bailoutOnAlreadyFinishedWork(current, workInProgress);\n      }\n      // TODO: consider bringing fn.shouldComponentUpdate() back.\n      // It used to be here.\n    }\n\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n    var context = getMaskedContext(workInProgress, unmaskedContext);\n\n    var nextChildren;\n\n    {\n      ReactCurrentOwner.current = workInProgress;\n      ReactDebugCurrentFiber.setCurrentPhase('render');\n      nextChildren = fn(nextProps, context);\n      ReactDebugCurrentFiber.setCurrentPhase(null);\n    }\n    // React DevTools reads this flag.\n    workInProgress.effectTag |= PerformedWork;\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextProps);\n    return workInProgress.child;\n  }\n\n  function updateClassComponent(current, workInProgress, renderExpirationTime) {\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    var hasContext = pushContextProvider(workInProgress);\n\n    var shouldUpdate = void 0;\n    if (current === null) {\n      if (!workInProgress.stateNode) {\n        // In the initial pass we might need to construct the instance.\n        constructClassInstance(workInProgress, workInProgress.pendingProps);\n        mountClassInstance(workInProgress, renderExpirationTime);\n        shouldUpdate = true;\n      } else {\n        invariant(false, 'Resuming work not yet implemented.');\n        // In a resume, we'll already have an instance we can reuse.\n        // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);\n      }\n    } else {\n      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);\n    }\n    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);\n  }\n\n  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {\n    // Refs should update even if shouldComponentUpdate returns false\n    markRef(current, workInProgress);\n\n    if (!shouldUpdate) {\n      // Context providers should defer to sCU for rendering\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, false);\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    var instance = workInProgress.stateNode;\n\n    // Rerender\n    ReactCurrentOwner.current = workInProgress;\n    var nextChildren = void 0;\n    {\n      ReactDebugCurrentFiber.setCurrentPhase('render');\n      nextChildren = instance.render();\n      ReactDebugCurrentFiber.setCurrentPhase(null);\n    }\n    // React DevTools reads this flag.\n    workInProgress.effectTag |= PerformedWork;\n    reconcileChildren(current, workInProgress, nextChildren);\n    // Memoize props and state using the values we just used to render.\n    // TODO: Restructure so we never read values from the instance.\n    memoizeState(workInProgress, instance.state);\n    memoizeProps(workInProgress, instance.props);\n\n    // The context might have changed so we need to recalculate it.\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, true);\n    }\n\n    return workInProgress.child;\n  }\n\n  function pushHostRootContext(workInProgress) {\n    var root = workInProgress.stateNode;\n    if (root.pendingContext) {\n      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n    } else if (root.context) {\n      // Should always be set\n      pushTopLevelContextObject(workInProgress, root.context, false);\n    }\n    pushHostContainer(workInProgress, root.containerInfo);\n  }\n\n  function updateHostRoot(current, workInProgress, renderExpirationTime) {\n    pushHostRootContext(workInProgress);\n    var updateQueue = workInProgress.updateQueue;\n    if (updateQueue !== null) {\n      var prevState = workInProgress.memoizedState;\n      var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);\n      if (prevState === state) {\n        // If the state is the same as before, that's a bailout because we had\n        // no work that expires at this time.\n        resetHydrationState();\n        return bailoutOnAlreadyFinishedWork(current, workInProgress);\n      }\n      var element = state.element;\n      var root = workInProgress.stateNode;\n      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {\n        // If we don't have any current children this might be the first pass.\n        // We always try to hydrate. If this isn't a hydration pass there won't\n        // be any children to hydrate which is effectively the same thing as\n        // not hydrating.\n\n        // This is a bit of a hack. We track the host root as a placement to\n        // know that we're currently in a mounting state. That way isMounted\n        // works as expected. We must reset this before committing.\n        // TODO: Delete this when we delete isMounted and findDOMNode.\n        workInProgress.effectTag |= Placement;\n\n        // Ensure that children mount into this root without tracking\n        // side-effects. This ensures that we don't store Placement effects on\n        // nodes that will be hydrated.\n        workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, renderExpirationTime);\n      } else {\n        // Otherwise reset hydration state in case we aborted and resumed another\n        // root.\n        resetHydrationState();\n        reconcileChildren(current, workInProgress, element);\n      }\n      memoizeState(workInProgress, state);\n      return workInProgress.child;\n    }\n    resetHydrationState();\n    // If there is no update queue, that's a bailout because the root has no props.\n    return bailoutOnAlreadyFinishedWork(current, workInProgress);\n  }\n\n  function updateHostComponent(current, workInProgress, renderExpirationTime) {\n    pushHostContext(workInProgress);\n\n    if (current === null) {\n      tryToClaimNextHydratableInstance(workInProgress);\n    }\n\n    var type = workInProgress.type;\n    var memoizedProps = workInProgress.memoizedProps;\n    var nextProps = workInProgress.pendingProps;\n    if (nextProps === null) {\n      nextProps = memoizedProps;\n      !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    }\n    var prevProps = current !== null ? current.memoizedProps : null;\n\n    if (hasContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (nextProps === null || memoizedProps === nextProps) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    var nextChildren = nextProps.children;\n    var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n    if (isDirectTextChild) {\n      // We special case a direct text child of a host node. This is a common\n      // case. We won't handle it as a reified child. We will instead handle\n      // this in the host environment that also have access to this prop. That\n      // avoids allocating another HostText fiber and traversing it.\n      nextChildren = null;\n    } else if (prevProps && shouldSetTextContent(type, prevProps)) {\n      // If we're switching from a direct text child to a normal child, or to\n      // empty, we need to schedule the text content to be reset.\n      workInProgress.effectTag |= ContentReset;\n    }\n\n    markRef(current, workInProgress);\n\n    // Check the host config to see if the children are offscreen/hidden.\n    if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {\n      // Down-prioritize the children.\n      workInProgress.expirationTime = Never;\n      // Bailout and come back to this fiber later.\n      return null;\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextProps);\n    return workInProgress.child;\n  }\n\n  function updateHostText(current, workInProgress) {\n    if (current === null) {\n      tryToClaimNextHydratableInstance(workInProgress);\n    }\n    var nextProps = workInProgress.pendingProps;\n    if (nextProps === null) {\n      nextProps = workInProgress.memoizedProps;\n    }\n    memoizeProps(workInProgress, nextProps);\n    // Nothing to do here. This is terminal. We'll do the completion step\n    // immediately after.\n    return null;\n  }\n\n  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {\n    !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    var fn = workInProgress.type;\n    var props = workInProgress.pendingProps;\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n    var context = getMaskedContext(workInProgress, unmaskedContext);\n\n    var value;\n\n    {\n      if (fn.prototype && typeof fn.prototype.render === 'function') {\n        var componentName = getComponentName(workInProgress);\n        warning(false, \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n      }\n      ReactCurrentOwner.current = workInProgress;\n      value = fn(props, context);\n    }\n    // React DevTools reads this flag.\n    workInProgress.effectTag |= PerformedWork;\n\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function') {\n      // Proceed under the assumption that this is a class instance\n      workInProgress.tag = ClassComponent;\n\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n      var hasContext = pushContextProvider(workInProgress);\n      adoptClassInstance(workInProgress, value);\n      mountClassInstance(workInProgress, renderExpirationTime);\n      return finishClassComponent(current, workInProgress, true, hasContext);\n    } else {\n      // Proceed under the assumption that this is a functional component\n      workInProgress.tag = FunctionalComponent;\n      {\n        var Component = workInProgress.type;\n\n        if (Component) {\n          warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');\n        }\n        if (workInProgress.ref !== null) {\n          var info = '';\n          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n\n          var warningKey = ownerName || workInProgress._debugID || '';\n          var debugSource = workInProgress._debugSource;\n          if (debugSource) {\n            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n          }\n          if (!warnedAboutStatelessRefs[warningKey]) {\n            warnedAboutStatelessRefs[warningKey] = true;\n            warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());\n          }\n        }\n      }\n      reconcileChildren(current, workInProgress, value);\n      memoizeProps(workInProgress, props);\n      return workInProgress.child;\n    }\n  }\n\n  function updateCallComponent(current, workInProgress, renderExpirationTime) {\n    var nextCall = workInProgress.pendingProps;\n    if (hasContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n      if (nextCall === null) {\n        nextCall = current && current.memoizedProps;\n        !(nextCall !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n      }\n    } else if (nextCall === null || workInProgress.memoizedProps === nextCall) {\n      nextCall = workInProgress.memoizedProps;\n      // TODO: When bailing out, we might need to return the stateNode instead\n      // of the child. To check it for work.\n      // return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    var nextChildren = nextCall.children;\n\n    // The following is a fork of reconcileChildrenAtExpirationTime but using\n    // stateNode to store the child.\n    if (current === null) {\n      workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);\n    } else if (current.child === workInProgress.child) {\n      workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);\n    } else {\n      workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);\n    }\n\n    memoizeProps(workInProgress, nextCall);\n    // This doesn't take arbitrary time so we could synchronously just begin\n    // eagerly do the work of workInProgress.child as an optimization.\n    return workInProgress.stateNode;\n  }\n\n  function updatePortalComponent(current, workInProgress, renderExpirationTime) {\n    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n    var nextChildren = workInProgress.pendingProps;\n    if (hasContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n      if (nextChildren === null) {\n        nextChildren = current && current.memoizedProps;\n        !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n      }\n    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    if (current === null) {\n      // Portals are special because we don't append the children during mount\n      // but at commit. Therefore we need to track insertions which the normal\n      // flow doesn't do during mount. This doesn't happen at the root because\n      // the root always starts with a \"current\" with a null child.\n      // TODO: Consider unifying this with how the root works.\n      workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, renderExpirationTime);\n      memoizeProps(workInProgress, nextChildren);\n    } else {\n      reconcileChildren(current, workInProgress, nextChildren);\n      memoizeProps(workInProgress, nextChildren);\n    }\n    return workInProgress.child;\n  }\n\n  /*\n  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {\n    let child = firstChild;\n    do {\n      // Ensure that the first and last effect of the parent corresponds\n      // to the children's first and last effect.\n      if (!returnFiber.firstEffect) {\n        returnFiber.firstEffect = child.firstEffect;\n      }\n      if (child.lastEffect) {\n        if (returnFiber.lastEffect) {\n          returnFiber.lastEffect.nextEffect = child.firstEffect;\n        }\n        returnFiber.lastEffect = child.lastEffect;\n      }\n    } while (child = child.sibling);\n  }\n  */\n\n  function bailoutOnAlreadyFinishedWork(current, workInProgress) {\n    cancelWorkTimer(workInProgress);\n\n    // TODO: We should ideally be able to bail out early if the children have no\n    // more work to do. However, since we don't have a separation of this\n    // Fiber's priority and its children yet - we don't know without doing lots\n    // of the same work we do anyway. Once we have that separation we can just\n    // bail out here if the children has no more work at this priority level.\n    // if (workInProgress.priorityOfChildren <= priorityLevel) {\n    //   // If there are side-effects in these children that have not yet been\n    //   // committed we need to ensure that they get properly transferred up.\n    //   if (current && current.child !== workInProgress.child) {\n    //     reuseChildrenEffects(workInProgress, child);\n    //   }\n    //   return null;\n    // }\n\n    cloneChildFibers(current, workInProgress);\n    return workInProgress.child;\n  }\n\n  function bailoutOnLowPriority(current, workInProgress) {\n    cancelWorkTimer(workInProgress);\n\n    // TODO: Handle HostComponent tags here as well and call pushHostContext()?\n    // See PR 8590 discussion for context\n    switch (workInProgress.tag) {\n      case HostRoot:\n        pushHostRootContext(workInProgress);\n        break;\n      case ClassComponent:\n        pushContextProvider(workInProgress);\n        break;\n      case HostPortal:\n        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n        break;\n    }\n    // TODO: What if this is currently in progress?\n    // How can that happen? How is this not being cloned?\n    return null;\n  }\n\n  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead\n  function memoizeProps(workInProgress, nextProps) {\n    workInProgress.memoizedProps = nextProps;\n  }\n\n  function memoizeState(workInProgress, nextState) {\n    workInProgress.memoizedState = nextState;\n    // Don't reset the updateQueue, in case there are pending updates. Resetting\n    // is handled by processUpdateQueue.\n  }\n\n  function beginWork(current, workInProgress, renderExpirationTime) {\n    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {\n      return bailoutOnLowPriority(current, workInProgress);\n    }\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);\n      case FunctionalComponent:\n        return updateFunctionalComponent(current, workInProgress);\n      case ClassComponent:\n        return updateClassComponent(current, workInProgress, renderExpirationTime);\n      case HostRoot:\n        return updateHostRoot(current, workInProgress, renderExpirationTime);\n      case HostComponent:\n        return updateHostComponent(current, workInProgress, renderExpirationTime);\n      case HostText:\n        return updateHostText(current, workInProgress);\n      case CallHandlerPhase:\n        // This is a restart. Reset the tag to the initial phase.\n        workInProgress.tag = CallComponent;\n      // Intentionally fall through since this is now the same.\n      case CallComponent:\n        return updateCallComponent(current, workInProgress, renderExpirationTime);\n      case ReturnComponent:\n        // A return component is just a placeholder, we can just run through the\n        // next one immediately.\n        return null;\n      case HostPortal:\n        return updatePortalComponent(current, workInProgress, renderExpirationTime);\n      case Fragment:\n        return updateFragment(current, workInProgress);\n      default:\n        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  function beginFailedWork(current, workInProgress, renderExpirationTime) {\n    // Push context providers here to avoid a push/pop context mismatch.\n    switch (workInProgress.tag) {\n      case ClassComponent:\n        pushContextProvider(workInProgress);\n        break;\n      case HostRoot:\n        pushHostRootContext(workInProgress);\n        break;\n      default:\n        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    // Add an error effect so we can handle the error during the commit phase\n    workInProgress.effectTag |= Err;\n\n    // This is a weird case where we do \"resume\" work — work that failed on\n    // our first attempt. Because we no longer have a notion of \"progressed\n    // deletions,\" reset the child to the current child to make sure we delete\n    // it again. TODO: Find a better way to handle this, perhaps during a more\n    // general overhaul of error handling.\n    if (current === null) {\n      workInProgress.child = null;\n    } else if (workInProgress.child !== current.child) {\n      workInProgress.child = current.child;\n    }\n\n    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {\n      return bailoutOnLowPriority(current, workInProgress);\n    }\n\n    // If we don't bail out, we're going be recomputing our children so we need\n    // to drop our effect list.\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    // Unmount the current children as if the component rendered null\n    var nextChildren = null;\n    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);\n\n    if (workInProgress.tag === ClassComponent) {\n      var instance = workInProgress.stateNode;\n      workInProgress.memoizedProps = instance.props;\n      workInProgress.memoizedState = instance.state;\n    }\n\n    return workInProgress.child;\n  }\n\n  return {\n    beginWork: beginWork,\n    beginFailedWork: beginFailedWork\n  };\n};\n\nvar ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {\n  var createInstance = config.createInstance,\n      createTextInstance = config.createTextInstance,\n      appendInitialChild = config.appendInitialChild,\n      finalizeInitialChildren = config.finalizeInitialChildren,\n      prepareUpdate = config.prepareUpdate,\n      mutation = config.mutation,\n      persistence = config.persistence;\n  var getRootHostContainer = hostContext.getRootHostContainer,\n      popHostContext = hostContext.popHostContext,\n      getHostContext = hostContext.getHostContext,\n      popHostContainer = hostContext.popHostContainer;\n  var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,\n      prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,\n      popHydrationState = hydrationContext.popHydrationState;\n\n\n  function markUpdate(workInProgress) {\n    // Tag the fiber with an update effect. This turns a Placement into\n    // an UpdateAndPlacement.\n    workInProgress.effectTag |= Update;\n  }\n\n  function markRef(workInProgress) {\n    workInProgress.effectTag |= Ref;\n  }\n\n  function appendAllReturns(returns, workInProgress) {\n    var node = workInProgress.stateNode;\n    if (node) {\n      node['return'] = workInProgress;\n    }\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {\n        invariant(false, 'A call cannot have host component children.');\n      } else if (node.tag === ReturnComponent) {\n        returns.push(node.type);\n      } else if (node.child !== null) {\n        node.child['return'] = node;\n        node = node.child;\n        continue;\n      }\n      while (node.sibling === null) {\n        if (node['return'] === null || node['return'] === workInProgress) {\n          return;\n        }\n        node = node['return'];\n      }\n      node.sibling['return'] = node['return'];\n      node = node.sibling;\n    }\n  }\n\n  function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {\n    var call = workInProgress.memoizedProps;\n    !call ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n    // First step of the call has completed. Now we need to do the second.\n    // TODO: It would be nice to have a multi stage call represented by a\n    // single component, or at least tail call optimize nested ones. Currently\n    // that requires additional fields that we don't want to add to the fiber.\n    // So this requires nested handlers.\n    // Note: This doesn't mutate the alternate node. I don't think it needs to\n    // since this stage is reset for every pass.\n    workInProgress.tag = CallHandlerPhase;\n\n    // Build up the returns.\n    // TODO: Compare this to a generator or opaque helpers like Children.\n    var returns = [];\n    appendAllReturns(returns, workInProgress);\n    var fn = call.handler;\n    var props = call.props;\n    var nextChildren = fn(props, returns);\n\n    var currentFirstChild = current !== null ? current.child : null;\n    workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);\n    return workInProgress.child;\n  }\n\n  function appendAllChildren(parent, workInProgress) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child['return'] = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node['return'] === null || node['return'] === workInProgress) {\n          return;\n        }\n        node = node['return'];\n      }\n      node.sibling['return'] = node['return'];\n      node = node.sibling;\n    }\n  }\n\n  var updateHostContainer = void 0;\n  var updateHostComponent = void 0;\n  var updateHostText = void 0;\n  if (mutation) {\n    if (enableMutatingReconciler) {\n      // Mutation mode\n      updateHostContainer = function (workInProgress) {\n        // Noop\n      };\n      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {\n        // TODO: Type this specific to this type of component.\n        workInProgress.updateQueue = updatePayload;\n        // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update. All the work is done in commitWork.\n        if (updatePayload) {\n          markUpdate(workInProgress);\n        }\n      };\n      updateHostText = function (current, workInProgress, oldText, newText) {\n        // If the text differs, mark it as an update. All the work in done in commitWork.\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      };\n    } else {\n      invariant(false, 'Mutating reconciler is disabled.');\n    }\n  } else if (persistence) {\n    if (enablePersistentReconciler) {\n      // Persistent host tree mode\n      var cloneInstance = persistence.cloneInstance,\n          createContainerChildSet = persistence.createContainerChildSet,\n          appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,\n          finalizeContainerChildren = persistence.finalizeContainerChildren;\n\n      // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n      var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n        while (node !== null) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            appendChildToContainerChildSet(containerChildSet, node.stateNode);\n          } else if (node.tag === HostPortal) {\n            // If we have a portal child, then we don't want to traverse\n            // down its children. Instead, we'll get insertions from each child in\n            // the portal directly.\n          } else if (node.child !== null) {\n            node.child['return'] = node;\n            node = node.child;\n            continue;\n          }\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node['return'] === null || node['return'] === workInProgress) {\n              return;\n            }\n            node = node['return'];\n          }\n          node.sibling['return'] = node['return'];\n          node = node.sibling;\n        }\n      };\n      updateHostContainer = function (workInProgress) {\n        var portalOrRoot = workInProgress.stateNode;\n        var childrenUnchanged = workInProgress.firstEffect === null;\n        if (childrenUnchanged) {\n          // No changes, just reuse the existing instance.\n        } else {\n          var container = portalOrRoot.containerInfo;\n          var newChildSet = createContainerChildSet(container);\n          if (finalizeContainerChildren(container, newChildSet)) {\n            markUpdate(workInProgress);\n          }\n          portalOrRoot.pendingChildren = newChildSet;\n          // If children might have changed, we have to add them all to the set.\n          appendAllChildrenToContainer(newChildSet, workInProgress);\n          // Schedule an update on the container to swap out the container.\n          markUpdate(workInProgress);\n        }\n      };\n      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {\n        // If there are no effects associated with this node, then none of our children had any updates.\n        // This guarantees that we can reuse all of them.\n        var childrenUnchanged = workInProgress.firstEffect === null;\n        var currentInstance = current.stateNode;\n        if (childrenUnchanged && updatePayload === null) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n        } else {\n          var recyclableInstance = workInProgress.stateNode;\n          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {\n            markUpdate(workInProgress);\n          }\n          workInProgress.stateNode = newInstance;\n          if (childrenUnchanged) {\n            // If there are no other effects in this tree, we need to flag this node as having one.\n            // Even though we're not going to use it for anything.\n            // Otherwise parents won't know that there are new children to propagate upwards.\n            markUpdate(workInProgress);\n          } else {\n            // If children might have changed, we have to add them all to the set.\n            appendAllChildren(newInstance, workInProgress);\n          }\n        }\n      };\n      updateHostText = function (current, workInProgress, oldText, newText) {\n        if (oldText !== newText) {\n          // If the text content differs, we'll create a new text instance for it.\n          var rootContainerInstance = getRootHostContainer();\n          var currentHostContext = getHostContext();\n          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);\n          // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n          // This lets the parents know that at least one of their children has changed.\n          markUpdate(workInProgress);\n        }\n      };\n    } else {\n      invariant(false, 'Persistent reconciler is disabled.');\n    }\n  } else {\n    if (enableNoopReconciler) {\n      // No host operations\n      updateHostContainer = function (workInProgress) {\n        // Noop\n      };\n      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {\n        // Noop\n      };\n      updateHostText = function (current, workInProgress, oldText, newText) {\n        // Noop\n      };\n    } else {\n      invariant(false, 'Noop reconciler is disabled.');\n    }\n  }\n\n  function completeWork(current, workInProgress, renderExpirationTime) {\n    // Get the latest props.\n    var newProps = workInProgress.pendingProps;\n    if (newProps === null) {\n      newProps = workInProgress.memoizedProps;\n    } else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {\n      // Reset the pending props, unless this was a down-prioritization.\n      workInProgress.pendingProps = null;\n    }\n\n    switch (workInProgress.tag) {\n      case FunctionalComponent:\n        return null;\n      case ClassComponent:\n        {\n          // We are leaving this subtree, so pop context if any.\n          popContextProvider(workInProgress);\n          return null;\n        }\n      case HostRoot:\n        {\n          popHostContainer(workInProgress);\n          popTopLevelContextObject(workInProgress);\n          var fiberRoot = workInProgress.stateNode;\n          if (fiberRoot.pendingContext) {\n            fiberRoot.context = fiberRoot.pendingContext;\n            fiberRoot.pendingContext = null;\n          }\n\n          if (current === null || current.child === null) {\n            // If we hydrated, pop so that we can delete any remaining children\n            // that weren't hydrated.\n            popHydrationState(workInProgress);\n            // This resets the hacky state to fix isMounted before committing.\n            // TODO: Delete this when we delete isMounted and findDOMNode.\n            workInProgress.effectTag &= ~Placement;\n          }\n          updateHostContainer(workInProgress);\n          return null;\n        }\n      case HostComponent:\n        {\n          popHostContext(workInProgress);\n          var rootContainerInstance = getRootHostContainer();\n          var type = workInProgress.type;\n          if (current !== null && workInProgress.stateNode != null) {\n            // If we have an alternate, that means this is an update and we need to\n            // schedule a side-effect to do the updates.\n            var oldProps = current.memoizedProps;\n            // If we get updated because one of our children updated, we don't\n            // have newProps so we'll have to reuse them.\n            // TODO: Split the update API as separate for the props vs. children.\n            // Even better would be if children weren't special cased at all tho.\n            var instance = workInProgress.stateNode;\n            var currentHostContext = getHostContext();\n            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n\n            updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);\n\n            if (current.ref !== workInProgress.ref) {\n              markRef(workInProgress);\n            }\n          } else {\n            if (!newProps) {\n              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n              // This can happen when we abort work.\n              return null;\n            }\n\n            var _currentHostContext = getHostContext();\n            // TODO: Move createInstance to beginWork and keep it on a context\n            // \"stack\" as the parent. Then append children as we go in beginWork\n            // or completeWork depending on we want to add then top->down or\n            // bottom->up. Top->down is faster in IE11.\n            var wasHydrated = popHydrationState(workInProgress);\n            if (wasHydrated) {\n              // TODO: Move this and createInstance step into the beginPhase\n              // to consolidate.\n              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {\n                // If changes to the hydrated node needs to be applied at the\n                // commit-phase we mark this as such.\n                markUpdate(workInProgress);\n              }\n            } else {\n              var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);\n\n              appendAllChildren(_instance, workInProgress);\n\n              // Certain renderers require commit-time effects for initial mount.\n              // (eg DOM renderer supports auto-focus for certain elements).\n              // Make sure such renderers get scheduled for later work.\n              if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {\n                markUpdate(workInProgress);\n              }\n              workInProgress.stateNode = _instance;\n            }\n\n            if (workInProgress.ref !== null) {\n              // If there is a ref on a host node we need to schedule a callback\n              markRef(workInProgress);\n            }\n          }\n          return null;\n        }\n      case HostText:\n        {\n          var newText = newProps;\n          if (current && workInProgress.stateNode != null) {\n            var oldText = current.memoizedProps;\n            // If we have an alternate, that means this is an update and we need\n            // to schedule a side-effect to do the updates.\n            updateHostText(current, workInProgress, oldText, newText);\n          } else {\n            if (typeof newText !== 'string') {\n              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n              // This can happen when we abort work.\n              return null;\n            }\n            var _rootContainerInstance = getRootHostContainer();\n            var _currentHostContext2 = getHostContext();\n            var _wasHydrated = popHydrationState(workInProgress);\n            if (_wasHydrated) {\n              if (prepareToHydrateHostTextInstance(workInProgress)) {\n                markUpdate(workInProgress);\n              }\n            } else {\n              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);\n            }\n          }\n          return null;\n        }\n      case CallComponent:\n        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);\n      case CallHandlerPhase:\n        // Reset the tag to now be a first phase call.\n        workInProgress.tag = CallComponent;\n        return null;\n      case ReturnComponent:\n        // Does nothing.\n        return null;\n      case Fragment:\n        return null;\n      case HostPortal:\n        popHostContainer(workInProgress);\n        updateHostContainer(workInProgress);\n        return null;\n      // Error cases\n      case IndeterminateComponent:\n        invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');\n      // eslint-disable-next-line no-fallthrough\n      default:\n        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  return {\n    completeWork: completeWork\n  };\n};\n\nvar invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;\nvar hasCaughtError$1 = ReactErrorUtils.hasCaughtError;\nvar clearCaughtError$1 = ReactErrorUtils.clearCaughtError;\n\n\nvar ReactFiberCommitWork = function (config, captureError) {\n  var getPublicInstance = config.getPublicInstance,\n      mutation = config.mutation,\n      persistence = config.persistence;\n\n\n  var callComponentWillUnmountWithTimer = function (current, instance) {\n    startPhaseTimer(current, 'componentWillUnmount');\n    instance.props = current.memoizedProps;\n    instance.state = current.memoizedState;\n    instance.componentWillUnmount();\n    stopPhaseTimer();\n  };\n\n  // Capture errors so they don't interrupt unmounting.\n  function safelyCallComponentWillUnmount(current, instance) {\n    {\n      invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);\n      if (hasCaughtError$1()) {\n        var unmountError = clearCaughtError$1();\n        captureError(current, unmountError);\n      }\n    }\n  }\n\n  function safelyDetachRef(current) {\n    var ref = current.ref;\n    if (ref !== null) {\n      {\n        invokeGuardedCallback$2(null, ref, null, null);\n        if (hasCaughtError$1()) {\n          var refError = clearCaughtError$1();\n          captureError(current, refError);\n        }\n      }\n    }\n  }\n\n  function commitLifeCycles(current, finishedWork) {\n    switch (finishedWork.tag) {\n      case ClassComponent:\n        {\n          var instance = finishedWork.stateNode;\n          if (finishedWork.effectTag & Update) {\n            if (current === null) {\n              startPhaseTimer(finishedWork, 'componentDidMount');\n              instance.props = finishedWork.memoizedProps;\n              instance.state = finishedWork.memoizedState;\n              instance.componentDidMount();\n              stopPhaseTimer();\n            } else {\n              var prevProps = current.memoizedProps;\n              var prevState = current.memoizedState;\n              startPhaseTimer(finishedWork, 'componentDidUpdate');\n              instance.props = finishedWork.memoizedProps;\n              instance.state = finishedWork.memoizedState;\n              instance.componentDidUpdate(prevProps, prevState);\n              stopPhaseTimer();\n            }\n          }\n          var updateQueue = finishedWork.updateQueue;\n          if (updateQueue !== null) {\n            commitCallbacks(updateQueue, instance);\n          }\n          return;\n        }\n      case HostRoot:\n        {\n          var _updateQueue = finishedWork.updateQueue;\n          if (_updateQueue !== null) {\n            var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;\n            commitCallbacks(_updateQueue, _instance);\n          }\n          return;\n        }\n      case HostComponent:\n        {\n          var _instance2 = finishedWork.stateNode;\n\n          // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n          if (current === null && finishedWork.effectTag & Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            commitMount(_instance2, type, props, finishedWork);\n          }\n\n          return;\n        }\n      case HostText:\n        {\n          // We have no life-cycles associated with text.\n          return;\n        }\n      case HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          return;\n        }\n      default:\n        {\n          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n        }\n    }\n  }\n\n  function commitAttachRef(finishedWork) {\n    var ref = finishedWork.ref;\n    if (ref !== null) {\n      var instance = finishedWork.stateNode;\n      switch (finishedWork.tag) {\n        case HostComponent:\n          ref(getPublicInstance(instance));\n          break;\n        default:\n          ref(instance);\n      }\n    }\n  }\n\n  function commitDetachRef(current) {\n    var currentRef = current.ref;\n    if (currentRef !== null) {\n      currentRef(null);\n    }\n  }\n\n  // User-originating errors (lifecycles and refs) should not interrupt\n  // deletion, so don't let them throw. Host-originating errors should\n  // interrupt deletion, so it's okay\n  function commitUnmount(current) {\n    if (typeof onCommitUnmount === 'function') {\n      onCommitUnmount(current);\n    }\n\n    switch (current.tag) {\n      case ClassComponent:\n        {\n          safelyDetachRef(current);\n          var instance = current.stateNode;\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(current, instance);\n          }\n          return;\n        }\n      case HostComponent:\n        {\n          safelyDetachRef(current);\n          return;\n        }\n      case CallComponent:\n        {\n          commitNestedUnmounts(current.stateNode);\n          return;\n        }\n      case HostPortal:\n        {\n          // TODO: this is recursive.\n          // We are also not using this parent because\n          // the portal will get pushed immediately.\n          if (enableMutatingReconciler && mutation) {\n            unmountHostComponents(current);\n          } else if (enablePersistentReconciler && persistence) {\n            emptyPortalContainer(current);\n          }\n          return;\n        }\n    }\n  }\n\n  function commitNestedUnmounts(root) {\n    // While we're inside a removed host node we don't want to call\n    // removeChild on the inner nodes because they're removed by the top\n    // call anyway. We also want to call componentWillUnmount on all\n    // composites before this host node is removed from the tree. Therefore\n    var node = root;\n    while (true) {\n      commitUnmount(node);\n      // Visit children because they may contain more composite or host nodes.\n      // Skip portals because commitUnmount() currently visits them recursively.\n      if (node.child !== null && (\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      !mutation || node.tag !== HostPortal)) {\n        node.child['return'] = node;\n        node = node.child;\n        continue;\n      }\n      if (node === root) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node['return'] === null || node['return'] === root) {\n          return;\n        }\n        node = node['return'];\n      }\n      node.sibling['return'] = node['return'];\n      node = node.sibling;\n    }\n  }\n\n  function detachFiber(current) {\n    // Cut off the return pointers to disconnect it from the tree. Ideally, we\n    // should clear the child pointer of the parent alternate to let this\n    // get GC:ed but we don't know which for sure which parent is the current\n    // one so we'll settle for GC:ing the subtree of this child. This child\n    // itself will be GC:ed when the parent updates the next time.\n    current['return'] = null;\n    current.child = null;\n    if (current.alternate) {\n      current.alternate.child = null;\n      current.alternate['return'] = null;\n    }\n  }\n\n  if (!mutation) {\n    var commitContainer = void 0;\n    if (persistence) {\n      var replaceContainerChildren = persistence.replaceContainerChildren,\n          createContainerChildSet = persistence.createContainerChildSet;\n\n      var emptyPortalContainer = function (current) {\n        var portal = current.stateNode;\n        var containerInfo = portal.containerInfo;\n\n        var emptyChildSet = createContainerChildSet(containerInfo);\n        replaceContainerChildren(containerInfo, emptyChildSet);\n      };\n      commitContainer = function (finishedWork) {\n        switch (finishedWork.tag) {\n          case ClassComponent:\n            {\n              return;\n            }\n          case HostComponent:\n            {\n              return;\n            }\n          case HostText:\n            {\n              return;\n            }\n          case HostRoot:\n          case HostPortal:\n            {\n              var portalOrRoot = finishedWork.stateNode;\n              var containerInfo = portalOrRoot.containerInfo,\n                  _pendingChildren = portalOrRoot.pendingChildren;\n\n              replaceContainerChildren(containerInfo, _pendingChildren);\n              return;\n            }\n          default:\n            {\n              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n            }\n        }\n      };\n    } else {\n      commitContainer = function (finishedWork) {\n        // Noop\n      };\n    }\n    if (enablePersistentReconciler || enableNoopReconciler) {\n      return {\n        commitResetTextContent: function (finishedWork) {},\n        commitPlacement: function (finishedWork) {},\n        commitDeletion: function (current) {\n          // Detach refs and call componentWillUnmount() on the whole subtree.\n          commitNestedUnmounts(current);\n          detachFiber(current);\n        },\n        commitWork: function (current, finishedWork) {\n          commitContainer(finishedWork);\n        },\n\n        commitLifeCycles: commitLifeCycles,\n        commitAttachRef: commitAttachRef,\n        commitDetachRef: commitDetachRef\n      };\n    } else if (persistence) {\n      invariant(false, 'Persistent reconciler is disabled.');\n    } else {\n      invariant(false, 'Noop reconciler is disabled.');\n    }\n  }\n  var commitMount = mutation.commitMount,\n      commitUpdate = mutation.commitUpdate,\n      resetTextContent = mutation.resetTextContent,\n      commitTextUpdate = mutation.commitTextUpdate,\n      appendChild = mutation.appendChild,\n      appendChildToContainer = mutation.appendChildToContainer,\n      insertBefore = mutation.insertBefore,\n      insertInContainerBefore = mutation.insertInContainerBefore,\n      removeChild = mutation.removeChild,\n      removeChildFromContainer = mutation.removeChildFromContainer;\n\n\n  function getHostParentFiber(fiber) {\n    var parent = fiber['return'];\n    while (parent !== null) {\n      if (isHostParent(parent)) {\n        return parent;\n      }\n      parent = parent['return'];\n    }\n    invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  function isHostParent(fiber) {\n    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n  }\n\n  function getHostSibling(fiber) {\n    // We're going to search forward into the tree until we find a sibling host\n    // node. Unfortunately, if multiple insertions are done in a row we have to\n    // search past them. This leads to exponential search for the next sibling.\n    var node = fiber;\n    siblings: while (true) {\n      // If we didn't find anything, let's try the next sibling.\n      while (node.sibling === null) {\n        if (node['return'] === null || isHostParent(node['return'])) {\n          // If we pop out of the root or hit the parent the fiber we are the\n          // last sibling.\n          return null;\n        }\n        node = node['return'];\n      }\n      node.sibling['return'] = node['return'];\n      node = node.sibling;\n      while (node.tag !== HostComponent && node.tag !== HostText) {\n        // If it is not host node and, we might have a host node inside it.\n        // Try to search down until we find one.\n        if (node.effectTag & Placement) {\n          // If we don't have a child, try the siblings instead.\n          continue siblings;\n        }\n        // If we don't have a child, try the siblings instead.\n        // We also skip portals because they are not part of this host tree.\n        if (node.child === null || node.tag === HostPortal) {\n          continue siblings;\n        } else {\n          node.child['return'] = node;\n          node = node.child;\n        }\n      }\n      // Check if this host node is stable or about to be placed.\n      if (!(node.effectTag & Placement)) {\n        // Found it!\n        return node.stateNode;\n      }\n    }\n  }\n\n  function commitPlacement(finishedWork) {\n    // Recursively insert all host nodes into the parent.\n    var parentFiber = getHostParentFiber(finishedWork);\n    var parent = void 0;\n    var isContainer = void 0;\n    switch (parentFiber.tag) {\n      case HostComponent:\n        parent = parentFiber.stateNode;\n        isContainer = false;\n        break;\n      case HostRoot:\n        parent = parentFiber.stateNode.containerInfo;\n        isContainer = true;\n        break;\n      case HostPortal:\n        parent = parentFiber.stateNode.containerInfo;\n        isContainer = true;\n        break;\n      default:\n        invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');\n    }\n    if (parentFiber.effectTag & ContentReset) {\n      // Reset the text content of the parent before doing any insertions\n      resetTextContent(parent);\n      // Clear ContentReset from the effect tag\n      parentFiber.effectTag &= ~ContentReset;\n    }\n\n    var before = getHostSibling(finishedWork);\n    // We only have the top Fiber that was inserted but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        if (before) {\n          if (isContainer) {\n            insertInContainerBefore(parent, node.stateNode, before);\n          } else {\n            insertBefore(parent, node.stateNode, before);\n          }\n        } else {\n          if (isContainer) {\n            appendChildToContainer(parent, node.stateNode);\n          } else {\n            appendChild(parent, node.stateNode);\n          }\n        }\n      } else if (node.tag === HostPortal) {\n        // If the insertion itself is a portal, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child['return'] = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node['return'] === null || node['return'] === finishedWork) {\n          return;\n        }\n        node = node['return'];\n      }\n      node.sibling['return'] = node['return'];\n      node = node.sibling;\n    }\n  }\n\n  function unmountHostComponents(current) {\n    // We only have the top Fiber that was inserted but we need recurse down its\n    var node = current;\n\n    // Each iteration, currentParent is populated with node's host parent if not\n    // currentParentIsValid.\n    var currentParentIsValid = false;\n    var currentParent = void 0;\n    var currentParentIsContainer = void 0;\n\n    while (true) {\n      if (!currentParentIsValid) {\n        var parent = node['return'];\n        findParent: while (true) {\n          !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n          switch (parent.tag) {\n            case HostComponent:\n              currentParent = parent.stateNode;\n              currentParentIsContainer = false;\n              break findParent;\n            case HostRoot:\n              currentParent = parent.stateNode.containerInfo;\n              currentParentIsContainer = true;\n              break findParent;\n            case HostPortal:\n              currentParent = parent.stateNode.containerInfo;\n              currentParentIsContainer = true;\n              break findParent;\n          }\n          parent = parent['return'];\n        }\n        currentParentIsValid = true;\n      }\n\n      if (node.tag === HostComponent || node.tag === HostText) {\n        commitNestedUnmounts(node);\n        // After all the children have unmounted, it is now safe to remove the\n        // node from the tree.\n        if (currentParentIsContainer) {\n          removeChildFromContainer(currentParent, node.stateNode);\n        } else {\n          removeChild(currentParent, node.stateNode);\n        }\n        // Don't visit children because we already visited them.\n      } else if (node.tag === HostPortal) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        // Visit children because portals might contain host components.\n        if (node.child !== null) {\n          node.child['return'] = node;\n          node = node.child;\n          continue;\n        }\n      } else {\n        commitUnmount(node);\n        // Visit children because we may find more host components below.\n        if (node.child !== null) {\n          node.child['return'] = node;\n          node = node.child;\n          continue;\n        }\n      }\n      if (node === current) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node['return'] === null || node['return'] === current) {\n          return;\n        }\n        node = node['return'];\n        if (node.tag === HostPortal) {\n          // When we go out of the portal, we need to restore the parent.\n          // Since we don't keep a stack of them, we will search for it.\n          currentParentIsValid = false;\n        }\n      }\n      node.sibling['return'] = node['return'];\n      node = node.sibling;\n    }\n  }\n\n  function commitDeletion(current) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(current);\n    detachFiber(current);\n  }\n\n  function commitWork(current, finishedWork) {\n    switch (finishedWork.tag) {\n      case ClassComponent:\n        {\n          return;\n        }\n      case HostComponent:\n        {\n          var instance = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            var newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            var oldProps = current !== null ? current.memoizedProps : newProps;\n            var type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            var updatePayload = finishedWork.updateQueue;\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n            }\n          }\n          return;\n        }\n      case HostText:\n        {\n          !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n          var textInstance = finishedWork.stateNode;\n          var newText = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          var oldText = current !== null ? current.memoizedProps : newText;\n          commitTextUpdate(textInstance, oldText, newText);\n          return;\n        }\n      case HostRoot:\n        {\n          return;\n        }\n      default:\n        {\n          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');\n        }\n    }\n  }\n\n  function commitResetTextContent(current) {\n    resetTextContent(current.stateNode);\n  }\n\n  if (enableMutatingReconciler) {\n    return {\n      commitResetTextContent: commitResetTextContent,\n      commitPlacement: commitPlacement,\n      commitDeletion: commitDeletion,\n      commitWork: commitWork,\n      commitLifeCycles: commitLifeCycles,\n      commitAttachRef: commitAttachRef,\n      commitDetachRef: commitDetachRef\n    };\n  } else {\n    invariant(false, 'Mutating reconciler is disabled.');\n  }\n};\n\nvar NO_CONTEXT = {};\n\nvar ReactFiberHostContext = function (config) {\n  var getChildHostContext = config.getChildHostContext,\n      getRootHostContext = config.getRootHostContext;\n\n\n  var contextStackCursor = createCursor(NO_CONTEXT);\n  var contextFiberStackCursor = createCursor(NO_CONTEXT);\n  var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\n  function requiredContext(c) {\n    !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    return c;\n  }\n\n  function getRootHostContainer() {\n    var rootInstance = requiredContext(rootInstanceStackCursor.current);\n    return rootInstance;\n  }\n\n  function pushHostContainer(fiber, nextRootInstance) {\n    // Push current root instance onto the stack;\n    // This allows us to reset root when portals are popped.\n    push(rootInstanceStackCursor, nextRootInstance, fiber);\n\n    var nextRootContext = getRootHostContext(nextRootInstance);\n\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n    push(contextStackCursor, nextRootContext, fiber);\n  }\n\n  function popHostContainer(fiber) {\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n    pop(rootInstanceStackCursor, fiber);\n  }\n\n  function getHostContext() {\n    var context = requiredContext(contextStackCursor.current);\n    return context;\n  }\n\n  function pushHostContext(fiber) {\n    var rootInstance = requiredContext(rootInstanceStackCursor.current);\n    var context = requiredContext(contextStackCursor.current);\n    var nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n    // Don't push this Fiber's context unless it's unique.\n    if (context === nextContext) {\n      return;\n    }\n\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n    push(contextStackCursor, nextContext, fiber);\n  }\n\n  function popHostContext(fiber) {\n    // Do not pop unless this Fiber provided the current context.\n    // pushHostContext() only pushes Fibers that provide unique contexts.\n    if (contextFiberStackCursor.current !== fiber) {\n      return;\n    }\n\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n  }\n\n  function resetHostContainer() {\n    contextStackCursor.current = NO_CONTEXT;\n    rootInstanceStackCursor.current = NO_CONTEXT;\n  }\n\n  return {\n    getHostContext: getHostContext,\n    getRootHostContainer: getRootHostContainer,\n    popHostContainer: popHostContainer,\n    popHostContext: popHostContext,\n    pushHostContainer: pushHostContainer,\n    pushHostContext: pushHostContext,\n    resetHostContainer: resetHostContainer\n  };\n};\n\nvar ReactFiberHydrationContext = function (config) {\n  var shouldSetTextContent = config.shouldSetTextContent,\n      hydration = config.hydration;\n\n  // If this doesn't have hydration mode.\n\n  if (!hydration) {\n    return {\n      enterHydrationState: function () {\n        return false;\n      },\n      resetHydrationState: function () {},\n      tryToClaimNextHydratableInstance: function () {},\n      prepareToHydrateHostInstance: function () {\n        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');\n      },\n      prepareToHydrateHostTextInstance: function () {\n        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');\n      },\n      popHydrationState: function (fiber) {\n        return false;\n      }\n    };\n  }\n\n  var canHydrateInstance = hydration.canHydrateInstance,\n      canHydrateTextInstance = hydration.canHydrateTextInstance,\n      getNextHydratableSibling = hydration.getNextHydratableSibling,\n      getFirstHydratableChild = hydration.getFirstHydratableChild,\n      hydrateInstance = hydration.hydrateInstance,\n      hydrateTextInstance = hydration.hydrateTextInstance,\n      didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,\n      didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,\n      didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,\n      didNotHydrateInstance = hydration.didNotHydrateInstance,\n      didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,\n      didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,\n      didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,\n      didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;\n\n  // The deepest Fiber on the stack involved in a hydration context.\n  // This may have been an insertion or a hydration.\n\n  var hydrationParentFiber = null;\n  var nextHydratableInstance = null;\n  var isHydrating = false;\n\n  function enterHydrationState(fiber) {\n    var parentInstance = fiber.stateNode.containerInfo;\n    nextHydratableInstance = getFirstHydratableChild(parentInstance);\n    hydrationParentFiber = fiber;\n    isHydrating = true;\n    return true;\n  }\n\n  function deleteHydratableInstance(returnFiber, instance) {\n    {\n      switch (returnFiber.tag) {\n        case HostRoot:\n          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);\n          break;\n        case HostComponent:\n          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n          break;\n      }\n    }\n\n    var childToDelete = createFiberFromHostInstanceForDeletion();\n    childToDelete.stateNode = instance;\n    childToDelete['return'] = returnFiber;\n    childToDelete.effectTag = Deletion;\n\n    // This might seem like it belongs on progressedFirstDeletion. However,\n    // these children are not part of the reconciliation list of children.\n    // Even if we abort and rereconcile the children, that will try to hydrate\n    // again and the nodes are still in the host tree so these will be\n    // recreated.\n    if (returnFiber.lastEffect !== null) {\n      returnFiber.lastEffect.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n  }\n\n  function insertNonHydratedInstance(returnFiber, fiber) {\n    fiber.effectTag |= Placement;\n    {\n      switch (returnFiber.tag) {\n        case HostRoot:\n          {\n            var parentContainer = returnFiber.stateNode.containerInfo;\n            switch (fiber.tag) {\n              case HostComponent:\n                var type = fiber.type;\n                var props = fiber.pendingProps;\n                didNotFindHydratableContainerInstance(parentContainer, type, props);\n                break;\n              case HostText:\n                var text = fiber.pendingProps;\n                didNotFindHydratableContainerTextInstance(parentContainer, text);\n                break;\n            }\n            break;\n          }\n        case HostComponent:\n          {\n            var parentType = returnFiber.type;\n            var parentProps = returnFiber.memoizedProps;\n            var parentInstance = returnFiber.stateNode;\n            switch (fiber.tag) {\n              case HostComponent:\n                var _type = fiber.type;\n                var _props = fiber.pendingProps;\n                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n                break;\n              case HostText:\n                var _text = fiber.pendingProps;\n                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n                break;\n            }\n            break;\n          }\n        default:\n          return;\n      }\n    }\n  }\n\n  function tryHydrate(fiber, nextInstance) {\n    switch (fiber.tag) {\n      case HostComponent:\n        {\n          var type = fiber.type;\n          var props = fiber.pendingProps;\n          var instance = canHydrateInstance(nextInstance, type, props);\n          if (instance !== null) {\n            fiber.stateNode = instance;\n            return true;\n          }\n          return false;\n        }\n      case HostText:\n        {\n          var text = fiber.pendingProps;\n          var textInstance = canHydrateTextInstance(nextInstance, text);\n          if (textInstance !== null) {\n            fiber.stateNode = textInstance;\n            return true;\n          }\n          return false;\n        }\n      default:\n        return false;\n    }\n  }\n\n  function tryToClaimNextHydratableInstance(fiber) {\n    if (!isHydrating) {\n      return;\n    }\n    var nextInstance = nextHydratableInstance;\n    if (!nextInstance) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    if (!tryHydrate(fiber, nextInstance)) {\n      // If we can't hydrate this instance let's try the next one.\n      // We use this as a heuristic. It's based on intuition and not data so it\n      // might be flawed or unnecessary.\n      nextInstance = getNextHydratableSibling(nextInstance);\n      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n        // Nothing to hydrate. Make it an insertion.\n        insertNonHydratedInstance(hydrationParentFiber, fiber);\n        isHydrating = false;\n        hydrationParentFiber = fiber;\n        return;\n      }\n      // We matched the next one, we'll now assume that the first one was\n      // superfluous and we'll delete it. Since we can't eagerly delete it\n      // we'll have to schedule a deletion. To do that, this node needs a dummy\n      // fiber associated with it.\n      deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);\n    }\n    hydrationParentFiber = fiber;\n    nextHydratableInstance = getFirstHydratableChild(nextInstance);\n  }\n\n  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n    var instance = fiber.stateNode;\n    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);\n    // TODO: Type this specific to this type of component.\n    fiber.updateQueue = updatePayload;\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update.\n    if (updatePayload !== null) {\n      return true;\n    }\n    return false;\n  }\n\n  function prepareToHydrateHostTextInstance(fiber) {\n    var textInstance = fiber.stateNode;\n    var textContent = fiber.memoizedProps;\n    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n    {\n      if (shouldUpdate) {\n        // We assume that prepareToHydrateHostTextInstance is called in a context where the\n        // hydration parent is the parent host component of this host text.\n        var returnFiber = hydrationParentFiber;\n        if (returnFiber !== null) {\n          switch (returnFiber.tag) {\n            case HostRoot:\n              {\n                var parentContainer = returnFiber.stateNode.containerInfo;\n                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);\n                break;\n              }\n            case HostComponent:\n              {\n                var parentType = returnFiber.type;\n                var parentProps = returnFiber.memoizedProps;\n                var parentInstance = returnFiber.stateNode;\n                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);\n                break;\n              }\n          }\n        }\n      }\n    }\n    return shouldUpdate;\n  }\n\n  function popToNextHostParent(fiber) {\n    var parent = fiber['return'];\n    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {\n      parent = parent['return'];\n    }\n    hydrationParentFiber = parent;\n  }\n\n  function popHydrationState(fiber) {\n    if (fiber !== hydrationParentFiber) {\n      // We're deeper than the current hydration context, inside an inserted\n      // tree.\n      return false;\n    }\n    if (!isHydrating) {\n      // If we're not currently hydrating but we're in a hydration context, then\n      // we were an insertion and now need to pop up reenter hydration of our\n      // siblings.\n      popToNextHostParent(fiber);\n      isHydrating = true;\n      return false;\n    }\n\n    var type = fiber.type;\n\n    // If we have any remaining hydratable nodes, we need to delete them now.\n    // We only do this deeper than head and body since they tend to have random\n    // other nodes in them. We also ignore components with pure text content in\n    // side of them.\n    // TODO: Better heuristic.\n    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {\n      var nextInstance = nextHydratableInstance;\n      while (nextInstance) {\n        deleteHydratableInstance(fiber, nextInstance);\n        nextInstance = getNextHydratableSibling(nextInstance);\n      }\n    }\n\n    popToNextHostParent(fiber);\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n    return true;\n  }\n\n  function resetHydrationState() {\n    hydrationParentFiber = null;\n    nextHydratableInstance = null;\n    isHydrating = false;\n  }\n\n  return {\n    enterHydrationState: enterHydrationState,\n    resetHydrationState: resetHydrationState,\n    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,\n    prepareToHydrateHostInstance: prepareToHydrateHostInstance,\n    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,\n    popHydrationState: popHydrationState\n  };\n};\n\n// This lets us hook into Fiber to debug what it's doing.\n// See https://github.com/facebook/react/pull/8033.\n// This is not part of the public API, not even for React DevTools.\n// You may only inject a debugTool if you work on React Fiber itself.\nvar ReactFiberInstrumentation = {\n  debugTool: null\n};\n\nvar ReactFiberInstrumentation_1 = ReactFiberInstrumentation;\n\nvar defaultShowDialog = function (capturedError) {\n  return true;\n};\n\nvar showDialog = defaultShowDialog;\n\nfunction logCapturedError(capturedError) {\n  var logError = showDialog(capturedError);\n\n  // Allow injected showDialog() to prevent default console.error logging.\n  // This enables renderers like ReactNative to better manage redbox behavior.\n  if (logError === false) {\n    return;\n  }\n\n  {\n    var componentName = capturedError.componentName,\n        componentStack = capturedError.componentStack,\n        errorBoundaryName = capturedError.errorBoundaryName,\n        errorBoundaryFound = capturedError.errorBoundaryFound,\n        willRetry = capturedError.willRetry;\n\n\n    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';\n\n    var errorBoundaryMessage = void 0;\n    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\n    if (errorBoundaryFound && errorBoundaryName) {\n      if (willRetry) {\n        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');\n      } else {\n        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';\n      }\n    } else {\n      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';\n    }\n    var combinedMessage = '' + componentNameMessage + componentStack + '\\n\\n' + ('' + errorBoundaryMessage);\n\n    // In development, we provide our own message with just the component stack.\n    // We don't include the original error message and JS stack because the browser\n    // has already printed it. Even if the application swallows the error, it is still\n    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n    console.error(combinedMessage);\n  }\n}\n\nvar invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;\nvar hasCaughtError = ReactErrorUtils.hasCaughtError;\nvar clearCaughtError = ReactErrorUtils.clearCaughtError;\n\n\n{\n  var didWarnAboutStateTransition = false;\n  var didWarnSetStateChildContext = false;\n  var didWarnStateUpdateForUnmountedComponent = {};\n\n  var warnAboutUpdateOnUnmounted = function (fiber) {\n    var componentName = getComponentName(fiber) || 'ReactClass';\n    if (didWarnStateUpdateForUnmountedComponent[componentName]) {\n      return;\n    }\n    warning(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\\n\\nPlease ' + 'check the code for the %s component.', componentName);\n    didWarnStateUpdateForUnmountedComponent[componentName] = true;\n  };\n\n  var warnAboutInvalidUpdates = function (instance) {\n    switch (ReactDebugCurrentFiber.phase) {\n      case 'getChildContext':\n        if (didWarnSetStateChildContext) {\n          return;\n        }\n        warning(false, 'setState(...): Cannot call setState() inside getChildContext()');\n        didWarnSetStateChildContext = true;\n        break;\n      case 'render':\n        if (didWarnAboutStateTransition) {\n          return;\n        }\n        warning(false, 'Cannot update during an existing state transition (such as within ' + \"`render` or another component's constructor). Render methods should \" + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');\n        didWarnAboutStateTransition = true;\n        break;\n    }\n  };\n}\n\nvar ReactFiberScheduler = function (config) {\n  var hostContext = ReactFiberHostContext(config);\n  var hydrationContext = ReactFiberHydrationContext(config);\n  var popHostContainer = hostContext.popHostContainer,\n      popHostContext = hostContext.popHostContext,\n      resetHostContainer = hostContext.resetHostContainer;\n\n  var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),\n      beginWork = _ReactFiberBeginWork.beginWork,\n      beginFailedWork = _ReactFiberBeginWork.beginFailedWork;\n\n  var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),\n      completeWork = _ReactFiberCompleteWo.completeWork;\n\n  var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),\n      commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,\n      commitPlacement = _ReactFiberCommitWork.commitPlacement,\n      commitDeletion = _ReactFiberCommitWork.commitDeletion,\n      commitWork = _ReactFiberCommitWork.commitWork,\n      commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,\n      commitAttachRef = _ReactFiberCommitWork.commitAttachRef,\n      commitDetachRef = _ReactFiberCommitWork.commitDetachRef;\n\n  var now = config.now,\n      scheduleDeferredCallback = config.scheduleDeferredCallback,\n      useSyncScheduling = config.useSyncScheduling,\n      prepareForCommit = config.prepareForCommit,\n      resetAfterCommit = config.resetAfterCommit;\n\n  // Represents the current time in ms.\n\n  var startTime = now();\n  var mostRecentCurrentTime = msToExpirationTime(0);\n\n  // Represents the expiration time that incoming updates should use. (If this\n  // is NoWork, use the default strategy: async updates in async mode, sync\n  // updates in sync mode.)\n  var expirationContext = NoWork;\n\n  var isWorking = false;\n\n  // The next work in progress fiber that we're currently working on.\n  var nextUnitOfWork = null;\n  var nextRoot = null;\n  // The time at which we're currently rendering work.\n  var nextRenderExpirationTime = NoWork;\n\n  // The next fiber with an effect that we're currently committing.\n  var nextEffect = null;\n\n  // Keep track of which fibers have captured an error that need to be handled.\n  // Work is removed from this collection after componentDidCatch is called.\n  var capturedErrors = null;\n  // Keep track of which fibers have failed during the current batch of work.\n  // This is a different set than capturedErrors, because it is not reset until\n  // the end of the batch. This is needed to propagate errors correctly if a\n  // subtree fails more than once.\n  var failedBoundaries = null;\n  // Error boundaries that captured an error during the current commit.\n  var commitPhaseBoundaries = null;\n  var firstUncaughtError = null;\n  var didFatal = false;\n\n  var isCommitting = false;\n  var isUnmounting = false;\n\n  // Used for performance tracking.\n  var interruptedBy = null;\n\n  function resetContextStack() {\n    // Reset the stack\n    reset$1();\n    // Reset the cursors\n    resetContext();\n    resetHostContainer();\n  }\n\n  function commitAllHostEffects() {\n    while (nextEffect !== null) {\n      {\n        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);\n      }\n      recordEffect();\n\n      var effectTag = nextEffect.effectTag;\n      if (effectTag & ContentReset) {\n        commitResetTextContent(nextEffect);\n      }\n\n      if (effectTag & Ref) {\n        var current = nextEffect.alternate;\n        if (current !== null) {\n          commitDetachRef(current);\n        }\n      }\n\n      // The following switch statement is only concerned about placement,\n      // updates, and deletions. To avoid needing to add a case for every\n      // possible bitmap value, we remove the secondary effects from the\n      // effect tag and switch on that value.\n      var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);\n      switch (primaryEffectTag) {\n        case Placement:\n          {\n            commitPlacement(nextEffect);\n            // Clear the \"placement\" from effect tag so that we know that this is inserted, before\n            // any life-cycles like componentDidMount gets called.\n            // TODO: findDOMNode doesn't rely on this any more but isMounted\n            // does and isMounted is deprecated anyway so we should be able\n            // to kill this.\n            nextEffect.effectTag &= ~Placement;\n            break;\n          }\n        case PlacementAndUpdate:\n          {\n            // Placement\n            commitPlacement(nextEffect);\n            // Clear the \"placement\" from effect tag so that we know that this is inserted, before\n            // any life-cycles like componentDidMount gets called.\n            nextEffect.effectTag &= ~Placement;\n\n            // Update\n            var _current = nextEffect.alternate;\n            commitWork(_current, nextEffect);\n            break;\n          }\n        case Update:\n          {\n            var _current2 = nextEffect.alternate;\n            commitWork(_current2, nextEffect);\n            break;\n          }\n        case Deletion:\n          {\n            isUnmounting = true;\n            commitDeletion(nextEffect);\n            isUnmounting = false;\n            break;\n          }\n      }\n      nextEffect = nextEffect.nextEffect;\n    }\n\n    {\n      ReactDebugCurrentFiber.resetCurrentFiber();\n    }\n  }\n\n  function commitAllLifeCycles() {\n    while (nextEffect !== null) {\n      var effectTag = nextEffect.effectTag;\n\n      if (effectTag & (Update | Callback)) {\n        recordEffect();\n        var current = nextEffect.alternate;\n        commitLifeCycles(current, nextEffect);\n      }\n\n      if (effectTag & Ref) {\n        recordEffect();\n        commitAttachRef(nextEffect);\n      }\n\n      if (effectTag & Err) {\n        recordEffect();\n        commitErrorHandling(nextEffect);\n      }\n\n      var next = nextEffect.nextEffect;\n      // Ensure that we clean these up so that we don't accidentally keep them.\n      // I'm not actually sure this matters because we can't reset firstEffect\n      // and lastEffect since they're on every node, not just the effectful\n      // ones. So we have to clean everything as we reuse nodes anyway.\n      nextEffect.nextEffect = null;\n      // Ensure that we reset the effectTag here so that we can rely on effect\n      // tags to reason about the current life-cycle.\n      nextEffect = next;\n    }\n  }\n\n  function commitRoot(finishedWork) {\n    // We keep track of this so that captureError can collect any boundaries\n    // that capture an error during the commit phase. The reason these aren't\n    // local to this function is because errors that occur during cWU are\n    // captured elsewhere, to prevent the unmount from being interrupted.\n    isWorking = true;\n    isCommitting = true;\n    startCommitTimer();\n\n    var root = finishedWork.stateNode;\n    !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    root.isReadyForCommit = false;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    var firstEffect = void 0;\n    if (finishedWork.effectTag > PerformedWork) {\n      // A fiber's effect list consists only of its children, not itself. So if\n      // the root has an effect, we need to add it to the end of the list. The\n      // resulting list is the set that would belong to the root's parent, if\n      // it had one; that is, all the effects in the tree including the root.\n      if (finishedWork.lastEffect !== null) {\n        finishedWork.lastEffect.nextEffect = finishedWork;\n        firstEffect = finishedWork.firstEffect;\n      } else {\n        firstEffect = finishedWork;\n      }\n    } else {\n      // There is no effect on the root.\n      firstEffect = finishedWork.firstEffect;\n    }\n\n    prepareForCommit();\n\n    // Commit all the side-effects within a tree. We'll do this in two passes.\n    // The first pass performs all the host insertions, updates, deletions and\n    // ref unmounts.\n    nextEffect = firstEffect;\n    startCommitHostEffectsTimer();\n    while (nextEffect !== null) {\n      var didError = false;\n      var _error = void 0;\n      {\n        invokeGuardedCallback$1(null, commitAllHostEffects, null);\n        if (hasCaughtError()) {\n          didError = true;\n          _error = clearCaughtError();\n        }\n      }\n      if (didError) {\n        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        captureError(nextEffect, _error);\n        // Clean-up\n        if (nextEffect !== null) {\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    }\n    stopCommitHostEffectsTimer();\n\n    resetAfterCommit();\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the first pass of the commit phase, so that the previous tree is still\n    // current during componentWillUnmount, but before the second pass, so that\n    // the finished work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // In the second pass we'll perform all life-cycles and ref callbacks.\n    // Life-cycles happen as a separate pass so that all placements, updates,\n    // and deletions in the entire tree have already been invoked.\n    // This pass also triggers any renderer-specific initial effects.\n    nextEffect = firstEffect;\n    startCommitLifeCyclesTimer();\n    while (nextEffect !== null) {\n      var _didError = false;\n      var _error2 = void 0;\n      {\n        invokeGuardedCallback$1(null, commitAllLifeCycles, null);\n        if (hasCaughtError()) {\n          _didError = true;\n          _error2 = clearCaughtError();\n        }\n      }\n      if (_didError) {\n        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n        captureError(nextEffect, _error2);\n        if (nextEffect !== null) {\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    }\n\n    isCommitting = false;\n    isWorking = false;\n    stopCommitLifeCyclesTimer();\n    stopCommitTimer();\n    if (typeof onCommitRoot === 'function') {\n      onCommitRoot(finishedWork.stateNode);\n    }\n    if (true && ReactFiberInstrumentation_1.debugTool) {\n      ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);\n    }\n\n    // If we caught any errors during this commit, schedule their boundaries\n    // to update.\n    if (commitPhaseBoundaries) {\n      commitPhaseBoundaries.forEach(scheduleErrorRecovery);\n      commitPhaseBoundaries = null;\n    }\n\n    if (firstUncaughtError !== null) {\n      var _error3 = firstUncaughtError;\n      firstUncaughtError = null;\n      onUncaughtError(_error3);\n    }\n\n    var remainingTime = root.current.expirationTime;\n\n    if (remainingTime === NoWork) {\n      capturedErrors = null;\n      failedBoundaries = null;\n    }\n\n    return remainingTime;\n  }\n\n  function resetExpirationTime(workInProgress, renderTime) {\n    if (renderTime !== Never && workInProgress.expirationTime === Never) {\n      // The children of this component are hidden. Don't bubble their\n      // expiration times.\n      return;\n    }\n\n    // Check for pending updates.\n    var newExpirationTime = getUpdateExpirationTime(workInProgress);\n\n    // TODO: Calls need to visit stateNode\n\n    // Bubble up the earliest expiration time.\n    var child = workInProgress.child;\n    while (child !== null) {\n      if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {\n        newExpirationTime = child.expirationTime;\n      }\n      child = child.sibling;\n    }\n    workInProgress.expirationTime = newExpirationTime;\n  }\n\n  function completeUnitOfWork(workInProgress) {\n    while (true) {\n      // The current, flushed, state of this fiber is the alternate.\n      // Ideally nothing should rely on this, but relying on it here\n      // means that we don't need an additional field on the work in\n      // progress.\n      var current = workInProgress.alternate;\n      {\n        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);\n      }\n      var next = completeWork(current, workInProgress, nextRenderExpirationTime);\n      {\n        ReactDebugCurrentFiber.resetCurrentFiber();\n      }\n\n      var returnFiber = workInProgress['return'];\n      var siblingFiber = workInProgress.sibling;\n\n      resetExpirationTime(workInProgress, nextRenderExpirationTime);\n\n      if (next !== null) {\n        stopWorkTimer(workInProgress);\n        if (true && ReactFiberInstrumentation_1.debugTool) {\n          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);\n        }\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        return next;\n      }\n\n      if (returnFiber !== null) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = workInProgress.firstEffect;\n        }\n        if (workInProgress.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;\n          }\n          returnFiber.lastEffect = workInProgress.lastEffect;\n        }\n\n        // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if\n        // needed, by doing multiple passes over the effect list. We don't want\n        // to schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n        var effectTag = workInProgress.effectTag;\n        // Skip both NoWork and PerformedWork tags when creating the effect list.\n        // PerformedWork effect is read by React DevTools but shouldn't be committed.\n        if (effectTag > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = workInProgress;\n          } else {\n            returnFiber.firstEffect = workInProgress;\n          }\n          returnFiber.lastEffect = workInProgress;\n        }\n      }\n\n      stopWorkTimer(workInProgress);\n      if (true && ReactFiberInstrumentation_1.debugTool) {\n        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);\n      }\n\n      if (siblingFiber !== null) {\n        // If there is more work to do in this returnFiber, do that next.\n        return siblingFiber;\n      } else if (returnFiber !== null) {\n        // If there's no more work in this returnFiber. Complete the returnFiber.\n        workInProgress = returnFiber;\n        continue;\n      } else {\n        // We've reached the root.\n        var root = workInProgress.stateNode;\n        root.isReadyForCommit = true;\n        return null;\n      }\n    }\n\n    // Without this explicit null return Flow complains of invalid return type\n    // TODO Remove the above while(true) loop\n    // eslint-disable-next-line no-unreachable\n    return null;\n  }\n\n  function performUnitOfWork(workInProgress) {\n    // The current, flushed, state of this fiber is the alternate.\n    // Ideally nothing should rely on this, but relying on it here\n    // means that we don't need an additional field on the work in\n    // progress.\n    var current = workInProgress.alternate;\n\n    // See if beginning this work spawns more work.\n    startWorkTimer(workInProgress);\n    {\n      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);\n    }\n    var next = beginWork(current, workInProgress, nextRenderExpirationTime);\n    {\n      ReactDebugCurrentFiber.resetCurrentFiber();\n    }\n    if (true && ReactFiberInstrumentation_1.debugTool) {\n      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);\n    }\n\n    if (next === null) {\n      // If this doesn't spawn new work, complete the current work.\n      next = completeUnitOfWork(workInProgress);\n    }\n\n    ReactCurrentOwner.current = null;\n\n    return next;\n  }\n\n  function performFailedUnitOfWork(workInProgress) {\n    // The current, flushed, state of this fiber is the alternate.\n    // Ideally nothing should rely on this, but relying on it here\n    // means that we don't need an additional field on the work in\n    // progress.\n    var current = workInProgress.alternate;\n\n    // See if beginning this work spawns more work.\n    startWorkTimer(workInProgress);\n    {\n      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);\n    }\n    var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);\n    {\n      ReactDebugCurrentFiber.resetCurrentFiber();\n    }\n    if (true && ReactFiberInstrumentation_1.debugTool) {\n      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);\n    }\n\n    if (next === null) {\n      // If this doesn't spawn new work, complete the current work.\n      next = completeUnitOfWork(workInProgress);\n    }\n\n    ReactCurrentOwner.current = null;\n\n    return next;\n  }\n\n  function workLoop(expirationTime) {\n    if (capturedErrors !== null) {\n      // If there are unhandled errors, switch to the slow work loop.\n      // TODO: How to avoid this check in the fast path? Maybe the renderer\n      // could keep track of which roots have unhandled errors and call a\n      // forked version of renderRoot.\n      slowWorkLoopThatChecksForFailedWork(expirationTime);\n      return;\n    }\n    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {\n      return;\n    }\n\n    if (nextRenderExpirationTime <= mostRecentCurrentTime) {\n      // Flush all expired work.\n      while (nextUnitOfWork !== null) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n      }\n    } else {\n      // Flush asynchronous work until the deadline runs out of time.\n      while (nextUnitOfWork !== null && !shouldYield()) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n      }\n    }\n  }\n\n  function slowWorkLoopThatChecksForFailedWork(expirationTime) {\n    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {\n      return;\n    }\n\n    if (nextRenderExpirationTime <= mostRecentCurrentTime) {\n      // Flush all expired work.\n      while (nextUnitOfWork !== null) {\n        if (hasCapturedError(nextUnitOfWork)) {\n          // Use a forked version of performUnitOfWork\n          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);\n        } else {\n          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        }\n      }\n    } else {\n      // Flush asynchronous work until the deadline runs out of time.\n      while (nextUnitOfWork !== null && !shouldYield()) {\n        if (hasCapturedError(nextUnitOfWork)) {\n          // Use a forked version of performUnitOfWork\n          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);\n        } else {\n          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        }\n      }\n    }\n  }\n\n  function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {\n    // We're going to restart the error boundary that captured the error.\n    // Conceptually, we're unwinding the stack. We need to unwind the\n    // context stack, too.\n    unwindContexts(failedWork, boundary);\n\n    // Restart the error boundary using a forked version of\n    // performUnitOfWork that deletes the boundary's children. The entire\n    // failed subree will be unmounted. During the commit phase, a special\n    // lifecycle method is called on the error boundary, which triggers\n    // a re-render.\n    nextUnitOfWork = performFailedUnitOfWork(boundary);\n\n    // Continue working.\n    workLoop(expirationTime);\n  }\n\n  function renderRoot(root, expirationTime) {\n    !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    isWorking = true;\n\n    // We're about to mutate the work-in-progress tree. If the root was pending\n    // commit, it no longer is: we'll need to complete it again.\n    root.isReadyForCommit = false;\n\n    // Check if we're starting from a fresh stack, or if we're resuming from\n    // previously yielded work.\n    if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {\n      // Reset the stack and start working from the root.\n      resetContextStack();\n      nextRoot = root;\n      nextRenderExpirationTime = expirationTime;\n      nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);\n    }\n\n    startWorkLoopTimer(nextUnitOfWork);\n\n    var didError = false;\n    var error = null;\n    {\n      invokeGuardedCallback$1(null, workLoop, null, expirationTime);\n      if (hasCaughtError()) {\n        didError = true;\n        error = clearCaughtError();\n      }\n    }\n\n    // An error was thrown during the render phase.\n    while (didError) {\n      if (didFatal) {\n        // This was a fatal error. Don't attempt to recover from it.\n        firstUncaughtError = error;\n        break;\n      }\n\n      var failedWork = nextUnitOfWork;\n      if (failedWork === null) {\n        // An error was thrown but there's no current unit of work. This can\n        // happen during the commit phase if there's a bug in the renderer.\n        didFatal = true;\n        continue;\n      }\n\n      // \"Capture\" the error by finding the nearest boundary. If there is no\n      // error boundary, we use the root.\n      var boundary = captureError(failedWork, error);\n      !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n      if (didFatal) {\n        // The error we just captured was a fatal error. This happens\n        // when the error propagates to the root more than once.\n        continue;\n      }\n\n      didError = false;\n      error = null;\n      {\n        invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);\n        if (hasCaughtError()) {\n          didError = true;\n          error = clearCaughtError();\n          continue;\n        }\n      }\n      // We're finished working. Exit the error loop.\n      break;\n    }\n\n    var uncaughtError = firstUncaughtError;\n\n    // We're done performing work. Time to clean up.\n    stopWorkLoopTimer(interruptedBy);\n    interruptedBy = null;\n    isWorking = false;\n    didFatal = false;\n    firstUncaughtError = null;\n\n    if (uncaughtError !== null) {\n      onUncaughtError(uncaughtError);\n    }\n\n    return root.isReadyForCommit ? root.current.alternate : null;\n  }\n\n  // Returns the boundary that captured the error, or null if the error is ignored\n  function captureError(failedWork, error) {\n    // It is no longer valid because we exited the user code.\n    ReactCurrentOwner.current = null;\n    {\n      ReactDebugCurrentFiber.resetCurrentFiber();\n    }\n\n    // Search for the nearest error boundary.\n    var boundary = null;\n\n    // Passed to logCapturedError()\n    var errorBoundaryFound = false;\n    var willRetry = false;\n    var errorBoundaryName = null;\n\n    // Host containers are a special case. If the failed work itself is a host\n    // container, then it acts as its own boundary. In all other cases, we\n    // ignore the work itself and only search through the parents.\n    if (failedWork.tag === HostRoot) {\n      boundary = failedWork;\n\n      if (isFailedBoundary(failedWork)) {\n        // If this root already failed, there must have been an error when\n        // attempting to unmount it. This is a worst-case scenario and\n        // should only be possible if there's a bug in the renderer.\n        didFatal = true;\n      }\n    } else {\n      var node = failedWork['return'];\n      while (node !== null && boundary === null) {\n        if (node.tag === ClassComponent) {\n          var instance = node.stateNode;\n          if (typeof instance.componentDidCatch === 'function') {\n            errorBoundaryFound = true;\n            errorBoundaryName = getComponentName(node);\n\n            // Found an error boundary!\n            boundary = node;\n            willRetry = true;\n          }\n        } else if (node.tag === HostRoot) {\n          // Treat the root like a no-op error boundary\n          boundary = node;\n        }\n\n        if (isFailedBoundary(node)) {\n          // This boundary is already in a failed state.\n\n          // If we're currently unmounting, that means this error was\n          // thrown while unmounting a failed subtree. We should ignore\n          // the error.\n          if (isUnmounting) {\n            return null;\n          }\n\n          // If we're in the commit phase, we should check to see if\n          // this boundary already captured an error during this commit.\n          // This case exists because multiple errors can be thrown during\n          // a single commit without interruption.\n          if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {\n            // If so, we should ignore this error.\n            return null;\n          }\n\n          // The error should propagate to the next boundary -— we keep looking.\n          boundary = null;\n          willRetry = false;\n        }\n\n        node = node['return'];\n      }\n    }\n\n    if (boundary !== null) {\n      // Add to the collection of failed boundaries. This lets us know that\n      // subsequent errors in this subtree should propagate to the next boundary.\n      if (failedBoundaries === null) {\n        failedBoundaries = new Set();\n      }\n      failedBoundaries.add(boundary);\n\n      // This method is unsafe outside of the begin and complete phases.\n      // We might be in the commit phase when an error is captured.\n      // The risk is that the return path from this Fiber may not be accurate.\n      // That risk is acceptable given the benefit of providing users more context.\n      var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);\n      var _componentName = getComponentName(failedWork);\n\n      // Add to the collection of captured errors. This is stored as a global\n      // map of errors and their component stack location keyed by the boundaries\n      // that capture them. We mostly use this Map as a Set; it's a Map only to\n      // avoid adding a field to Fiber to store the error.\n      if (capturedErrors === null) {\n        capturedErrors = new Map();\n      }\n\n      var capturedError = {\n        componentName: _componentName,\n        componentStack: _componentStack,\n        error: error,\n        errorBoundary: errorBoundaryFound ? boundary.stateNode : null,\n        errorBoundaryFound: errorBoundaryFound,\n        errorBoundaryName: errorBoundaryName,\n        willRetry: willRetry\n      };\n\n      capturedErrors.set(boundary, capturedError);\n\n      try {\n        logCapturedError(capturedError);\n      } catch (e) {\n        // Prevent cycle if logCapturedError() throws.\n        // A cycle may still occur if logCapturedError renders a component that throws.\n        console.error(e);\n      }\n\n      // If we're in the commit phase, defer scheduling an update on the\n      // boundary until after the commit is complete\n      if (isCommitting) {\n        if (commitPhaseBoundaries === null) {\n          commitPhaseBoundaries = new Set();\n        }\n        commitPhaseBoundaries.add(boundary);\n      } else {\n        // Otherwise, schedule an update now.\n        // TODO: Is this actually necessary during the render phase? Is it\n        // possible to unwind and continue rendering at the same priority,\n        // without corrupting internal state?\n        scheduleErrorRecovery(boundary);\n      }\n      return boundary;\n    } else if (firstUncaughtError === null) {\n      // If no boundary is found, we'll need to throw the error\n      firstUncaughtError = error;\n    }\n    return null;\n  }\n\n  function hasCapturedError(fiber) {\n    // TODO: capturedErrors should store the boundary instance, to avoid needing\n    // to check the alternate.\n    return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));\n  }\n\n  function isFailedBoundary(fiber) {\n    // TODO: failedBoundaries should store the boundary instance, to avoid\n    // needing to check the alternate.\n    return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));\n  }\n\n  function commitErrorHandling(effectfulFiber) {\n    var capturedError = void 0;\n    if (capturedErrors !== null) {\n      capturedError = capturedErrors.get(effectfulFiber);\n      capturedErrors['delete'](effectfulFiber);\n      if (capturedError == null) {\n        if (effectfulFiber.alternate !== null) {\n          effectfulFiber = effectfulFiber.alternate;\n          capturedError = capturedErrors.get(effectfulFiber);\n          capturedErrors['delete'](effectfulFiber);\n        }\n      }\n    }\n\n    !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n    switch (effectfulFiber.tag) {\n      case ClassComponent:\n        var instance = effectfulFiber.stateNode;\n\n        var info = {\n          componentStack: capturedError.componentStack\n        };\n\n        // Allow the boundary to handle the error, usually by scheduling\n        // an update to itself\n        instance.componentDidCatch(capturedError.error, info);\n        return;\n      case HostRoot:\n        if (firstUncaughtError === null) {\n          firstUncaughtError = capturedError.error;\n        }\n        return;\n      default:\n        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  function unwindContexts(from, to) {\n    var node = from;\n    while (node !== null) {\n      switch (node.tag) {\n        case ClassComponent:\n          popContextProvider(node);\n          break;\n        case HostComponent:\n          popHostContext(node);\n          break;\n        case HostRoot:\n          popHostContainer(node);\n          break;\n        case HostPortal:\n          popHostContainer(node);\n          break;\n      }\n      if (node === to || node.alternate === to) {\n        stopFailedWorkTimer(node);\n        break;\n      } else {\n        stopWorkTimer(node);\n      }\n      node = node['return'];\n    }\n  }\n\n  function computeAsyncExpiration() {\n    // Given the current clock time, returns an expiration time. We use rounding\n    // to batch like updates together.\n    // Should complete within ~1000ms. 1200ms max.\n    var currentTime = recalculateCurrentTime();\n    var expirationMs = 1000;\n    var bucketSizeMs = 200;\n    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);\n  }\n\n  function computeExpirationForFiber(fiber) {\n    var expirationTime = void 0;\n    if (expirationContext !== NoWork) {\n      // An explicit expiration context was set;\n      expirationTime = expirationContext;\n    } else if (isWorking) {\n      if (isCommitting) {\n        // Updates that occur during the commit phase should have sync priority\n        // by default.\n        expirationTime = Sync;\n      } else {\n        // Updates during the render phase should expire at the same time as\n        // the work that is being rendered.\n        expirationTime = nextRenderExpirationTime;\n      }\n    } else {\n      // No explicit expiration context was set, and we're not currently\n      // performing work. Calculate a new expiration time.\n      if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {\n        // This is a sync update\n        expirationTime = Sync;\n      } else {\n        // This is an async update\n        expirationTime = computeAsyncExpiration();\n      }\n    }\n    return expirationTime;\n  }\n\n  function scheduleWork(fiber, expirationTime) {\n    return scheduleWorkImpl(fiber, expirationTime, false);\n  }\n\n  function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {\n    recordScheduleUpdate();\n\n    {\n      if (!isErrorRecovery && fiber.tag === ClassComponent) {\n        var instance = fiber.stateNode;\n        warnAboutInvalidUpdates(instance);\n      }\n    }\n\n    var node = fiber;\n    while (node !== null) {\n      // Walk the parent path to the root and update each node's\n      // expiration time.\n      if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {\n        node.expirationTime = expirationTime;\n      }\n      if (node.alternate !== null) {\n        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {\n          node.alternate.expirationTime = expirationTime;\n        }\n      }\n      if (node['return'] === null) {\n        if (node.tag === HostRoot) {\n          var root = node.stateNode;\n          if (!isWorking && root === nextRoot && expirationTime <= nextRenderExpirationTime) {\n            // Restart the root from the top.\n            if (nextUnitOfWork !== null) {\n              // This is an interruption. (Used for performance tracking.)\n              interruptedBy = fiber;\n            }\n            nextRoot = null;\n            nextUnitOfWork = null;\n            nextRenderExpirationTime = NoWork;\n          }\n          requestWork(root, expirationTime);\n        } else {\n          {\n            if (!isErrorRecovery && fiber.tag === ClassComponent) {\n              warnAboutUpdateOnUnmounted(fiber);\n            }\n          }\n          return;\n        }\n      }\n      node = node['return'];\n    }\n  }\n\n  function scheduleErrorRecovery(fiber) {\n    scheduleWorkImpl(fiber, Sync, true);\n  }\n\n  function recalculateCurrentTime() {\n    // Subtract initial time so it fits inside 32bits\n    var ms = now() - startTime;\n    mostRecentCurrentTime = msToExpirationTime(ms);\n    return mostRecentCurrentTime;\n  }\n\n  function deferredUpdates(fn) {\n    var previousExpirationContext = expirationContext;\n    expirationContext = computeAsyncExpiration();\n    try {\n      return fn();\n    } finally {\n      expirationContext = previousExpirationContext;\n    }\n  }\n\n  function syncUpdates(fn) {\n    var previousExpirationContext = expirationContext;\n    expirationContext = Sync;\n    try {\n      return fn();\n    } finally {\n      expirationContext = previousExpirationContext;\n    }\n  }\n\n  // TODO: Everything below this is written as if it has been lifted to the\n  // renderers. I'll do this in a follow-up.\n\n  // Linked-list of roots\n  var firstScheduledRoot = null;\n  var lastScheduledRoot = null;\n\n  var isCallbackScheduled = false;\n  var isRendering = false;\n  var nextFlushedRoot = null;\n  var nextFlushedExpirationTime = NoWork;\n  var deadlineDidExpire = false;\n  var hasUnhandledError = false;\n  var unhandledError = null;\n  var deadline = null;\n\n  var isBatchingUpdates = false;\n  var isUnbatchingUpdates = false;\n\n  // Use these to prevent an infinite loop of nested updates\n  var NESTED_UPDATE_LIMIT = 1000;\n  var nestedUpdateCount = 0;\n\n  var timeHeuristicForUnitOfWork = 1;\n\n  // requestWork is called by the scheduler whenever a root receives an update.\n  // It's up to the renderer to call renderRoot at some point in the future.\n  function requestWork(root, expirationTime) {\n    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n      invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');\n    }\n\n    // Add the root to the schedule.\n    // Check if this root is already part of the schedule.\n    if (root.nextScheduledRoot === null) {\n      // This root is not already scheduled. Add it.\n      root.remainingExpirationTime = expirationTime;\n      if (lastScheduledRoot === null) {\n        firstScheduledRoot = lastScheduledRoot = root;\n        root.nextScheduledRoot = root;\n      } else {\n        lastScheduledRoot.nextScheduledRoot = root;\n        lastScheduledRoot = root;\n        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\n      }\n    } else {\n      // This root is already scheduled, but its priority may have increased.\n      var remainingExpirationTime = root.remainingExpirationTime;\n      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {\n        // Update the priority.\n        root.remainingExpirationTime = expirationTime;\n      }\n    }\n\n    if (isRendering) {\n      // Prevent reentrancy. Remaining work will be scheduled at the end of\n      // the currently rendering batch.\n      return;\n    }\n\n    if (isBatchingUpdates) {\n      // Flush work at the end of the batch.\n      if (isUnbatchingUpdates) {\n        // ...unless we're inside unbatchedUpdates, in which case we should\n        // flush it now.\n        performWorkOnRoot(root, Sync);\n      }\n      return;\n    }\n\n    // TODO: Get rid of Sync and use current time?\n    if (expirationTime === Sync) {\n      performWork(Sync, null);\n    } else if (!isCallbackScheduled) {\n      isCallbackScheduled = true;\n      startRequestCallbackTimer();\n      scheduleDeferredCallback(performAsyncWork);\n    }\n  }\n\n  function findHighestPriorityRoot() {\n    var highestPriorityWork = NoWork;\n    var highestPriorityRoot = null;\n\n    if (lastScheduledRoot !== null) {\n      var previousScheduledRoot = lastScheduledRoot;\n      var root = firstScheduledRoot;\n      while (root !== null) {\n        var remainingExpirationTime = root.remainingExpirationTime;\n        if (remainingExpirationTime === NoWork) {\n          // This root no longer has work. Remove it from the scheduler.\n\n          // TODO: This check is redudant, but Flow is confused by the branch\n          // below where we set lastScheduledRoot to null, even though we break\n          // from the loop right after.\n          !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n          if (root === root.nextScheduledRoot) {\n            // This is the only root in the list.\n            root.nextScheduledRoot = null;\n            firstScheduledRoot = lastScheduledRoot = null;\n            break;\n          } else if (root === firstScheduledRoot) {\n            // This is the first root in the list.\n            var next = root.nextScheduledRoot;\n            firstScheduledRoot = next;\n            lastScheduledRoot.nextScheduledRoot = next;\n            root.nextScheduledRoot = null;\n          } else if (root === lastScheduledRoot) {\n            // This is the last root in the list.\n            lastScheduledRoot = previousScheduledRoot;\n            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\n            root.nextScheduledRoot = null;\n            break;\n          } else {\n            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;\n            root.nextScheduledRoot = null;\n          }\n          root = previousScheduledRoot.nextScheduledRoot;\n        } else {\n          if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {\n            // Update the priority, if it's higher\n            highestPriorityWork = remainingExpirationTime;\n            highestPriorityRoot = root;\n          }\n          if (root === lastScheduledRoot) {\n            break;\n          }\n          previousScheduledRoot = root;\n          root = root.nextScheduledRoot;\n        }\n      }\n    }\n\n    // If the next root is the same as the previous root, this is a nested\n    // update. To prevent an infinite loop, increment the nested update count.\n    var previousFlushedRoot = nextFlushedRoot;\n    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {\n      nestedUpdateCount++;\n    } else {\n      // Reset whenever we switch roots.\n      nestedUpdateCount = 0;\n    }\n    nextFlushedRoot = highestPriorityRoot;\n    nextFlushedExpirationTime = highestPriorityWork;\n  }\n\n  function performAsyncWork(dl) {\n    performWork(NoWork, dl);\n  }\n\n  function performWork(minExpirationTime, dl) {\n    deadline = dl;\n\n    // Keep working on roots until there's no more work, or until the we reach\n    // the deadline.\n    findHighestPriorityRoot();\n\n    if (enableUserTimingAPI && deadline !== null) {\n      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();\n      stopRequestCallbackTimer(didExpire);\n    }\n\n    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {\n      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);\n      // Find the next highest priority work.\n      findHighestPriorityRoot();\n    }\n\n    // We're done flushing work. Either we ran out of time in this callback,\n    // or there's no more work left with sufficient priority.\n\n    // If we're inside a callback, set this to false since we just completed it.\n    if (deadline !== null) {\n      isCallbackScheduled = false;\n    }\n    // If there's work left over, schedule a new callback.\n    if (nextFlushedRoot !== null && !isCallbackScheduled) {\n      isCallbackScheduled = true;\n      startRequestCallbackTimer();\n      scheduleDeferredCallback(performAsyncWork);\n    }\n\n    // Clean-up.\n    deadline = null;\n    deadlineDidExpire = false;\n    nestedUpdateCount = 0;\n\n    if (hasUnhandledError) {\n      var _error4 = unhandledError;\n      unhandledError = null;\n      hasUnhandledError = false;\n      throw _error4;\n    }\n  }\n\n  function performWorkOnRoot(root, expirationTime) {\n    !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n\n    isRendering = true;\n\n    // Check if this is async work or sync/expired work.\n    // TODO: Pass current time as argument to renderRoot, commitRoot\n    if (expirationTime <= recalculateCurrentTime()) {\n      // Flush sync work.\n      var finishedWork = root.finishedWork;\n      if (finishedWork !== null) {\n        // This root is already complete. We can commit it.\n        root.finishedWork = null;\n        root.remainingExpirationTime = commitRoot(finishedWork);\n      } else {\n        root.finishedWork = null;\n        finishedWork = renderRoot(root, expirationTime);\n        if (finishedWork !== null) {\n          // We've completed the root. Commit it.\n          root.remainingExpirationTime = commitRoot(finishedWork);\n        }\n      }\n    } else {\n      // Flush async work.\n      var _finishedWork = root.finishedWork;\n      if (_finishedWork !== null) {\n        // This root is already complete. We can commit it.\n        root.finishedWork = null;\n        root.remainingExpirationTime = commitRoot(_finishedWork);\n      } else {\n        root.finishedWork = null;\n        _finishedWork = renderRoot(root, expirationTime);\n        if (_finishedWork !== null) {\n          // We've completed the root. Check the deadline one more time\n          // before committing.\n          if (!shouldYield()) {\n            // Still time left. Commit the root.\n            root.remainingExpirationTime = commitRoot(_finishedWork);\n          } else {\n            // There's no time left. Mark this root as complete. We'll come\n            // back and commit it later.\n            root.finishedWork = _finishedWork;\n          }\n        }\n      }\n    }\n\n    isRendering = false;\n  }\n\n  // When working on async work, the reconciler asks the renderer if it should\n  // yield execution. For DOM, we implement this with requestIdleCallback.\n  function shouldYield() {\n    if (deadline === null) {\n      return false;\n    }\n    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {\n      return false;\n    }\n    deadlineDidExpire = true;\n    return true;\n  }\n\n  // TODO: Not happy about this hook. Conceptually, renderRoot should return a\n  // tuple of (isReadyForCommit, didError, error)\n  function onUncaughtError(error) {\n    !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;\n    // Unschedule this root so we don't work on it again until there's\n    // another update.\n    nextFlushedRoot.remainingExpirationTime = NoWork;\n    if (!hasUnhandledError) {\n      hasUnhandledError = true;\n      unhandledError = error;\n    }\n  }\n\n  // TODO: Batching should be implemented at the renderer level, not inside\n  // the reconciler.\n  function batchedUpdates(fn, a) {\n    var previousIsBatchingUpdates = isBatchingUpdates;\n    isBatchingUpdates = true;\n    try {\n      return fn(a);\n    } finally {\n      isBatchingUpdates = previousIsBatchingUpdates;\n      if (!isBatchingUpdates && !isRendering) {\n        performWork(Sync, null);\n      }\n    }\n  }\n\n  // TODO: Batching should be implemented at the renderer level, not inside\n  // the reconciler.\n  function unbatchedUpdates(fn) {\n    if (isBatchingUpdates && !isUnbatchingUpdates) {\n      isUnbatchingUpdates = true;\n      try {\n        return fn();\n      } finally {\n        isUnbatchingUpdates = false;\n      }\n    }\n    return fn();\n  }\n\n  // TODO: Batching should be implemented at the renderer level, not within\n  // the reconciler.\n  function flushSync(fn) {\n    var previousIsBatchingUpdates = isBatchingUpdates;\n    isBatchingUpdates = true;\n    try {\n      return syncUpdates(fn);\n    } finally {\n      isBatchingUpdates = previousIsBatchingUpdates;\n      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;\n      performWork(Sync, null);\n    }\n  }\n\n  return {\n    computeAsyncExpiration: computeAsyncExpiration,\n    computeExpirationForFiber: computeExpirationForFiber,\n    scheduleWork: scheduleWork,\n    batchedUpdates: batchedUpdates,\n    unbatchedUpdates: unbatchedUpdates,\n    flushSync: flushSync,\n    deferredUpdates: deferredUpdates\n  };\n};\n\n{\n  var didWarnAboutNestedUpdates = false;\n}\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\n\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n  return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;\n}\n\nvar ReactFiberReconciler$1 = function (config) {\n  var getPublicInstance = config.getPublicInstance;\n\n  var _ReactFiberScheduler = ReactFiberScheduler(config),\n      computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,\n      computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,\n      scheduleWork = _ReactFiberScheduler.scheduleWork,\n      batchedUpdates = _ReactFiberScheduler.batchedUpdates,\n      unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,\n      flushSync = _ReactFiberScheduler.flushSync,\n      deferredUpdates = _ReactFiberScheduler.deferredUpdates;\n\n  function scheduleTopLevelUpdate(current, element, callback) {\n    {\n      if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {\n        didWarnAboutNestedUpdates = true;\n        warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');\n      }\n    }\n\n    callback = callback === undefined ? null : callback;\n    {\n      warning(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n    }\n\n    var expirationTime = void 0;\n    // Check if the top-level element is an async wrapper component. If so,\n    // treat updates to the root as async. This is a bit weird but lets us\n    // avoid a separate `renderAsync` API.\n    if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {\n      expirationTime = computeAsyncExpiration();\n    } else {\n      expirationTime = computeExpirationForFiber(current);\n    }\n\n    var update = {\n      expirationTime: expirationTime,\n      partialState: { element: element },\n      callback: callback,\n      isReplace: false,\n      isForced: false,\n      nextCallback: null,\n      next: null\n    };\n    insertUpdateIntoFiber(current, update);\n    scheduleWork(current, expirationTime);\n  }\n\n  function findHostInstance(fiber) {\n    var hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    return hostFiber.stateNode;\n  }\n\n  return {\n    createContainer: function (containerInfo, hydrate) {\n      return createFiberRoot(containerInfo, hydrate);\n    },\n    updateContainer: function (element, container, parentComponent, callback) {\n      // TODO: If this is a nested container, this won't be the root.\n      var current = container.current;\n\n      {\n        if (ReactFiberInstrumentation_1.debugTool) {\n          if (current.alternate === null) {\n            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);\n          } else if (element === null) {\n            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);\n          } else {\n            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);\n          }\n        }\n      }\n\n      var context = getContextForSubtree(parentComponent);\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n\n      scheduleTopLevelUpdate(current, element, callback);\n    },\n\n\n    batchedUpdates: batchedUpdates,\n\n    unbatchedUpdates: unbatchedUpdates,\n\n    deferredUpdates: deferredUpdates,\n\n    flushSync: flushSync,\n\n    getPublicRootInstance: function (container) {\n      var containerFiber = container.current;\n      if (!containerFiber.child) {\n        return null;\n      }\n      switch (containerFiber.child.tag) {\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n        default:\n          return containerFiber.child.stateNode;\n      }\n    },\n\n\n    findHostInstance: findHostInstance,\n\n    findHostInstanceWithNoPortals: function (fiber) {\n      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    },\n    injectIntoDevTools: function (devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n\n      return injectInternals(_assign({}, devToolsConfig, {\n        findHostInstanceByFiber: function (fiber) {\n          return findHostInstance(fiber);\n        },\n        findFiberByHostInstance: function (instance) {\n          if (!findFiberByHostInstance) {\n            // Might not be implemented by the renderer.\n            return null;\n          }\n          return findFiberByHostInstance(instance);\n        }\n      }));\n    }\n  };\n};\n\nvar ReactFiberReconciler$2 = Object.freeze({\n\tdefault: ReactFiberReconciler$1\n});\n\nvar ReactFiberReconciler$3 = ( ReactFiberReconciler$2 && ReactFiberReconciler$1 ) || ReactFiberReconciler$2;\n\n// TODO: bundle Flow types with the package.\n\n\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nvar reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion = '16.1.1';\n\n// a requestAnimationFrame, storing the time for the start of the frame, then\n// scheduling a postMessage which gets scheduled after paint. Within the\n// postMessage handler do as much work as possible until time + frame rate.\n// By separating the idle call into a separate event tick we ensure that\n// layout, paint and other browser work is counted against the available time.\n// The frame rate is dynamically adjusted.\n\n{\n  if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {\n    warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');\n  }\n}\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nvar now = void 0;\nif (hasNativePerformanceNow) {\n  now = function () {\n    return performance.now();\n  };\n} else {\n  now = function () {\n    return Date.now();\n  };\n}\n\n// TODO: There's no way to cancel, because Fiber doesn't atm.\nvar rIC = void 0;\n\nif (!ExecutionEnvironment.canUseDOM) {\n  rIC = function (frameCallback) {\n    setTimeout(function () {\n      frameCallback({\n        timeRemaining: function () {\n          return Infinity;\n        }\n      });\n    });\n    return 0;\n  };\n} else if (typeof requestIdleCallback !== 'function') {\n  // Polyfill requestIdleCallback.\n\n  var scheduledRICCallback = null;\n\n  var isIdleScheduled = false;\n  var isAnimationFrameScheduled = false;\n\n  var frameDeadline = 0;\n  // We start out assuming that we run at 30fps but then the heuristic tracking\n  // will adjust this value to a faster fps if we get more frequent animation\n  // frames.\n  var previousFrameTime = 33;\n  var activeFrameTime = 33;\n\n  var frameDeadlineObject;\n  if (hasNativePerformanceNow) {\n    frameDeadlineObject = {\n      timeRemaining: function () {\n        // We assume that if we have a performance timer that the rAF callback\n        // gets a performance timer value. Not sure if this is always true.\n        return frameDeadline - performance.now();\n      }\n    };\n  } else {\n    frameDeadlineObject = {\n      timeRemaining: function () {\n        // Fallback to Date.now()\n        return frameDeadline - Date.now();\n      }\n    };\n  }\n\n  // We use the postMessage trick to defer idle work until after the repaint.\n  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n  var idleTick = function (event) {\n    if (event.source !== window || event.data !== messageKey) {\n      return;\n    }\n    isIdleScheduled = false;\n    var callback = scheduledRICCallback;\n    scheduledRICCallback = null;\n    if (callback !== null) {\n      callback(frameDeadlineObject);\n    }\n  };\n  // Assumes that we have addEventListener in this environment. Might need\n  // something better for old IE.\n  window.addEventListener('message', idleTick, false);\n\n  var animationTick = function (rafTime) {\n    isAnimationFrameScheduled = false;\n    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n      if (nextFrameTime < 8) {\n        // Defensive coding. We don't support higher frame rates than 120hz.\n        // If we get lower than that, it is probably a bug.\n        nextFrameTime = 8;\n      }\n      // If one frame goes long, then the next one can be short to catch up.\n      // If two frames are short in a row, then that's an indication that we\n      // actually have a higher frame rate than what we're currently optimizing.\n      // We adjust our heuristic dynamically accordingly. For example, if we're\n      // running on 120hz display or 90hz VR display.\n      // Take the max of the two in case one of them was an anomaly due to\n      // missed frame deadlines.\n      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n    } else {\n      previousFrameTime = nextFrameTime;\n    }\n    frameDeadline = rafTime + activeFrameTime;\n    if (!isIdleScheduled) {\n      isIdleScheduled = true;\n      window.postMessage(messageKey, '*');\n    }\n  };\n\n  rIC = function (callback) {\n    // This assumes that we only schedule one callback at a time because that's\n    // how Fiber uses it.\n    scheduledRICCallback = callback;\n    if (!isAnimationFrameScheduled) {\n      // If rAF didn't already schedule one, we need to schedule a frame.\n      // TODO: If this rAF doesn't materialize because the browser throttles, we\n      // might want to still have setTimeout trigger rIC as a backup to ensure\n      // that we keep performing work.\n      isAnimationFrameScheduled = true;\n      requestAnimationFrame(animationTick);\n    }\n    return 0;\n  };\n} else {\n  rIC = requestIdleCallback;\n}\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarning$1 = lowPriorityWarning;\n\n// isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.\n// TODO: Find a better place for this.\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  {\n    warning(false, 'Invalid attribute name: `%s`', attributeName);\n  }\n  return false;\n}\n\n// shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.\n// TODO: Find a better place for this.\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\n\n\n\n\n\n/**\n * Get the value for a property on a node. Only used in DEV for SSR validation.\n * The \"expected\" argument is used as a hint of what the expected value is.\n * Some properties have multiple equivalent values.\n */\nfunction getValueForProperty(node, name, expected) {\n  {\n    var propertyInfo = getPropertyInfo(name);\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod || propertyInfo.mustUseProperty) {\n        return node[propertyInfo.propertyName];\n      } else {\n        var attributeName = propertyInfo.attributeName;\n\n        var stringValue = null;\n\n        if (propertyInfo.hasOverloadedBooleanValue) {\n          if (node.hasAttribute(attributeName)) {\n            var value = node.getAttribute(attributeName);\n            if (value === '') {\n              return true;\n            }\n            if (shouldIgnoreValue(propertyInfo, expected)) {\n              return value;\n            }\n            if (value === '' + expected) {\n              return expected;\n            }\n            return value;\n          }\n        } else if (node.hasAttribute(attributeName)) {\n          if (shouldIgnoreValue(propertyInfo, expected)) {\n            // We had an attribute but shouldn't have had one, so read it\n            // for the error message.\n            return node.getAttribute(attributeName);\n          }\n          if (propertyInfo.hasBooleanValue) {\n            // If this was a boolean, it doesn't matter what the value is\n            // the fact that we have it is the same as the expected.\n            return expected;\n          }\n          // Even if this property uses a namespace we use getAttribute\n          // because we assume its namespaced name is the same as our config.\n          // To use getAttributeNS we need the local name which we don't have\n          // in our config atm.\n          stringValue = node.getAttribute(attributeName);\n        }\n\n        if (shouldIgnoreValue(propertyInfo, expected)) {\n          return stringValue === null ? expected : stringValue;\n        } else if (stringValue === '' + expected) {\n          return expected;\n        } else {\n          return stringValue;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Get the value for a attribute on a node. Only used in DEV for SSR validation.\n * The third argument is used as a hint of what the expected value is. Some\n * attributes have multiple equivalent values.\n */\nfunction getValueForAttribute(node, name, expected) {\n  {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (!node.hasAttribute(name)) {\n      return expected === undefined ? undefined : null;\n    }\n    var value = node.getAttribute(name);\n    if (value === '' + expected) {\n      return expected;\n    }\n    return value;\n  }\n}\n\n/**\n * Sets the value for a property on a node.\n *\n * @param {DOMElement} node\n * @param {string} name\n * @param {*} value\n */\nfunction setValueForProperty(node, name, value) {\n  var propertyInfo = getPropertyInfo(name);\n\n  if (propertyInfo && shouldSetAttribute(name, value)) {\n    var mutationMethod = propertyInfo.mutationMethod;\n    if (mutationMethod) {\n      mutationMethod(node, value);\n    } else if (shouldIgnoreValue(propertyInfo, value)) {\n      deleteValueForProperty(node, name);\n      return;\n    } else if (propertyInfo.mustUseProperty) {\n      // Contrary to `setAttribute`, object properties are properly\n      // `toString`ed by IE8/9.\n      node[propertyInfo.propertyName] = value;\n    } else {\n      var attributeName = propertyInfo.attributeName;\n      var namespace = propertyInfo.attributeNamespace;\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      if (namespace) {\n        node.setAttributeNS(namespace, attributeName, '' + value);\n      } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        node.setAttribute(attributeName, '');\n      } else {\n        node.setAttribute(attributeName, '' + value);\n      }\n    }\n  } else {\n    setValueForAttribute(node, name, shouldSetAttribute(name, value) ? value : null);\n    return;\n  }\n\n  {\n    \n  }\n}\n\nfunction setValueForAttribute(node, name, value) {\n  if (!isAttributeNameSafe(name)) {\n    return;\n  }\n  if (value == null) {\n    node.removeAttribute(name);\n  } else {\n    node.setAttribute(name, '' + value);\n  }\n\n  {\n    \n  }\n}\n\n/**\n * Deletes an attributes from a node.\n *\n * @param {DOMElement} node\n * @param {string} name\n */\nfunction deleteValueForAttribute(node, name) {\n  node.removeAttribute(name);\n}\n\n/**\n * Deletes the value for a property on a node.\n *\n * @param {DOMElement} node\n * @param {string} name\n */\nfunction deleteValueForProperty(node, name) {\n  var propertyInfo = getPropertyInfo(name);\n  if (propertyInfo) {\n    var mutationMethod = propertyInfo.mutationMethod;\n    if (mutationMethod) {\n      mutationMethod(node, undefined);\n    } else if (propertyInfo.mustUseProperty) {\n      var propName = propertyInfo.propertyName;\n      if (propertyInfo.hasBooleanValue) {\n        node[propName] = false;\n      } else {\n        node[propName] = '';\n      }\n    } else {\n      node.removeAttribute(propertyInfo.attributeName);\n    }\n  } else {\n    node.removeAttribute(name);\n  }\n}\n\nvar ReactControlledValuePropTypes = {\n  checkPropTypes: null\n};\n\n{\n  var hasReadOnlyValue = {\n    button: true,\n    checkbox: true,\n    image: true,\n    hidden: true,\n    radio: true,\n    reset: true,\n    submit: true\n  };\n\n  var propTypes = {\n    value: function (props, propName, componentName) {\n      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n        return null;\n      }\n      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    },\n    checked: function (props, propName, componentName) {\n      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n        return null;\n      }\n      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  };\n\n  /**\n   * Provide a linked `value` attribute for controlled forms. You should not use\n   * this outside of the ReactDOM controlled form components.\n   */\n  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {\n    checkPropTypes(propTypes, props, 'prop', tagName, getStack);\n  };\n}\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nvar getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;\nvar getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;\n\nvar didWarnValueDefaultValue = false;\nvar didWarnCheckedDefaultChecked = false;\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\n\nfunction isControlled(props) {\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\nfunction getHostProps(element, props) {\n  var node = element;\n  var value = props.value;\n  var checked = props.checked;\n\n  var hostProps = _assign({\n    // Make sure we set .type before any other properties (setting .value\n    // before .type means .value is lost in IE11 and below)\n    type: undefined,\n    // Make sure we set .step before .value (setting .value before .step\n    // means .value is rounded on mount, based upon step precision)\n    step: undefined,\n    // Make sure we set .min & .max before .value (to ensure proper order\n    // in corner cases such as min or max deriving from value, e.g. Issue #7170)\n    min: undefined,\n    max: undefined\n  }, props, {\n    defaultChecked: undefined,\n    defaultValue: undefined,\n    value: value != null ? value : node._wrapperState.initialValue,\n    checked: checked != null ? checked : node._wrapperState.initialChecked\n  });\n\n  return hostProps;\n}\n\nfunction initWrapperState(element, props) {\n  {\n    ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum$3);\n\n    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n      warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);\n      didWarnCheckedDefaultChecked = true;\n    }\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);\n      didWarnValueDefaultValue = true;\n    }\n  }\n\n  var defaultValue = props.defaultValue;\n  var node = element;\n  node._wrapperState = {\n    initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n    initialValue: props.value != null ? props.value : defaultValue,\n    controlled: isControlled(props)\n  };\n}\n\nfunction updateWrapper(element, props) {\n  var node = element;\n  {\n    var controlled = isControlled(props);\n\n    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\n      warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());\n      didWarnUncontrolledToControlled = true;\n    }\n    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\n      warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());\n      didWarnControlledToUncontrolled = true;\n    }\n  }\n\n  var checked = props.checked;\n  if (checked != null) {\n    setValueForProperty(node, 'checked', checked || false);\n  }\n\n  var value = props.value;\n  if (value != null) {\n    if (value === 0 && node.value === '') {\n      node.value = '0';\n      // Note: IE9 reports a number inputs as 'text', so check props instead.\n    } else if (props.type === 'number') {\n      // Simulate `input.valueAsNumber`. IE9 does not support it\n      var valueAsNumber = parseFloat(node.value) || 0;\n\n      if (\n      // eslint-disable-next-line\n      value != valueAsNumber ||\n      // eslint-disable-next-line\n      value == valueAsNumber && node.value != value) {\n        // Cast `value` to a string to ensure the value is set correctly. While\n        // browsers typically do this as necessary, jsdom doesn't.\n        node.value = '' + value;\n      }\n    } else if (node.value !== '' + value) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      node.value = '' + value;\n    }\n  } else {\n    if (props.value == null && props.defaultValue != null) {\n      // In Chrome, assigning defaultValue to certain input types triggers input validation.\n      // For number inputs, the display value loses trailing decimal points. For email inputs,\n      // Chrome raises \"The specified value <x> is not a valid email address\".\n      //\n      // Here we check to see if the defaultValue has actually changed, avoiding these problems\n      // when the user is inputting text\n      //\n      // https://github.com/facebook/react/issues/7253\n      if (node.defaultValue !== '' + props.defaultValue) {\n        node.defaultValue = '' + props.defaultValue;\n      }\n    }\n    if (props.checked == null && props.defaultChecked != null) {\n      node.defaultChecked = !!props.defaultChecked;\n    }\n  }\n}\n\nfunction postMountWrapper(element, props) {\n  var node = element;\n\n  // Detach value from defaultValue. We won't do anything if we're working on\n  // submit or reset inputs as those values & defaultValues are linked. They\n  // are not resetable nodes so this operation doesn't matter and actually\n  // removes browser-default values (eg \"Submit Query\") when no value is\n  // provided.\n\n  switch (props.type) {\n    case 'submit':\n    case 'reset':\n      break;\n    case 'color':\n    case 'date':\n    case 'datetime':\n    case 'datetime-local':\n    case 'month':\n    case 'time':\n    case 'week':\n      // This fixes the no-show issue on iOS Safari and Android Chrome:\n      // https://github.com/facebook/react/issues/7233\n      node.value = '';\n      node.value = node.defaultValue;\n      break;\n    default:\n      node.value = node.value;\n      break;\n  }\n\n  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n  var name = node.name;\n  if (name !== '') {\n    node.name = '';\n  }\n  node.defaultChecked = !node.defaultChecked;\n  node.defaultChecked = !node.defaultChecked;\n  if (name !== '') {\n    node.name = name;\n  }\n}\n\nfunction restoreControlledState$1(element, props) {\n  var node = element;\n  updateWrapper(node, props);\n  updateNamedCousins(node, props);\n}\n\nfunction updateNamedCousins(rootNode, props) {\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form. It might not even be in the\n    // document. Let's just use the local `querySelectorAll` to ensure we don't\n    // miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);\n      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      updateWrapper(otherNode, otherProps);\n    }\n  }\n}\n\nfunction flattenChildren(children) {\n  var content = '';\n\n  // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n  // We can silently skip them because invalid DOM nesting warning\n  // catches these cases in Fiber.\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  // TODO (yungsters): Remove support for `selected` in <option>.\n  {\n    warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n  }\n}\n\nfunction postMountWrapper$1(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', props.value);\n  }\n}\n\nfunction getHostProps$1(element, props) {\n  var hostProps = _assign({ children: undefined }, props);\n\n  var content = flattenChildren(props.children);\n\n  if (content) {\n    hostProps.children = content;\n  }\n\n  return hostProps;\n}\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nvar getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;\nvar getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;\n\n\n{\n  var didWarnValueDefaultValue$1 = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerName$3();\n  if (ownerName) {\n    return '\\n\\nCheck the render method of `' + ownerName + '`.';\n  }\n  return '';\n}\n\nvar valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n */\nfunction checkSelectPropTypes(props) {\n  ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$4);\n\n  for (var i = 0; i < valuePropNames.length; i++) {\n    var propName = valuePropNames[i];\n    if (props[propName] == null) {\n      continue;\n    }\n    var isArray = Array.isArray(props[propName]);\n    if (props.multiple && !isArray) {\n      warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());\n    } else if (!props.multiple && isArray) {\n      warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());\n    }\n  }\n}\n\nfunction updateOptions(node, multiple, propValue, setDefaultSelected) {\n  var options = node.options;\n\n  if (multiple) {\n    var selectedValues = propValue;\n    var selectedValue = {};\n    for (var i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n    for (var _i = 0; _i < options.length; _i++) {\n      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);\n      if (options[_i].selected !== selected) {\n        options[_i].selected = selected;\n      }\n      if (selected && setDefaultSelected) {\n        options[_i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    var _selectedValue = '' + propValue;\n    var defaultSelected = null;\n    for (var _i2 = 0; _i2 < options.length; _i2++) {\n      if (options[_i2].value === _selectedValue) {\n        options[_i2].selected = true;\n        if (setDefaultSelected) {\n          options[_i2].defaultSelected = true;\n        }\n        return;\n      }\n      if (defaultSelected === null && !options[_i2].disabled) {\n        defaultSelected = options[_i2];\n      }\n    }\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\nfunction getHostProps$2(element, props) {\n  return _assign({}, props, {\n    value: undefined\n  });\n}\n\nfunction initWrapperState$1(element, props) {\n  var node = element;\n  {\n    checkSelectPropTypes(props);\n  }\n\n  var value = props.value;\n  node._wrapperState = {\n    initialValue: value != null ? value : props.defaultValue,\n    wasMultiple: !!props.multiple\n  };\n\n  {\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {\n      warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');\n      didWarnValueDefaultValue$1 = true;\n    }\n  }\n}\n\nfunction postMountWrapper$2(element, props) {\n  var node = element;\n  node.multiple = !!props.multiple;\n  var value = props.value;\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (props.defaultValue != null) {\n    updateOptions(node, !!props.multiple, props.defaultValue, true);\n  }\n}\n\nfunction postUpdateWrapper(element, props) {\n  var node = element;\n  // After the initial mount, we control selected-ness manually so don't pass\n  // this value down\n  node._wrapperState.initialValue = undefined;\n\n  var wasMultiple = node._wrapperState.wasMultiple;\n  node._wrapperState.wasMultiple = !!props.multiple;\n\n  var value = props.value;\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (wasMultiple !== !!props.multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (props.defaultValue != null) {\n      updateOptions(node, !!props.multiple, props.defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);\n    }\n  }\n}\n\nfunction restoreControlledState$2(element, props) {\n  var node = element;\n  var value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nvar getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;\n\nvar didWarnValDefaultVal = false;\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\nfunction getHostProps$3(element, props) {\n  var node = element;\n  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;\n\n  // Always set children to the same thing. In IE9, the selection range will\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\n  // to only set the value if/when the value differs from the node value (which would\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\n  // solution. The value can be a boolean or object so that's why it's forced\n  // to be a string.\n  var hostProps = _assign({}, props, {\n    value: undefined,\n    defaultValue: undefined,\n    children: '' + node._wrapperState.initialValue\n  });\n\n  return hostProps;\n}\n\nfunction initWrapperState$2(element, props) {\n  var node = element;\n  {\n    ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$5);\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n      warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');\n      didWarnValDefaultVal = true;\n    }\n  }\n\n  var value = props.value;\n  var initialValue = value;\n\n  // Only bother fetching default value if we're going to use it\n  if (value == null) {\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      {\n        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n      }\n      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    initialValue = defaultValue;\n  }\n\n  node._wrapperState = {\n    initialValue: '' + initialValue\n  };\n}\n\nfunction updateWrapper$1(element, props) {\n  var node = element;\n  var value = props.value;\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    var newValue = '' + value;\n\n    // To avoid side effects (such as losing text selection), only set value if changed\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n    if (props.defaultValue == null) {\n      node.defaultValue = newValue;\n    }\n  }\n  if (props.defaultValue != null) {\n    node.defaultValue = props.defaultValue;\n  }\n}\n\nfunction postMountWrapper$3(element, props) {\n  var node = element;\n  // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n  var textContent = node.textContent;\n\n  // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n  if (textContent === node._wrapperState.initialValue) {\n    node.value = textContent;\n  }\n}\n\nfunction restoreControlledState$3(element, props) {\n  // DOM component is still mounted; update\n  updateWrapper$1(element, props);\n}\n\nvar HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';\nvar MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nvar Namespaces = {\n  html: HTML_NAMESPACE$1,\n  mathml: MATH_NAMESPACE,\n  svg: SVG_NAMESPACE\n};\n\n// Assumes there is no parent namespace.\nfunction getIntrinsicNamespace(type) {\n  switch (type) {\n    case 'svg':\n      return SVG_NAMESPACE;\n    case 'math':\n      return MATH_NAMESPACE;\n    default:\n      return HTML_NAMESPACE$1;\n  }\n}\n\nfunction getChildNamespace(parentNamespace, type) {\n  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {\n    // No (or default) parent namespace: potential entry point.\n    return getIntrinsicNamespace(type);\n  }\n  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HTML_NAMESPACE$1;\n  }\n  // By default, pass namespace below.\n  return parentNamespace;\n}\n\n/* globals MSApp */\n\n/**\n * Create a function which has 'unsafe' privileges (required by windows8 apps)\n */\nvar createMicrosoftUnsafeLocalFunction = function (func) {\n  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n    return function (arg0, arg1, arg2, arg3) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return func(arg0, arg1, arg2, arg3);\n      });\n    };\n  } else {\n    return func;\n  }\n};\n\n// SVG temp container for IE lacking innerHTML\nvar reusableSVGContainer = void 0;\n\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  // IE does not have innerHTML for SVG nodes, so instead we inject the\n  // new markup in a temp node and then move the child nodes across into\n  // the target node\n\n  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';\n    var svgNode = reusableSVGContainer.firstChild;\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    while (svgNode.firstChild) {\n      node.appendChild(svgNode.firstChild);\n    }\n  } else {\n    node.innerHTML = html;\n  }\n});\n\n// code copied and modified from escape-html\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escape = '&quot;';\n        break;\n      case 38:\n        // &\n        escape = '&amp;';\n        break;\n      case 39:\n        // '\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'\n        break;\n      case 60:\n        // <\n        escape = '&lt;';\n        break;\n      case 62:\n        // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n}\n// end code copied and modified from escape-html\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextContentForBrowser(text) {\n  if (typeof text === 'boolean' || typeof text === 'number') {\n    // this shortcircuit helps perf for types that we know will never have\n    // special characters, especially given that this function is used often\n    // for numeric dom ids.\n    return '' + text;\n  }\n  return escapeHtml(text);\n}\n\n/**\n * Set the textContent property of a node, ensuring that whitespace is preserved\n * even in IE8. innerText is a poor substitute for textContent and, among many\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves\n * as it should.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nvar setTextContent = function (node, text) {\n  if (text) {\n    var firstChild = node.firstChild;\n\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n  node.textContent = text;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  if (!('textContent' in document.documentElement)) {\n    setTextContent = function (node, text) {\n      if (node.nodeType === TEXT_NODE) {\n        node.nodeValue = text;\n        return;\n      }\n      setInnerHTML(node, escapeTextContentForBrowser(text));\n    };\n  }\n}\n\nvar setTextContent$1 = setTextContent;\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nvar warnValidStyle = emptyFunction$1;\n\n{\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n  // style values shouldn't contain a semicolon\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var warnHyphenatedStyleName = function (name, getStack) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());\n  };\n\n  var warnBadVendoredStyleName = function (name, getStack) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());\n  };\n\n  var warnStyleValueWithSemicolon = function (name, value, getStack) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    warning(false, \"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());\n  };\n\n  var warnStyleValueIsNaN = function (name, value, getStack) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());\n  };\n\n  var warnStyleValueIsInfinity = function (name, value, getStack) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());\n  };\n\n  warnValidStyle = function (name, value, getStack) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name, getStack);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name, getStack);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value, getStack);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value, getStack);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value, getStack);\n      }\n    }\n  };\n}\n\nvar warnValidStyle$1 = warnValidStyle;\n\n/**\n * Operations for dealing with CSS properties.\n */\n\n/**\n * This creates a string that is expected to be equivalent to the style\n * attribute generated by server-side rendering. It by-passes warnings and\n * security checks so it's not safe to use this value for anything other than\n * comparison. It is only used in DEV for SSR validation.\n */\nfunction createDangerousStringForStyles(styles) {\n  {\n    var serialized = '';\n    var delimiter = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (styleValue != null) {\n        var isCustomProperty = styleName.indexOf('--') === 0;\n        serialized += delimiter + hyphenateStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);\n\n        delimiter = ';';\n      }\n    }\n    return serialized || null;\n  }\n}\n\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\nfunction setValueForStyles(node, styles, getStack) {\n  var style = node.style;\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    {\n      if (!isCustomProperty) {\n        warnValidStyle$1(styleName, styles[styleName], getStack);\n      }\n    }\n    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n    if (isCustomProperty) {\n      style.setProperty(styleName, styleValue);\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special-case tags.\n\nvar omittedCloseTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true\n};\n\n// For HTML, certain tags cannot have children. This has the same purpose as\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = _assign({\n  menuitem: true\n}, omittedCloseTags);\n\nvar HTML$1 = '__html';\n\nfunction assertValidProps(tag, props, getStack) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  if (voidElementTags[tag]) {\n    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;\n  }\n  if (props.dangerouslySetInnerHTML != null) {\n    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;\n    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;\n  }\n  {\n    warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());\n  }\n  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \\'em\\'}} when using JSX.%s', getStack()) : void 0;\n}\n\nfunction isCustomComponent(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return typeof props.is === 'string';\n  }\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this whitelist too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n    default:\n      return true;\n  }\n}\n\nvar ariaProperties = {\n  'aria-current': 0, // state\n  'aria-details': 0,\n  'aria-disabled': 0, // state\n  'aria-hidden': 0, // state\n  'aria-invalid': 0, // state\n  'aria-keyshortcuts': 0,\n  'aria-label': 0,\n  'aria-roledescription': 0,\n  // Widget Attributes\n  'aria-autocomplete': 0,\n  'aria-checked': 0,\n  'aria-expanded': 0,\n  'aria-haspopup': 0,\n  'aria-level': 0,\n  'aria-modal': 0,\n  'aria-multiline': 0,\n  'aria-multiselectable': 0,\n  'aria-orientation': 0,\n  'aria-placeholder': 0,\n  'aria-pressed': 0,\n  'aria-readonly': 0,\n  'aria-required': 0,\n  'aria-selected': 0,\n  'aria-sort': 0,\n  'aria-valuemax': 0,\n  'aria-valuemin': 0,\n  'aria-valuenow': 0,\n  'aria-valuetext': 0,\n  // Live Region Attributes\n  'aria-atomic': 0,\n  'aria-busy': 0,\n  'aria-live': 0,\n  'aria-relevant': 0,\n  // Drag-and-Drop Attributes\n  'aria-dropeffect': 0,\n  'aria-grabbed': 0,\n  // Relationship Attributes\n  'aria-activedescendant': 0,\n  'aria-colcount': 0,\n  'aria-colindex': 0,\n  'aria-colspan': 0,\n  'aria-controls': 0,\n  'aria-describedby': 0,\n  'aria-errormessage': 0,\n  'aria-flowto': 0,\n  'aria-labelledby': 0,\n  'aria-owns': 0,\n  'aria-posinset': 0,\n  'aria-rowcount': 0,\n  'aria-rowindex': 0,\n  'aria-rowspan': 0,\n  'aria-setsize': 0\n};\n\nvar warnedProperties = {};\nvar rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getStackAddendum() {\n  var stack = ReactDebugCurrentFrame.getStackAddendum();\n  return stack != null ? stack : '';\n}\n\nfunction validateProperty(tagName, name) {\n  if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n    return true;\n  }\n\n  if (rARIACamel.test(name)) {\n    var ariaName = 'aria-' + name.slice(4).toLowerCase();\n    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;\n\n    // If this is an aria-* attribute, but is not listed in the known DOM\n    // DOM properties, then it is an invalid aria-* attribute.\n    if (correctName == null) {\n      warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n    // aria-* attributes should be lowercase; suggest the lowercase version.\n    if (name !== correctName) {\n      warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n  }\n\n  if (rARIA.test(name)) {\n    var lowerCasedName = name.toLowerCase();\n    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;\n\n    // If this is an aria-* attribute, but is not listed in the known DOM\n    // DOM properties, then it is an invalid aria-* attribute.\n    if (standardName == null) {\n      warnedProperties[name] = true;\n      return false;\n    }\n    // aria-* attributes should be lowercase; suggest the lowercase version.\n    if (name !== standardName) {\n      warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n  }\n\n  return true;\n}\n\nfunction warnInvalidARIAProps(type, props) {\n  var invalidProps = [];\n\n  for (var key in props) {\n    var isValid = validateProperty(type, key);\n    if (!isValid) {\n      invalidProps.push(key);\n    }\n  }\n\n  var unknownPropString = invalidProps.map(function (prop) {\n    return '`' + prop + '`';\n  }).join(', ');\n\n  if (invalidProps.length === 1) {\n    warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());\n  } else if (invalidProps.length > 1) {\n    warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());\n  }\n}\n\nfunction validateProperties(type, props) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n  warnInvalidARIAProps(type, props);\n}\n\nvar didWarnValueNull = false;\n\nfunction getStackAddendum$1() {\n  var stack = ReactDebugCurrentFrame.getStackAddendum();\n  return stack != null ? stack : '';\n}\n\nfunction validateProperties$1(type, props) {\n  if (type !== 'input' && type !== 'textarea' && type !== 'select') {\n    return;\n  }\n\n  if (props != null && props.value === null && !didWarnValueNull) {\n    didWarnValueNull = true;\n    if (type === 'select' && props.multiple) {\n      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());\n    } else {\n      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());\n    }\n  }\n}\n\n// When adding attributes to the HTML or SVG whitelist, be sure to\n// also add them to this module to ensure casing and incorrect name\n// warnings.\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  'class': 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  'default': 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  'for': 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  'in': 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  'typeof': 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nfunction getStackAddendum$2() {\n  var stack = ReactDebugCurrentFrame.getStackAddendum();\n  return stack != null ? stack : '';\n}\n\n{\n  var warnedProperties$1 = {};\n  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n  var EVENT_NAME_REGEX = /^on[A-Z]/;\n  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\n  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\n  var validateProperty$1 = function (tagName, name, value) {\n    if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n      return true;\n    }\n\n    if (registrationNameModules.hasOwnProperty(name)) {\n      return true;\n    }\n\n    if (plugins.length === 0 && EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we might be in a server environment.\n      // Don't check events in this case.\n      return true;\n    }\n\n    var lowerCasedName = name.toLowerCase();\n    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n    if (registrationName != null) {\n      warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName.indexOf('on') === 0 && lowerCasedName.length > 2) {\n      warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    // Let the ARIA attribute hook validate ARIA attributes\n    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    var isReserved = isReservedProp(name);\n\n    // Known attributes should match the casing specified in the property config.\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      var standardName = possibleStandardNames[lowerCasedName];\n      if (standardName !== name) {\n        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'boolean' && !shouldAttributeAcceptBooleanValue(name)) {\n      if (value) {\n        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());\n      } else {\n        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());\n      }\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    // Now that we've validated casing, do not validate\n    // data types for reserved props\n    if (isReserved) {\n      return true;\n    }\n\n    // Warn when a known attribute is a bad type\n    if (!shouldSetAttribute(name, value)) {\n      warnedProperties$1[name] = true;\n      return false;\n    }\n\n    return true;\n  };\n}\n\nvar warnUnknownProperties = function (type, props) {\n  var unknownProps = [];\n  for (var key in props) {\n    var isValid = validateProperty$1(type, key, props[key]);\n    if (!isValid) {\n      unknownProps.push(key);\n    }\n  }\n\n  var unknownPropString = unknownProps.map(function (prop) {\n    return '`' + prop + '`';\n  }).join(', ');\n  if (unknownProps.length === 1) {\n    warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());\n  } else if (unknownProps.length > 1) {\n    warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());\n  }\n};\n\nfunction validateProperties$2(type, props) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n  warnUnknownProperties(type, props);\n}\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nvar getCurrentFiberOwnerName$1 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;\nvar getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;\n\nvar didWarnInvalidHydration = false;\nvar didWarnShadyDOM = false;\n\nvar DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';\nvar SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';\nvar SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';\nvar AUTOFOCUS = 'autoFocus';\nvar CHILDREN = 'children';\nvar STYLE = 'style';\nvar HTML = '__html';\n\nvar HTML_NAMESPACE = Namespaces.html;\n\n\nvar getStack = emptyFunction$1.thatReturns('');\n\n{\n  getStack = getCurrentFiberStackAddendum$2;\n\n  var warnedUnknownTags = {\n    // Chrome is the only major browser not shipping <time>. But as of July\n    // 2017 it intends to ship it due to widespread usage. We intentionally\n    // *don't* warn for <time> even if it's unrecognized by Chrome because\n    // it soon will be, and many apps have been using it anyway.\n    time: true,\n    // There are working polyfills for <dialog>. Let people use it.\n    dialog: true\n  };\n\n  var validatePropertiesInDevelopment = function (type, props) {\n    validateProperties(type, props);\n    validateProperties$1(type, props);\n    validateProperties$2(type, props);\n  };\n\n  // HTML parsing normalizes CR and CRLF to LF.\n  // It also can turn \\u0000 into \\uFFFD inside attributes.\n  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\n  // If we have a mismatch, it might be caused by that.\n  // We will still patch up in this case but not fire the warning.\n  var NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g;\n  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\n\n  var normalizeMarkupForTextOrAttribute = function (markup) {\n    var markupString = typeof markup === 'string' ? markup : '' + markup;\n    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\n  };\n\n  var warnForTextDifference = function (serverText, clientText) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\n    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\n    if (normalizedServerText === normalizedClientText) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    warning(false, 'Text content did not match. Server: \"%s\" Client: \"%s\"', normalizedServerText, normalizedClientText);\n  };\n\n  var warnForPropDifference = function (propName, serverValue, clientValue) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);\n    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);\n    if (normalizedServerValue === normalizedClientValue) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));\n  };\n\n  var warnForExtraAttributes = function (attributeNames) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    var names = [];\n    attributeNames.forEach(function (name) {\n      names.push(name);\n    });\n    warning(false, 'Extra attributes from the server: %s', names);\n  };\n\n  var warnForInvalidEventListener = function (registrationName, listener) {\n    if (listener === false) {\n      warning(false, 'Expected `%s` listener to be a function, instead got `false`.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());\n    } else {\n      warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());\n    }\n  };\n\n  // Parse the HTML and read it back to normalize the HTML string so that it\n  // can be used for comparison.\n  var normalizeHTML = function (parent, html) {\n    // We could have created a separate document here to avoid\n    // re-initializing custom elements if they exist. But this breaks\n    // how <noscript> is being handled. So we use the same document.\n    // See the discussion in https://github.com/facebook/react/pull/11157.\n    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);\n    testElement.innerHTML = html;\n    return testElement.innerHTML;\n  };\n}\n\nfunction ensureListeningTo(rootContainerElement, registrationName) {\n  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;\n  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;\n  listenTo(registrationName, doc);\n}\n\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n\n// There are so many media events, it makes sense to just\n// maintain a list rather than create a `trapBubbledEvent` for each\nvar mediaEvents = {\n  topAbort: 'abort',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTimeUpdate: 'timeupdate',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting'\n};\n\nfunction trapClickOnNonInteractiveElement(node) {\n  // Mobile Safari does not fire properly bubble click events on\n  // non-interactive elements, which means delegated click listeners do not\n  // fire. The workaround for this bug involves attaching an empty click\n  // listener on the target node.\n  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n  // Just set it using the onclick property so that we don't have to manage any\n  // bookkeeping for it. Not sure if we need to clear it when the listener is\n  // removed.\n  // TODO: Only do this for the relevant Safaris maybe?\n  node.onclick = emptyFunction$1;\n}\n\nfunction setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {\n  for (var propKey in nextProps) {\n    if (!nextProps.hasOwnProperty(propKey)) {\n      continue;\n    }\n    var nextProp = nextProps[propKey];\n    if (propKey === STYLE) {\n      {\n        if (nextProp) {\n          // Freeze the next style object so that we can assume it won't be\n          // mutated. We have already warned for this in the past.\n          Object.freeze(nextProp);\n        }\n      }\n      // Relies on `updateStylesByID` not mutating `styleUpdates`.\n      setValueForStyles(domElement, nextProp, getStack);\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      var nextHtml = nextProp ? nextProp[HTML] : undefined;\n      if (nextHtml != null) {\n        setInnerHTML(domElement, nextHtml);\n      }\n    } else if (propKey === CHILDREN) {\n      if (typeof nextProp === 'string') {\n        // Avoid setting initial textContent when the text is empty. In IE11 setting\n        // textContent on a <textarea> will cause the placeholder to not\n        // show within the <textarea> until it has been focused and blurred again.\n        // https://github.com/facebook/react/issues/6731#issuecomment-254874553\n        var canSetTextContent = tag !== 'textarea' || nextProp !== '';\n        if (canSetTextContent) {\n          setTextContent$1(domElement, nextProp);\n        }\n      } else if (typeof nextProp === 'number') {\n        setTextContent$1(domElement, '' + nextProp);\n      }\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {\n      // Noop\n    } else if (propKey === AUTOFOCUS) {\n      // We polyfill it separately on the client during commit.\n      // We blacklist it here rather than in the property list because we emit it in SSR.\n    } else if (registrationNameModules.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        if (true && typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n        ensureListeningTo(rootContainerElement, propKey);\n      }\n    } else if (isCustomComponentTag) {\n      setValueForAttribute(domElement, propKey, nextProp);\n    } else if (nextProp != null) {\n      // If we're updating to null or undefined, we should remove the property\n      // from the DOM node instead of inadvertently setting to a string. This\n      // brings us in line with the same behavior we have on initial render.\n      setValueForProperty(domElement, propKey, nextProp);\n    }\n  }\n}\n\nfunction updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {\n  // TODO: Handle wasCustomComponentTag\n  for (var i = 0; i < updatePayload.length; i += 2) {\n    var propKey = updatePayload[i];\n    var propValue = updatePayload[i + 1];\n    if (propKey === STYLE) {\n      setValueForStyles(domElement, propValue, getStack);\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      setInnerHTML(domElement, propValue);\n    } else if (propKey === CHILDREN) {\n      setTextContent$1(domElement, propValue);\n    } else if (isCustomComponentTag) {\n      if (propValue != null) {\n        setValueForAttribute(domElement, propKey, propValue);\n      } else {\n        deleteValueForAttribute(domElement, propKey);\n      }\n    } else if (propValue != null) {\n      setValueForProperty(domElement, propKey, propValue);\n    } else {\n      // If we're updating to null or undefined, we should remove the property\n      // from the DOM node instead of inadvertently setting to a string. This\n      // brings us in line with the same behavior we have on initial render.\n      deleteValueForProperty(domElement, propKey);\n    }\n  }\n}\n\nfunction createElement$1(type, props, rootContainerElement, parentNamespace) {\n  // We create tags in the namespace of their parent container, except HTML\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);\n  var domElement;\n  var namespaceURI = parentNamespace;\n  if (namespaceURI === HTML_NAMESPACE) {\n    namespaceURI = getIntrinsicNamespace(type);\n  }\n  if (namespaceURI === HTML_NAMESPACE) {\n    {\n      var isCustomComponentTag = isCustomComponent(type, props);\n      // Should this check be gated by parent namespace? Not sure we want to\n      // allow <SVG> or <mATH>.\n      warning(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);\n    }\n\n    if (type === 'script') {\n      // Create the script via .innerHTML so its \"parser-inserted\" flag is\n      // set to true and it does not execute\n      var div = ownerDocument.createElement('div');\n      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n      // This is guaranteed to yield a script element.\n      var firstChild = div.firstChild;\n      domElement = div.removeChild(firstChild);\n    } else if (typeof props.is === 'string') {\n      // $FlowIssue `createElement` should be updated for Web Components\n      domElement = ownerDocument.createElement(type, { is: props.is });\n    } else {\n      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n      // See discussion in https://github.com/facebook/react/pull/6896\n      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n      domElement = ownerDocument.createElement(type);\n    }\n  } else {\n    domElement = ownerDocument.createElementNS(namespaceURI, type);\n  }\n\n  {\n    if (namespaceURI === HTML_NAMESPACE) {\n      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {\n        warnedUnknownTags[type] = true;\n        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\n      }\n    }\n  }\n\n  return domElement;\n}\n\nfunction createTextNode$1(text, rootContainerElement) {\n  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);\n}\n\nfunction setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {\n  var isCustomComponentTag = isCustomComponent(tag, rawProps);\n  {\n    validatePropertiesInDevelopment(tag, rawProps);\n    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {\n      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');\n      didWarnShadyDOM = true;\n    }\n  }\n\n  // TODO: Make sure that we check isMounted before firing any of these events.\n  var props;\n  switch (tag) {\n    case 'iframe':\n    case 'object':\n      trapBubbledEvent('topLoad', 'load', domElement);\n      props = rawProps;\n      break;\n    case 'video':\n    case 'audio':\n      // Create listener for each media event\n      for (var event in mediaEvents) {\n        if (mediaEvents.hasOwnProperty(event)) {\n          trapBubbledEvent(event, mediaEvents[event], domElement);\n        }\n      }\n      props = rawProps;\n      break;\n    case 'source':\n      trapBubbledEvent('topError', 'error', domElement);\n      props = rawProps;\n      break;\n    case 'img':\n    case 'image':\n      trapBubbledEvent('topError', 'error', domElement);\n      trapBubbledEvent('topLoad', 'load', domElement);\n      props = rawProps;\n      break;\n    case 'form':\n      trapBubbledEvent('topReset', 'reset', domElement);\n      trapBubbledEvent('topSubmit', 'submit', domElement);\n      props = rawProps;\n      break;\n    case 'details':\n      trapBubbledEvent('topToggle', 'toggle', domElement);\n      props = rawProps;\n      break;\n    case 'input':\n      initWrapperState(domElement, rawProps);\n      props = getHostProps(domElement, rawProps);\n      trapBubbledEvent('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'option':\n      validateProps(domElement, rawProps);\n      props = getHostProps$1(domElement, rawProps);\n      break;\n    case 'select':\n      initWrapperState$1(domElement, rawProps);\n      props = getHostProps$2(domElement, rawProps);\n      trapBubbledEvent('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'textarea':\n      initWrapperState$2(domElement, rawProps);\n      props = getHostProps$3(domElement, rawProps);\n      trapBubbledEvent('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    default:\n      props = rawProps;\n  }\n\n  assertValidProps(tag, props, getStack);\n\n  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);\n\n  switch (tag) {\n    case 'input':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper(domElement, rawProps);\n      break;\n    case 'textarea':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper$3(domElement, rawProps);\n      break;\n    case 'option':\n      postMountWrapper$1(domElement, rawProps);\n      break;\n    case 'select':\n      postMountWrapper$2(domElement, rawProps);\n      break;\n    default:\n      if (typeof props.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n      break;\n  }\n}\n\n// Calculate the diff between the two objects.\nfunction diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {\n  {\n    validatePropertiesInDevelopment(tag, nextRawProps);\n  }\n\n  var updatePayload = null;\n\n  var lastProps;\n  var nextProps;\n  switch (tag) {\n    case 'input':\n      lastProps = getHostProps(domElement, lastRawProps);\n      nextProps = getHostProps(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    case 'option':\n      lastProps = getHostProps$1(domElement, lastRawProps);\n      nextProps = getHostProps$1(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    case 'select':\n      lastProps = getHostProps$2(domElement, lastRawProps);\n      nextProps = getHostProps$2(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    case 'textarea':\n      lastProps = getHostProps$3(domElement, lastRawProps);\n      nextProps = getHostProps$3(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    default:\n      lastProps = lastRawProps;\n      nextProps = nextRawProps;\n      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n      break;\n  }\n\n  assertValidProps(tag, nextProps, getStack);\n\n  var propKey;\n  var styleName;\n  var styleUpdates = null;\n  for (propKey in lastProps) {\n    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {\n      continue;\n    }\n    if (propKey === STYLE) {\n      var lastStyle = lastProps[propKey];\n      for (styleName in lastStyle) {\n        if (lastStyle.hasOwnProperty(styleName)) {\n          if (!styleUpdates) {\n            styleUpdates = {};\n          }\n          styleUpdates[styleName] = '';\n        }\n      }\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {\n      // Noop. This is handled by the clear text mechanism.\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {\n      // Noop\n    } else if (propKey === AUTOFOCUS) {\n      // Noop. It doesn't work on updates anyway.\n    } else if (registrationNameModules.hasOwnProperty(propKey)) {\n      // This is a special case. If any listener updates we need to ensure\n      // that the \"current\" fiber pointer gets updated so we need a commit\n      // to update this element.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n    } else {\n      // For all other deleted properties we add it to the queue. We use\n      // the whitelist in the commit phase instead.\n      (updatePayload = updatePayload || []).push(propKey, null);\n    }\n  }\n  for (propKey in nextProps) {\n    var nextProp = nextProps[propKey];\n    var lastProp = lastProps != null ? lastProps[propKey] : undefined;\n    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\n      continue;\n    }\n    if (propKey === STYLE) {\n      {\n        if (nextProp) {\n          // Freeze the next style object so that we can assume it won't be\n          // mutated. We have already warned for this in the past.\n          Object.freeze(nextProp);\n        }\n      }\n      if (lastProp) {\n        // Unset styles on `lastProp` but not on `nextProp`.\n        for (styleName in lastProp) {\n          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n            if (!styleUpdates) {\n              styleUpdates = {};\n            }\n            styleUpdates[styleName] = '';\n          }\n        }\n        // Update styles that changed since `lastProp`.\n        for (styleName in nextProp) {\n          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n            if (!styleUpdates) {\n              styleUpdates = {};\n            }\n            styleUpdates[styleName] = nextProp[styleName];\n          }\n        }\n      } else {\n        // Relies on `updateStylesByID` not mutating `styleUpdates`.\n        if (!styleUpdates) {\n          if (!updatePayload) {\n            updatePayload = [];\n          }\n          updatePayload.push(propKey, styleUpdates);\n        }\n        styleUpdates = nextProp;\n      }\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      var nextHtml = nextProp ? nextProp[HTML] : undefined;\n      var lastHtml = lastProp ? lastProp[HTML] : undefined;\n      if (nextHtml != null) {\n        if (lastHtml !== nextHtml) {\n          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);\n        }\n      } else {\n        // TODO: It might be too late to clear this if we have children\n        // inserted already.\n      }\n    } else if (propKey === CHILDREN) {\n      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {\n        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);\n      }\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {\n      // Noop\n    } else if (registrationNameModules.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        // We eagerly listen to this even though we haven't committed yet.\n        if (true && typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n        ensureListeningTo(rootContainerElement, propKey);\n      }\n      if (!updatePayload && lastProp !== nextProp) {\n        // This is a special case. If any listener updates we need to ensure\n        // that the \"current\" props pointer gets updated so we need a commit\n        // to update this element.\n        updatePayload = [];\n      }\n    } else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the whitelist during the commit.\n      (updatePayload = updatePayload || []).push(propKey, nextProp);\n    }\n  }\n  if (styleUpdates) {\n    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);\n  }\n  return updatePayload;\n}\n\n// Apply the diff.\nfunction updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {\n  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);\n  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);\n  // Apply the diff.\n  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);\n\n  // TODO: Ensure that an update gets scheduled if any of the special props\n  // changed.\n  switch (tag) {\n    case 'input':\n      // Update the wrapper around inputs *after* updating props. This has to\n      // happen after `updateDOMProperties`. Otherwise HTML5 input validations\n      // raise warnings and prevent the new value from being assigned.\n      updateWrapper(domElement, nextRawProps);\n\n      // We also check that we haven't missed a value update, such as a\n      // Radio group shifting the checked value to another named radio input.\n      updateValueIfChanged(domElement);\n      break;\n    case 'textarea':\n      updateWrapper$1(domElement, nextRawProps);\n      break;\n    case 'select':\n      // <select> value update needs to occur after <option> children\n      // reconciliation\n      postUpdateWrapper(domElement, nextRawProps);\n      break;\n  }\n}\n\nfunction diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {\n  {\n    var suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;\n    var isCustomComponentTag = isCustomComponent(tag, rawProps);\n    validatePropertiesInDevelopment(tag, rawProps);\n    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {\n      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');\n      didWarnShadyDOM = true;\n    }\n  }\n\n  // TODO: Make sure that we check isMounted before firing any of these events.\n  switch (tag) {\n    case 'iframe':\n    case 'object':\n      trapBubbledEvent('topLoad', 'load', domElement);\n      break;\n    case 'video':\n    case 'audio':\n      // Create listener for each media event\n      for (var event in mediaEvents) {\n        if (mediaEvents.hasOwnProperty(event)) {\n          trapBubbledEvent(event, mediaEvents[event], domElement);\n        }\n      }\n      break;\n    case 'source':\n      trapBubbledEvent('topError', 'error', domElement);\n      break;\n    case 'img':\n    case 'image':\n      trapBubbledEvent('topError', 'error', domElement);\n      trapBubbledEvent('topLoad', 'load', domElement);\n      break;\n    case 'form':\n      trapBubbledEvent('topReset', 'reset', domElement);\n      trapBubbledEvent('topSubmit', 'submit', domElement);\n      break;\n    case 'details':\n      trapBubbledEvent('topToggle', 'toggle', domElement);\n      break;\n    case 'input':\n      initWrapperState(domElement, rawProps);\n      trapBubbledEvent('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'option':\n      validateProps(domElement, rawProps);\n      break;\n    case 'select':\n      initWrapperState$1(domElement, rawProps);\n      trapBubbledEvent('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'textarea':\n      initWrapperState$2(domElement, rawProps);\n      trapBubbledEvent('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n  }\n\n  assertValidProps(tag, rawProps, getStack);\n\n  {\n    var extraAttributeNames = new Set();\n    var attributes = domElement.attributes;\n    for (var i = 0; i < attributes.length; i++) {\n      var name = attributes[i].name.toLowerCase();\n      switch (name) {\n        // Built-in SSR attribute is whitelisted\n        case 'data-reactroot':\n          break;\n        // Controlled attributes are not validated\n        // TODO: Only ignore them on controlled tags.\n        case 'value':\n          break;\n        case 'checked':\n          break;\n        case 'selected':\n          break;\n        default:\n          // Intentionally use the original name.\n          // See discussion in https://github.com/facebook/react/pull/10676.\n          extraAttributeNames.add(attributes[i].name);\n      }\n    }\n  }\n\n  var updatePayload = null;\n  for (var propKey in rawProps) {\n    if (!rawProps.hasOwnProperty(propKey)) {\n      continue;\n    }\n    var nextProp = rawProps[propKey];\n    if (propKey === CHILDREN) {\n      // For text content children we compare against textContent. This\n      // might match additional HTML that is hidden when we read it using\n      // textContent. E.g. \"foo\" will match \"f<span>oo</span>\" but that still\n      // satisfies our requirement. Our requirement is not to produce perfect\n      // HTML and attributes. Ideally we should preserve structure but it's\n      // ok not to if the visible content is still enough to indicate what\n      // even listeners these nodes might be wired up to.\n      // TODO: Warn if there is more than a single textNode as a child.\n      // TODO: Should we use domElement.firstChild.nodeValue to compare?\n      if (typeof nextProp === 'string') {\n        if (domElement.textContent !== nextProp) {\n          if (true && !suppressHydrationWarning) {\n            warnForTextDifference(domElement.textContent, nextProp);\n          }\n          updatePayload = [CHILDREN, nextProp];\n        }\n      } else if (typeof nextProp === 'number') {\n        if (domElement.textContent !== '' + nextProp) {\n          if (true && !suppressHydrationWarning) {\n            warnForTextDifference(domElement.textContent, nextProp);\n          }\n          updatePayload = [CHILDREN, '' + nextProp];\n        }\n      }\n    } else if (registrationNameModules.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        if (true && typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n        ensureListeningTo(rootContainerElement, propKey);\n      }\n    } else {\n      // Validate that the properties correspond to their expected values.\n      var serverValue;\n      var propertyInfo;\n      if (suppressHydrationWarning) {\n        // Don't bother comparing. We're ignoring all these warnings.\n      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||\n      // Controlled attributes are not validated\n      // TODO: Only ignore them on controlled tags.\n      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {\n        // Noop\n      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n        var rawHtml = nextProp ? nextProp[HTML] || '' : '';\n        var serverHTML = domElement.innerHTML;\n        var expectedHTML = normalizeHTML(domElement, rawHtml);\n        if (expectedHTML !== serverHTML) {\n          warnForPropDifference(propKey, serverHTML, expectedHTML);\n        }\n      } else if (propKey === STYLE) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        extraAttributeNames['delete'](propKey);\n        var expectedStyle = createDangerousStringForStyles(nextProp);\n        serverValue = domElement.getAttribute('style');\n        if (expectedStyle !== serverValue) {\n          warnForPropDifference(propKey, serverValue, expectedStyle);\n        }\n      } else if (isCustomComponentTag) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        extraAttributeNames['delete'](propKey.toLowerCase());\n        serverValue = getValueForAttribute(domElement, propKey, nextProp);\n\n        if (nextProp !== serverValue) {\n          warnForPropDifference(propKey, serverValue, nextProp);\n        }\n      } else if (shouldSetAttribute(propKey, nextProp)) {\n        if (propertyInfo = getPropertyInfo(propKey)) {\n          // $FlowFixMe - Should be inferred as not undefined.\n          extraAttributeNames['delete'](propertyInfo.attributeName);\n          serverValue = getValueForProperty(domElement, propKey, nextProp);\n        } else {\n          var ownNamespace = parentNamespace;\n          if (ownNamespace === HTML_NAMESPACE) {\n            ownNamespace = getIntrinsicNamespace(tag);\n          }\n          if (ownNamespace === HTML_NAMESPACE) {\n            // $FlowFixMe - Should be inferred as not undefined.\n            extraAttributeNames['delete'](propKey.toLowerCase());\n          } else {\n            // $FlowFixMe - Should be inferred as not undefined.\n            extraAttributeNames['delete'](propKey);\n          }\n          serverValue = getValueForAttribute(domElement, propKey, nextProp);\n        }\n\n        if (nextProp !== serverValue) {\n          warnForPropDifference(propKey, serverValue, nextProp);\n        }\n      }\n    }\n  }\n\n  {\n    // $FlowFixMe - Should be inferred as not undefined.\n    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {\n      // $FlowFixMe - Should be inferred as not undefined.\n      warnForExtraAttributes(extraAttributeNames);\n    }\n  }\n\n  switch (tag) {\n    case 'input':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper(domElement, rawProps);\n      break;\n    case 'textarea':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      track(domElement);\n      postMountWrapper$3(domElement, rawProps);\n      break;\n    case 'select':\n    case 'option':\n      // For input and textarea we current always set the value property at\n      // post mount to force it to diverge from attributes. However, for\n      // option and select we don't quite do the same thing and select\n      // is not resilient to the DOM state changing so we don't do that here.\n      // TODO: Consider not doing this for input and textarea.\n      break;\n    default:\n      if (typeof rawProps.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n      break;\n  }\n\n  return updatePayload;\n}\n\nfunction diffHydratedText$1(textNode, text) {\n  var isDifferent = textNode.nodeValue !== text;\n  return isDifferent;\n}\n\nfunction warnForUnmatchedText$1(textNode, text) {\n  {\n    warnForTextDifference(textNode.nodeValue, text);\n  }\n}\n\nfunction warnForDeletedHydratableElement$1(parentNode, child) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction warnForDeletedHydratableText$1(parentNode, child) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    warning(false, 'Did not expect server HTML to contain the text node \"%s\" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction warnForInsertedHydratedElement$1(parentNode, tag, props) {\n  {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction warnForInsertedHydratedText$1(parentNode, text) {\n  {\n    if (text === '') {\n      // We expect to insert empty text nodes since they're not represented in\n      // the HTML.\n      // TODO: Remove this special case if we can just avoid inserting empty\n      // text nodes.\n      return;\n    }\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    warning(false, 'Expected server HTML to contain a matching text node for \"%s\" in <%s>.', text, parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction restoreControlledState(domElement, tag, props) {\n  switch (tag) {\n    case 'input':\n      restoreControlledState$1(domElement, props);\n      return;\n    case 'textarea':\n      restoreControlledState$3(domElement, props);\n      return;\n    case 'select':\n      restoreControlledState$2(domElement, props);\n      return;\n  }\n}\n\nvar ReactDOMFiberComponent = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateTextNode: createTextNode$1,\n\tsetInitialProperties: setInitialProperties$1,\n\tdiffProperties: diffProperties$1,\n\tupdateProperties: updateProperties$1,\n\tdiffHydratedProperties: diffHydratedProperties$1,\n\tdiffHydratedText: diffHydratedText$1,\n\twarnForUnmatchedText: warnForUnmatchedText$1,\n\twarnForDeletedHydratableElement: warnForDeletedHydratableElement$1,\n\twarnForDeletedHydratableText: warnForDeletedHydratableText$1,\n\twarnForInsertedHydratedElement: warnForInsertedHydratedElement$1,\n\twarnForInsertedHydratedText: warnForInsertedHydratedText$1,\n\trestoreControlledState: restoreControlledState\n});\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nvar getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;\n\nvar validateDOMNesting = emptyFunction$1;\n\n{\n  // This validation code was written based on the HTML5 parsing spec:\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  //\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#special\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject', 'desc', 'title'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\n  var buttonScopeTags = inScopeTags.concat(['button']);\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n\n  var emptyAncestorInfo = {\n    current: null,\n\n    formTag: null,\n    aTagInScope: null,\n    buttonTagInScope: null,\n    nobrTagInScope: null,\n    pTagInButtonScope: null,\n\n    listItemTagAutoclosing: null,\n    dlItemTagAutoclosing: null\n  };\n\n  var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {\n    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);\n    var info = { tag: tag, instance: instance };\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    }\n\n    // See rules for 'li', 'dd', 'dt' start tags in\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.current = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n\n    return ancestorInfo;\n  };\n\n  /**\n   * Returns whether\n   */\n  var isTagValidWithParent = function (tag, parentTag) {\n    // First, let's check if we're in an unusual parsing mode...\n    switch (parentTag) {\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n      case 'select':\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';\n      case 'optgroup':\n        return tag === 'option' || tag === '#text';\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n      // but\n      case 'option':\n        return tag === '#text';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n      // No special behavior since these rules fall back to \"in body\" mode for\n      // all except special table nodes which cause bad parsing behavior anyway.\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n      case 'tr':\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n      case 'tbody':\n      case 'thead':\n      case 'tfoot':\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n      case 'colgroup':\n        return tag === 'col' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n      case 'table':\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n      case 'head':\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n      case 'html':\n        return tag === 'head' || tag === 'body';\n      case '#document':\n        return tag === 'html';\n    }\n\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n    // where the parsing rules cause implicit opens or closes to be added.\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    switch (tag) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n\n      case 'rp':\n      case 'rt':\n        return impliedEndTags.indexOf(parentTag) === -1;\n\n      case 'body':\n      case 'caption':\n      case 'col':\n      case 'colgroup':\n      case 'frame':\n      case 'head':\n      case 'html':\n      case 'tbody':\n      case 'td':\n      case 'tfoot':\n      case 'th':\n      case 'thead':\n      case 'tr':\n        // These tags are only valid with a few parents that have special child\n        // parsing rules -- if we're down here, then none of those matched and\n        // so we allow it only if we don't know what the parent is, as all other\n        // cases are invalid.\n        return parentTag == null;\n    }\n\n    return true;\n  };\n\n  /**\n   * Returns whether\n   */\n  var findInvalidAncestorForTag = function (tag, ancestorInfo) {\n    switch (tag) {\n      case 'address':\n      case 'article':\n      case 'aside':\n      case 'blockquote':\n      case 'center':\n      case 'details':\n      case 'dialog':\n      case 'dir':\n      case 'div':\n      case 'dl':\n      case 'fieldset':\n      case 'figcaption':\n      case 'figure':\n      case 'footer':\n      case 'header':\n      case 'hgroup':\n      case 'main':\n      case 'menu':\n      case 'nav':\n      case 'ol':\n      case 'p':\n      case 'section':\n      case 'summary':\n      case 'ul':\n      case 'pre':\n      case 'listing':\n      case 'table':\n      case 'hr':\n      case 'xmp':\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return ancestorInfo.pTagInButtonScope;\n\n      case 'form':\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n      case 'li':\n        return ancestorInfo.listItemTagAutoclosing;\n\n      case 'dd':\n      case 'dt':\n        return ancestorInfo.dlItemTagAutoclosing;\n\n      case 'button':\n        return ancestorInfo.buttonTagInScope;\n\n      case 'a':\n        // Spec says something about storing a list of markers, but it sounds\n        // equivalent to this check.\n        return ancestorInfo.aTagInScope;\n\n      case 'nobr':\n        return ancestorInfo.nobrTagInScope;\n    }\n\n    return null;\n  };\n\n  var didWarn = {};\n\n  validateDOMNesting = function (childTag, childText, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.current;\n    var parentTag = parentInfo && parentInfo.tag;\n\n    if (childText != null) {\n      warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');\n      childTag = '#text';\n    }\n\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\n    var invalidParentOrAncestor = invalidParent || invalidAncestor;\n    if (!invalidParentOrAncestor) {\n      return;\n    }\n\n    var ancestorTag = invalidParentOrAncestor.tag;\n    var addendum = getCurrentFiberStackAddendum$6();\n\n    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;\n    if (didWarn[warnKey]) {\n      return;\n    }\n    didWarn[warnKey] = true;\n\n    var tagDisplayName = childTag;\n    var whitespaceInfo = '';\n    if (childTag === '#text') {\n      if (/\\S/.test(childText)) {\n        tagDisplayName = 'Text nodes';\n      } else {\n        tagDisplayName = 'Whitespace text nodes';\n        whitespaceInfo = \" Make sure you don't have any extra whitespace between tags on \" + 'each line of your source code.';\n      }\n    } else {\n      tagDisplayName = '<' + childTag + '>';\n    }\n\n    if (invalidParent) {\n      var info = '';\n      if (ancestorTag === 'table' && childTag === 'tr') {\n        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';\n      }\n      warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);\n    } else {\n      warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);\n    }\n  };\n\n  // TODO: turn this into a named export\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;\n\n  // For testing\n  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.current;\n    var parentTag = parentInfo && parentInfo.tag;\n    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);\n  };\n}\n\nvar validateDOMNesting$1 = validateDOMNesting;\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nvar createElement = createElement$1;\nvar createTextNode = createTextNode$1;\nvar setInitialProperties = setInitialProperties$1;\nvar diffProperties = diffProperties$1;\nvar updateProperties = updateProperties$1;\nvar diffHydratedProperties = diffHydratedProperties$1;\nvar diffHydratedText = diffHydratedText$1;\nvar warnForUnmatchedText = warnForUnmatchedText$1;\nvar warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;\nvar warnForDeletedHydratableText = warnForDeletedHydratableText$1;\nvar warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;\nvar warnForInsertedHydratedText = warnForInsertedHydratedText$1;\nvar updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;\nvar precacheFiberNode = precacheFiberNode$1;\nvar updateFiberProps = updateFiberProps$1;\n\n\n{\n  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\n  if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {\n    warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');\n  }\n}\n\ninjection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent);\n\nvar eventsEnabled = null;\nvar selectionInformation = null;\n\n/**\n * True if the supplied DOM node is a valid node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid DOM node.\n * @internal\n */\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\n}\n\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOCUMENT_NODE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction shouldHydrateDueToLegacyHeuristic(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));\n}\n\nfunction shouldAutoFocusHostComponent(type, props) {\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      return !!props.autoFocus;\n  }\n  return false;\n}\n\nvar DOMRenderer = reactReconciler({\n  getRootHostContext: function (rootContainerInstance) {\n    var type = void 0;\n    var namespace = void 0;\n    var nodeType = rootContainerInstance.nodeType;\n    switch (nodeType) {\n      case DOCUMENT_NODE:\n      case DOCUMENT_FRAGMENT_NODE:\n        {\n          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';\n          var root = rootContainerInstance.documentElement;\n          namespace = root ? root.namespaceURI : getChildNamespace(null, '');\n          break;\n        }\n      default:\n        {\n          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;\n          var ownNamespace = container.namespaceURI || null;\n          type = container.tagName;\n          namespace = getChildNamespace(ownNamespace, type);\n          break;\n        }\n    }\n    {\n      var validatedTag = type.toLowerCase();\n      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);\n      return { namespace: namespace, ancestorInfo: _ancestorInfo };\n    }\n    return namespace;\n  },\n  getChildHostContext: function (parentHostContext, type) {\n    {\n      var parentHostContextDev = parentHostContext;\n      var _namespace = getChildNamespace(parentHostContextDev.namespace, type);\n      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);\n      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };\n    }\n    var parentNamespace = parentHostContext;\n    return getChildNamespace(parentNamespace, type);\n  },\n  getPublicInstance: function (instance) {\n    return instance;\n  },\n  prepareForCommit: function () {\n    eventsEnabled = isEnabled();\n    selectionInformation = getSelectionInformation();\n    setEnabled(false);\n  },\n  resetAfterCommit: function () {\n    restoreSelection(selectionInformation);\n    selectionInformation = null;\n    setEnabled(eventsEnabled);\n    eventsEnabled = null;\n  },\n  createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n    var parentNamespace = void 0;\n    {\n      // TODO: take namespace into account when validating.\n      var hostContextDev = hostContext;\n      validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);\n      if (typeof props.children === 'string' || typeof props.children === 'number') {\n        var string = '' + props.children;\n        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);\n        validateDOMNesting$1(null, string, ownAncestorInfo);\n      }\n      parentNamespace = hostContextDev.namespace;\n    }\n    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);\n    precacheFiberNode(internalInstanceHandle, domElement);\n    updateFiberProps(domElement, props);\n    return domElement;\n  },\n  appendInitialChild: function (parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n  finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {\n    setInitialProperties(domElement, type, props, rootContainerInstance);\n    return shouldAutoFocusHostComponent(type, props);\n  },\n  prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n    {\n      var hostContextDev = hostContext;\n      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {\n        var string = '' + newProps.children;\n        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);\n        validateDOMNesting$1(null, string, ownAncestorInfo);\n      }\n    }\n    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);\n  },\n  shouldSetTextContent: function (type, props) {\n    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';\n  },\n  shouldDeprioritizeSubtree: function (type, props) {\n    return !!props.hidden;\n  },\n  createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {\n    {\n      var hostContextDev = hostContext;\n      validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);\n    }\n    var textNode = createTextNode(text, rootContainerInstance);\n    precacheFiberNode(internalInstanceHandle, textNode);\n    return textNode;\n  },\n\n\n  now: now,\n\n  mutation: {\n    commitMount: function (domElement, type, newProps, internalInstanceHandle) {\n      domElement.focus();\n    },\n    commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n      // Update the props handle so that we know which props are the ones with\n      // with current event handlers.\n      updateFiberProps(domElement, newProps);\n      // Apply the diff to the DOM node.\n      updateProperties(domElement, updatePayload, type, oldProps, newProps);\n    },\n    resetTextContent: function (domElement) {\n      domElement.textContent = '';\n    },\n    commitTextUpdate: function (textInstance, oldText, newText) {\n      textInstance.nodeValue = newText;\n    },\n    appendChild: function (parentInstance, child) {\n      parentInstance.appendChild(child);\n    },\n    appendChildToContainer: function (container, child) {\n      if (container.nodeType === COMMENT_NODE) {\n        container.parentNode.insertBefore(child, container);\n      } else {\n        container.appendChild(child);\n      }\n    },\n    insertBefore: function (parentInstance, child, beforeChild) {\n      parentInstance.insertBefore(child, beforeChild);\n    },\n    insertInContainerBefore: function (container, child, beforeChild) {\n      if (container.nodeType === COMMENT_NODE) {\n        container.parentNode.insertBefore(child, beforeChild);\n      } else {\n        container.insertBefore(child, beforeChild);\n      }\n    },\n    removeChild: function (parentInstance, child) {\n      parentInstance.removeChild(child);\n    },\n    removeChildFromContainer: function (container, child) {\n      if (container.nodeType === COMMENT_NODE) {\n        container.parentNode.removeChild(child);\n      } else {\n        container.removeChild(child);\n      }\n    }\n  },\n\n  hydration: {\n    canHydrateInstance: function (instance, type, props) {\n      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {\n        return null;\n      }\n      // This has now been refined to an element node.\n      return instance;\n    },\n    canHydrateTextInstance: function (instance, text) {\n      if (text === '' || instance.nodeType !== TEXT_NODE) {\n        // Empty strings are not parsed by HTML so there won't be a correct match here.\n        return null;\n      }\n      // This has now been refined to a text node.\n      return instance;\n    },\n    getNextHydratableSibling: function (instance) {\n      var node = instance.nextSibling;\n      // Skip non-hydratable nodes.\n      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {\n        node = node.nextSibling;\n      }\n      return node;\n    },\n    getFirstHydratableChild: function (parentInstance) {\n      var next = parentInstance.firstChild;\n      // Skip non-hydratable nodes.\n      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {\n        next = next.nextSibling;\n      }\n      return next;\n    },\n    hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n      precacheFiberNode(internalInstanceHandle, instance);\n      // TODO: Possibly defer this until the commit phase where all the events\n      // get attached.\n      updateFiberProps(instance, props);\n      var parentNamespace = void 0;\n      {\n        var hostContextDev = hostContext;\n        parentNamespace = hostContextDev.namespace;\n      }\n      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);\n    },\n    hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {\n      precacheFiberNode(internalInstanceHandle, textInstance);\n      return diffHydratedText(textInstance, text);\n    },\n    didNotMatchHydratedContainerTextInstance: function (parentContainer, textInstance, text) {\n      {\n        warnForUnmatchedText(textInstance, text);\n      }\n    },\n    didNotMatchHydratedTextInstance: function (parentType, parentProps, parentInstance, textInstance, text) {\n      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        warnForUnmatchedText(textInstance, text);\n      }\n    },\n    didNotHydrateContainerInstance: function (parentContainer, instance) {\n      {\n        if (instance.nodeType === 1) {\n          warnForDeletedHydratableElement(parentContainer, instance);\n        } else {\n          warnForDeletedHydratableText(parentContainer, instance);\n        }\n      }\n    },\n    didNotHydrateInstance: function (parentType, parentProps, parentInstance, instance) {\n      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        if (instance.nodeType === 1) {\n          warnForDeletedHydratableElement(parentInstance, instance);\n        } else {\n          warnForDeletedHydratableText(parentInstance, instance);\n        }\n      }\n    },\n    didNotFindHydratableContainerInstance: function (parentContainer, type, props) {\n      {\n        warnForInsertedHydratedElement(parentContainer, type, props);\n      }\n    },\n    didNotFindHydratableContainerTextInstance: function (parentContainer, text) {\n      {\n        warnForInsertedHydratedText(parentContainer, text);\n      }\n    },\n    didNotFindHydratableInstance: function (parentType, parentProps, parentInstance, type, props) {\n      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        warnForInsertedHydratedElement(parentInstance, type, props);\n      }\n    },\n    didNotFindHydratableTextInstance: function (parentType, parentProps, parentInstance, text) {\n      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        warnForInsertedHydratedText(parentInstance, text);\n      }\n    }\n  },\n\n  scheduleDeferredCallback: rIC,\n\n  useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM\n});\n\ninjection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);\n\nvar warnedAboutHydrateAPI = false;\n\nfunction renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\n  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;\n\n  {\n    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {\n      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);\n      if (hostInstance) {\n        warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');\n      }\n    }\n\n    var isRootRenderedBySomeReact = !!container._reactRootContainer;\n    var rootEl = getReactRootElementInContainer(container);\n    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));\n\n    warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');\n\n    warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');\n  }\n\n  var root = container._reactRootContainer;\n  if (!root) {\n    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);\n    // First clear any existing content.\n    if (!shouldHydrate) {\n      var warned = false;\n      var rootSibling = void 0;\n      while (rootSibling = container.lastChild) {\n        {\n          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {\n            warned = true;\n            warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');\n          }\n        }\n        container.removeChild(rootSibling);\n      }\n    }\n    {\n      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {\n        warnedAboutHydrateAPI = true;\n        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');\n      }\n    }\n    var newRoot = DOMRenderer.createContainer(container, shouldHydrate);\n    root = container._reactRootContainer = newRoot;\n    // Initial mount should not be batched.\n    DOMRenderer.unbatchedUpdates(function () {\n      DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);\n    });\n  } else {\n    DOMRenderer.updateContainer(children, root, parentComponent, callback);\n  }\n  return DOMRenderer.getPublicRootInstance(root);\n}\n\nfunction createPortal(children, container) {\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;\n  // TODO: pass ReactDOM portal implementation as third argument\n  return createPortal$1(children, container, null, key);\n}\n\nfunction ReactRoot(container, hydrate) {\n  var root = DOMRenderer.createContainer(container, hydrate);\n  this._reactRootContainer = root;\n}\nReactRoot.prototype.render = function (children, callback) {\n  var root = this._reactRootContainer;\n  DOMRenderer.updateContainer(children, root, null, callback);\n};\nReactRoot.prototype.unmount = function (callback) {\n  var root = this._reactRootContainer;\n  DOMRenderer.updateContainer(null, root, null, callback);\n};\n\nvar ReactDOM = {\n  createPortal: createPortal,\n\n  findDOMNode: function (componentOrElement) {\n    {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\n        warning(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component');\n        owner.stateNode._warnedAboutRefsInRender = true;\n      }\n    }\n    if (componentOrElement == null) {\n      return null;\n    }\n    if (componentOrElement.nodeType === ELEMENT_NODE) {\n      return componentOrElement;\n    }\n\n    var inst = get(componentOrElement);\n    if (inst) {\n      return DOMRenderer.findHostInstance(inst);\n    }\n\n    if (typeof componentOrElement.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));\n    }\n  },\n  hydrate: function (element, container, callback) {\n    // TODO: throw or warn if we couldn't hydrate?\n    return renderSubtreeIntoContainer(null, element, container, true, callback);\n  },\n  render: function (element, container, callback) {\n    return renderSubtreeIntoContainer(null, element, container, false, callback);\n  },\n  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {\n    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;\n    return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\n  },\n  unmountComponentAtNode: function (container) {\n    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;\n\n    if (container._reactRootContainer) {\n      {\n        var rootEl = getReactRootElementInContainer(container);\n        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);\n        warning(!renderedByDifferentReact, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.');\n      }\n\n      // Unmount should not be batched.\n      DOMRenderer.unbatchedUpdates(function () {\n        renderSubtreeIntoContainer(null, null, container, false, function () {\n          container._reactRootContainer = null;\n        });\n      });\n      // If you call unmountComponentAtNode twice in quick succession, you'll\n      // get `true` twice. That's probably fine?\n      return true;\n    } else {\n      {\n        var _rootEl = getReactRootElementInContainer(container);\n        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));\n\n        // Check if the container itself is a React root node.\n        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;\n\n        warning(!hasNonRootReactChild, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');\n      }\n\n      return false;\n    }\n  },\n\n\n  // Temporary alias since we already shipped React 16 RC with it.\n  // TODO: remove in React 17.\n  unstable_createPortal: createPortal,\n\n  unstable_batchedUpdates: batchedUpdates,\n\n  unstable_deferredUpdates: DOMRenderer.deferredUpdates,\n\n  flushSync: DOMRenderer.flushSync,\n\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    // For TapEventPlugin which is popular in open source\n    EventPluginHub: EventPluginHub,\n    // Used by test-utils\n    EventPluginRegistry: EventPluginRegistry,\n    EventPropagators: EventPropagators,\n    ReactControlledComponent: ReactControlledComponent,\n    ReactDOMComponentTree: ReactDOMComponentTree,\n    ReactDOMEventListener: ReactDOMEventListener\n  }\n};\n\nif (enableCreateRoot) {\n  ReactDOM.createRoot = function createRoot(container, options) {\n    var hydrate = options != null && options.hydrate === true;\n    return new ReactRoot(container, hydrate);\n  };\n}\n\nvar foundDevTools = DOMRenderer.injectIntoDevTools({\n  findFiberByHostInstance: getClosestInstanceFromNode,\n  bundleType: 1,\n  version: ReactVersion,\n  rendererPackageName: 'react-dom'\n});\n\n{\n  if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {\n    // If we're in Chrome or Firefox, provide a download link if not installed.\n    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n      var protocol = window.location.protocol;\n      // Don't warn in exotic cases like chrome-extension://.\n      if (/^(https?|file):$/.test(protocol)) {\n        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');\n      }\n    }\n  }\n}\n\n\n\nvar ReactDOM$2 = Object.freeze({\n\tdefault: ReactDOM\n});\n\nvar ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nvar reactDom = ReactDOM$3['default'] ? ReactDOM$3['default'] : ReactDOM$3;\n\nmodule.exports = reactDom;\n  })();\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          invariant(\n            false,\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            warning(\n              false,\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `%s` prop on `%s`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',\n              propFullName,\n              componentName\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        warning(\n          false,\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received %s at index %s.',\n          getPostfixForTypeWarning(checker),\n          i\n        );\n        return emptyFunction.thatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","import PropTypes from 'prop-types';\n\nexport var subscriptionShape = PropTypes.shape({\n  trySubscribe: PropTypes.func.isRequired,\n  tryUnsubscribe: PropTypes.func.isRequired,\n  notifyNestedSubs: PropTypes.func.isRequired,\n  isSubscribed: PropTypes.func.isRequired\n});\n\nexport var storeShape = PropTypes.shape({\n  subscribe: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  getState: PropTypes.func.isRequired\n});","/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n}","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { storeShape, subscriptionShape } from '../utils/PropTypes';\nimport warning from '../utils/warning';\n\nvar didWarnAboutReceivingStore = false;\nfunction warnAboutReceivingStore() {\n  if (didWarnAboutReceivingStore) {\n    return;\n  }\n  didWarnAboutReceivingStore = true;\n\n  warning('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');\n}\n\nexport function createProvider() {\n  var _Provider$childContex;\n\n  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';\n  var subKey = arguments[1];\n\n  var subscriptionKey = subKey || storeKey + 'Subscription';\n\n  var Provider = function (_Component) {\n    _inherits(Provider, _Component);\n\n    Provider.prototype.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;\n    };\n\n    function Provider(props, context) {\n      _classCallCheck(this, Provider);\n\n      var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n      _this[storeKey] = props.store;\n      return _this;\n    }\n\n    Provider.prototype.render = function render() {\n      return Children.only(this.props.children);\n    };\n\n    return Provider;\n  }(Component);\n\n  if (process.env.NODE_ENV !== 'production') {\n    Provider.prototype.componentWillReceiveProps = function (nextProps) {\n      if (this[storeKey] !== nextProps.store) {\n        warnAboutReceivingStore();\n      }\n    };\n  }\n\n  Provider.propTypes = {\n    store: storeShape.isRequired,\n    children: PropTypes.element.isRequired\n  };\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);\n\n  return Provider;\n}\n\nexport default createProvider();","/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = getPrototypeOf && getPrototypeOf(Object);\n\nmodule.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try { // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n};\n","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar NODE_ENV = process.env.NODE_ENV;\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nvar CLEARED = null;\nvar nullListeners = {\n  notify: function notify() {}\n};\n\nfunction createListenerCollection() {\n  // the current/next pattern is copied from redux's createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n  var current = [];\n  var next = [];\n\n  return {\n    clear: function clear() {\n      next = CLEARED;\n      current = CLEARED;\n    },\n    notify: function notify() {\n      var listeners = current = next;\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i]();\n      }\n    },\n    get: function get() {\n      return next;\n    },\n    subscribe: function subscribe(listener) {\n      var isSubscribed = true;\n      if (next === current) next = current.slice();\n      next.push(listener);\n\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return;\n        isSubscribed = false;\n\n        if (next === current) next = current.slice();\n        next.splice(next.indexOf(listener), 1);\n      };\n    }\n  };\n}\n\nvar Subscription = function () {\n  function Subscription(store, parentSub, onStateChange) {\n    _classCallCheck(this, Subscription);\n\n    this.store = store;\n    this.parentSub = parentSub;\n    this.onStateChange = onStateChange;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n  }\n\n  Subscription.prototype.addNestedSub = function addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  };\n\n  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {\n    this.listeners.notify();\n  };\n\n  Subscription.prototype.isSubscribed = function isSubscribed() {\n    return Boolean(this.unsubscribe);\n  };\n\n  Subscription.prototype.trySubscribe = function trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);\n\n      this.listeners = createListenerCollection();\n    }\n  };\n\n  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  };\n\n  return Subscription;\n}();\n\nexport { Subscription as default };","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from 'invariant';\nimport { Component, createElement } from 'react';\n\nimport Subscription from '../utils/Subscription';\nimport { storeShape, subscriptionShape } from '../utils/PropTypes';\n\nvar hotReloadingVersion = 0;\nvar dummyState = {};\nfunction noop() {}\nfunction makeSelectorStateful(sourceSelector, store) {\n  // wrap the selector in an object that tracks its results between runs.\n  var selector = {\n    run: function runComponentSelector(props) {\n      try {\n        var nextProps = sourceSelector(store.getState(), props);\n        if (nextProps !== selector.props || selector.error) {\n          selector.shouldComponentUpdate = true;\n          selector.props = nextProps;\n          selector.error = null;\n        }\n      } catch (error) {\n        selector.shouldComponentUpdate = true;\n        selector.error = error;\n      }\n    }\n  };\n\n  return selector;\n}\n\nexport default function connectAdvanced(\n/*\n  selectorFactory is a func that is responsible for returning the selector function used to\n  compute new props from state, props, and dispatch. For example:\n     export default connectAdvanced((dispatch, options) => (state, props) => ({\n      thing: state.things[props.thingId],\n      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\n    }))(YourComponent)\n   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators\n  outside of their selector as an optimization. Options passed to connectAdvanced are passed to\n  the selectorFactory, along with displayName and WrappedComponent, as the second argument.\n   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound\n  props. Do not use connectAdvanced directly without memoizing results between calls to your\n  selector, otherwise the Connect component will re-render on every state or props change.\n*/\nselectorFactory) {\n  var _contextTypes, _childContextTypes;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$getDisplayName = _ref.getDisplayName,\n      getDisplayName = _ref$getDisplayName === undefined ? function (name) {\n    return 'ConnectAdvanced(' + name + ')';\n  } : _ref$getDisplayName,\n      _ref$methodName = _ref.methodName,\n      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,\n      _ref$renderCountProp = _ref.renderCountProp,\n      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,\n      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,\n      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,\n      _ref$storeKey = _ref.storeKey,\n      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,\n      _ref$withRef = _ref.withRef,\n      withRef = _ref$withRef === undefined ? false : _ref$withRef,\n      connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);\n\n  var subscriptionKey = storeKey + 'Subscription';\n  var version = hotReloadingVersion++;\n\n  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);\n  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);\n\n  return function wrapWithConnect(WrappedComponent) {\n    invariant(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));\n\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n    var displayName = getDisplayName(wrappedComponentName);\n\n    var selectorFactoryOptions = _extends({}, connectOptions, {\n      getDisplayName: getDisplayName,\n      methodName: methodName,\n      renderCountProp: renderCountProp,\n      shouldHandleStateChanges: shouldHandleStateChanges,\n      storeKey: storeKey,\n      withRef: withRef,\n      displayName: displayName,\n      wrappedComponentName: wrappedComponentName,\n      WrappedComponent: WrappedComponent\n    });\n\n    var Connect = function (_Component) {\n      _inherits(Connect, _Component);\n\n      function Connect(props, context) {\n        _classCallCheck(this, Connect);\n\n        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n        _this.version = version;\n        _this.state = {};\n        _this.renderCount = 0;\n        _this.store = props[storeKey] || context[storeKey];\n        _this.propsMode = Boolean(props[storeKey]);\n        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n\n        invariant(_this.store, 'Could not find \"' + storeKey + '\" in either the context or props of ' + ('\"' + displayName + '\". Either wrap the root component in a <Provider>, ') + ('or explicitly pass \"' + storeKey + '\" as a prop to \"' + displayName + '\".'));\n\n        _this.initSelector();\n        _this.initSubscription();\n        return _this;\n      }\n\n      Connect.prototype.getChildContext = function getChildContext() {\n        var _ref2;\n\n        // If this component received store from props, its subscription should be transparent\n        // to any descendants receiving store+subscription from context; it passes along\n        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows\n        // Connect to control ordering of notifications to flow top-down.\n        var subscription = this.propsMode ? null : this.subscription;\n        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;\n      };\n\n      Connect.prototype.componentDidMount = function componentDidMount() {\n        if (!shouldHandleStateChanges) return;\n\n        // componentWillMount fires during server side rendering, but componentDidMount and\n        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.\n        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.\n        // To handle the case where a child component may have triggered a state change by\n        // dispatching an action in its componentWillMount, we have to re-run the select and maybe\n        // re-render.\n        this.subscription.trySubscribe();\n        this.selector.run(this.props);\n        if (this.selector.shouldComponentUpdate) this.forceUpdate();\n      };\n\n      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n        this.selector.run(nextProps);\n      };\n\n      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {\n        return this.selector.shouldComponentUpdate;\n      };\n\n      Connect.prototype.componentWillUnmount = function componentWillUnmount() {\n        if (this.subscription) this.subscription.tryUnsubscribe();\n        this.subscription = null;\n        this.notifyNestedSubs = noop;\n        this.store = null;\n        this.selector.run = noop;\n        this.selector.shouldComponentUpdate = false;\n      };\n\n      Connect.prototype.getWrappedInstance = function getWrappedInstance() {\n        invariant(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));\n        return this.wrappedInstance;\n      };\n\n      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {\n        this.wrappedInstance = ref;\n      };\n\n      Connect.prototype.initSelector = function initSelector() {\n        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);\n        this.selector = makeSelectorStateful(sourceSelector, this.store);\n        this.selector.run(this.props);\n      };\n\n      Connect.prototype.initSubscription = function initSubscription() {\n        if (!shouldHandleStateChanges) return;\n\n        // parentSub's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];\n        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this));\n\n        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in\n        // the middle of the notification loop, where `this.subscription` will then be null. An\n        // extra null check every change can be avoided by copying the method onto `this` and then\n        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's\n        // listeners logic is changed to not call listeners that have been unsubscribed in the\n        // middle of the notification loop.\n        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);\n      };\n\n      Connect.prototype.onStateChange = function onStateChange() {\n        this.selector.run(this.props);\n\n        if (!this.selector.shouldComponentUpdate) {\n          this.notifyNestedSubs();\n        } else {\n          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;\n          this.setState(dummyState);\n        }\n      };\n\n      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {\n        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it\n        // needs to notify nested subs. Once called, it unimplements itself until further state\n        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does\n        // a boolean check every time avoids an extra method call most of the time, resulting\n        // in some perf boost.\n        this.componentDidUpdate = undefined;\n        this.notifyNestedSubs();\n      };\n\n      Connect.prototype.isSubscribed = function isSubscribed() {\n        return Boolean(this.subscription) && this.subscription.isSubscribed();\n      };\n\n      Connect.prototype.addExtraProps = function addExtraProps(props) {\n        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;\n        // make a shallow copy so that fields added don't leak to the original selector.\n        // this is especially important for 'ref' since that's a reference back to the component\n        // instance. a singleton memoized selector would then be holding a reference to the\n        // instance, preventing the instance from being garbage collected, and that would be bad\n        var withExtras = _extends({}, props);\n        if (withRef) withExtras.ref = this.setWrappedInstance;\n        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;\n        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;\n        return withExtras;\n      };\n\n      Connect.prototype.render = function render() {\n        var selector = this.selector;\n        selector.shouldComponentUpdate = false;\n\n        if (selector.error) {\n          throw selector.error;\n        } else {\n          return createElement(WrappedComponent, this.addExtraProps(selector.props));\n        }\n      };\n\n      return Connect;\n    }(Component);\n\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = displayName;\n    Connect.childContextTypes = childContextTypes;\n    Connect.contextTypes = contextTypes;\n    Connect.propTypes = contextTypes;\n\n    if (process.env.NODE_ENV !== 'production') {\n      Connect.prototype.componentWillUpdate = function componentWillUpdate() {\n        var _this2 = this;\n\n        // We are hot reloading!\n        if (this.version !== version) {\n          this.version = version;\n          this.initSelector();\n\n          // If any connected descendants don't hot reload (and resubscribe in the process), their\n          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all\n          // listeners, this does mean that the old versions of connected descendants will still be\n          // notified of state changes; however, their onStateChange function is a no-op so this\n          // isn't a huge deal.\n          var oldListeners = [];\n\n          if (this.subscription) {\n            oldListeners = this.subscription.listeners.get();\n            this.subscription.tryUnsubscribe();\n          }\n          this.initSubscription();\n          if (shouldHandleStateChanges) {\n            this.subscription.trySubscribe();\n            oldListeners.forEach(function (listener) {\n              return _this2.subscription.listeners.subscribe(listener);\n            });\n          }\n        }\n      };\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n}","var hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nexport default function shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) return false;\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import isPlainObject from 'lodash-es/isPlainObject';\nimport $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nexport var ActionTypes = {\n  INIT: '@@redux/INIT'\n\n  /**\n   * Creates a Redux store that holds the state tree.\n   * The only way to change the data in the store is to call `dispatch()` on it.\n   *\n   * There should only be a single store in your app. To specify how different\n   * parts of the state tree respond to actions, you may combine several reducers\n   * into a single reducer function by using `combineReducers`.\n   *\n   * @param {Function} reducer A function that returns the next state tree, given\n   * the current state tree and the action to handle.\n   *\n   * @param {any} [preloadedState] The initial state. You may optionally specify it\n   * to hydrate the state from the server in universal apps, or to restore a\n   * previously serialized user session.\n   * If you use `combineReducers` to produce the root reducer function, this must be\n   * an object with the same shape as `combineReducers` keys.\n   *\n   * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n   * to enhance the store with third-party capabilities such as middleware,\n   * time travel, persistence, etc. The only store enhancer that ships with Redux\n   * is `applyMiddleware()`.\n   *\n   * @returns {Store} A Redux store that lets you read the state, dispatch actions\n   * and subscribe to changes.\n   */\n};export default function createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected listener to be a function.');\n    }\n\n    var isSubscribed = true;\n\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}","/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n}","function bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(undefined, arguments));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');\n  }\n\n  var keys = Object.keys(actionCreators);\n  var boundActionCreators = {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}","/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nexport default function compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(undefined, arguments));\n    };\n  });\n}","import createStore from './createStore';\nimport combineReducers from './combineReducers';\nimport bindActionCreators from './bindActionCreators';\nimport applyMiddleware from './applyMiddleware';\nimport compose from './compose';\nimport warning from './utils/warning';\n\n/*\n* This is a dummy function to check if the function name has been altered by minification.\n* If the function has been minified and NODE_ENV !== 'production', warn the user.\n*/\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \\'production\\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { createStore, combineReducers, bindActionCreators, applyMiddleware, compose };","import isPlainObject from 'lodash-es/isPlainObject';\nimport warning from './warning';\n\nexport default function verifyPlainObject(value, displayName, methodName) {\n  if (!isPlainObject(value)) {\n    warning(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');\n  }\n}","import verifyPlainObject from '../utils/verifyPlainObject';\n\nexport function wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch, options) {\n    var constant = getConstant(dispatch, options);\n\n    function constantSelector() {\n      return constant;\n    }\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n}\n\n// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n// \n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\nexport function getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n}\n\n// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n// \n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//    \n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//    \n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//    \nexport function wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, _ref) {\n    var displayName = _ref.displayName;\n\n    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);\n    };\n\n    // allow detectFactoryAndVerify to get ownProps\n    proxy.dependsOnOwnProps = true;\n\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      var props = proxy(stateOrDispatch, ownProps);\n\n      if (typeof props === 'function') {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n\n      if (process.env.NODE_ENV !== 'production') verifyPlainObject(props, displayName, methodName);\n\n      return props;\n    };\n\n    return proxy;\n  };\n}","import { bindActionCreators } from 'redux';\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps';\n\nexport function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;\n}\n\nexport function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {\n    return { dispatch: dispatch };\n  }) : undefined;\n}\n\nexport function whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {\n    return bindActionCreators(mapDispatchToProps, dispatch);\n  }) : undefined;\n}\n\nexport default [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps';\n\nexport function whenMapStateToPropsIsFunction(mapStateToProps) {\n  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;\n}\n\nexport function whenMapStateToPropsIsMissing(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(function () {\n    return {};\n  }) : undefined;\n}\n\nexport default [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport verifyPlainObject from '../utils/verifyPlainObject';\n\nexport function defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return _extends({}, ownProps, stateProps, dispatchProps);\n}\n\nexport function wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref) {\n    var displayName = _ref.displayName,\n        pure = _ref.pure,\n        areMergedPropsEqual = _ref.areMergedPropsEqual;\n\n    var hasRunOnce = false;\n    var mergedProps = void 0;\n\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n\n        if (process.env.NODE_ENV !== 'production') verifyPlainObject(mergedProps, displayName, 'mergeProps');\n      }\n\n      return mergedProps;\n    };\n  };\n}\n\nexport function whenMergePropsIsFunction(mergeProps) {\n  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;\n}\n\nexport function whenMergePropsIsOmitted(mergeProps) {\n  return !mergeProps ? function () {\n    return defaultMergeProps;\n  } : undefined;\n}\n\nexport default [whenMergePropsIsFunction, whenMergePropsIsOmitted];","import warning from '../utils/warning';\n\nfunction verify(selector, methodName, displayName) {\n  if (!selector) {\n    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');\n  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {\n    if (!selector.hasOwnProperty('dependsOnOwnProps')) {\n      warning('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');\n    }\n  }\n}\n\nexport default function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {\n  verify(mapStateToProps, 'mapStateToProps', displayName);\n  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);\n  verify(mergeProps, 'mergeProps', displayName);\n}","function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport verifySubselectors from './verifySubselectors';\n\nexport function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\n  return function impureFinalPropsSelector(state, ownProps) {\n    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\n  };\n}\n\nexport function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n  var areStatesEqual = _ref.areStatesEqual,\n      areOwnPropsEqual = _ref.areOwnPropsEqual,\n      areStatePropsEqual = _ref.areStatePropsEqual;\n\n  var hasRunAtLeastOnce = false;\n  var state = void 0;\n  var ownProps = void 0;\n  var stateProps = void 0;\n  var dispatchProps = void 0;\n  var mergedProps = void 0;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    var nextStateProps = mapStateToProps(state, ownProps);\n    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    var stateChanged = !areStatesEqual(nextState, state);\n    state = nextState;\n    ownProps = nextOwnProps;\n\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n}\n\n// TODO: Add more comments\n\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced's shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\n\nexport default function finalPropsSelectorFactory(dispatch, _ref2) {\n  var initMapStateToProps = _ref2.initMapStateToProps,\n      initMapDispatchToProps = _ref2.initMapDispatchToProps,\n      initMergeProps = _ref2.initMergeProps,\n      options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);\n\n  var mapStateToProps = initMapStateToProps(dispatch, options);\n  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  var mergeProps = initMergeProps(dispatch, options);\n\n  if (process.env.NODE_ENV !== 'production') {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);\n  }\n\n  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\n\n  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport connectAdvanced from '../components/connectAdvanced';\nimport shallowEqual from '../utils/shallowEqual';\nimport defaultMapDispatchToPropsFactories from './mapDispatchToProps';\nimport defaultMapStateToPropsFactories from './mapStateToProps';\nimport defaultMergePropsFactories from './mergeProps';\nimport defaultSelectorFactory from './selectorFactory';\n\n/*\n  connect is a facade over connectAdvanced. It turns its args into a compatible\n  selectorFactory, which has the signature:\n\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\n  \n  connect passes its args to connectAdvanced as options, which will in turn pass them to\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\n\n  selectorFactory returns a final props selector from its mapStateToProps,\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\n  mergePropsFactories, and pure args.\n\n  The resulting final props selector is called by the Connect component instance whenever\n  it receives new props or store state.\n */\n\nfunction match(arg, factories, name) {\n  for (var i = factories.length - 1; i >= 0; i--) {\n    var result = factories[i](arg);\n    if (result) return result;\n  }\n\n  return function (dispatch, options) {\n    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');\n  };\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n\n// createConnect with default args builds the 'official' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\nexport function createConnect() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$connectHOC = _ref.connectHOC,\n      connectHOC = _ref$connectHOC === undefined ? connectAdvanced : _ref$connectHOC,\n      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,\n      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,\n      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,\n      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,\n      _ref$mergePropsFactor = _ref.mergePropsFactories,\n      mergePropsFactories = _ref$mergePropsFactor === undefined ? defaultMergePropsFactories : _ref$mergePropsFactor,\n      _ref$selectorFactory = _ref.selectorFactory,\n      selectorFactory = _ref$selectorFactory === undefined ? defaultSelectorFactory : _ref$selectorFactory;\n\n  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$pure = _ref2.pure,\n        pure = _ref2$pure === undefined ? true : _ref2$pure,\n        _ref2$areStatesEqual = _ref2.areStatesEqual,\n        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,\n        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,\n        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? shallowEqual : _ref2$areOwnPropsEqua,\n        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,\n        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? shallowEqual : _ref2$areStatePropsEq,\n        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,\n        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? shallowEqual : _ref2$areMergedPropsE,\n        extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);\n\n    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');\n    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');\n    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');\n\n    return connectHOC(selectorFactory, _extends({\n      // used in error messages\n      methodName: 'connect',\n\n      // used to compute Connect's displayName from the wrapped component's displayName.\n      getDisplayName: function getDisplayName(name) {\n        return 'Connect(' + name + ')';\n      },\n\n      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes\n      shouldHandleStateChanges: Boolean(mapStateToProps),\n\n      // passed through to selectorFactory\n      initMapStateToProps: initMapStateToProps,\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      pure: pure,\n      areStatesEqual: areStatesEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n\n    }, extraOptions));\n  };\n}\n\nexport default createConnect();","\n// Reducers\n// ============\n// Reducers for Redux store go here\n\nconst initialState = [\n    {\n        text: 'List item 1',\n        id: 1\n    }\n];\n\nconst items = (state = initialState, action) => {\n    switch (action.type) {\n\n        case 'ADD_ITEM':\n            return [\n                ...state,\n                {\n                    text: action.text,\n                    id: action.id,\n                }\n            ]\n        default:\n            return state;\n    }\n}\n\nexport default items;","\n// Actions\n// ============\n// Actions for Redux store go here\n\nconst addItem = item => ({\n    type: 'ADD_ITEM',\n    text: item.text,\n    id: item.id,\n});\n\nexport { addItem };","\n// TextList\n// ============\n// A basic sample component\n\n// Imports\nimport React from 'react';\n\nclass TextList extends React.Component {\n\n    render() {\n        let newId = 1;\n\n        let itemsList = this.props.items.map((thisItem) =>\n            <li key={thisItem.text}>{thisItem.text}</li>\n        );\n\n        function addItem() {\n            this.props.actions.addItem({\n                text: document.querySelector('.item-text').value,\n                id: newId++\n            });\n        }\n\n        return (\n            <div className=\"TextList\">\n                <h1>Redux list example</h1>\n                <ul>\n                    {itemsList}\n                </ul>\n                <form>\n                    <input type=\"text\" className=\"item-text\"></input>\n                    <button type=\"button\" onClick={ addItem.bind(this) }>Add item</button>\n                </form>\n            </div>\n        );\n    }\n}\n\n// Exports\nexport default TextList;\n","\n// TextListContainer\n// ============\n// A basic sample component\n\n// Imports\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as listActions from '../../store/actions';\nimport TextList from '../TextList/TextList';\n\nconst TextListContainer = ({ items, actions }) => (\n    <TextList items={items} actions={actions} />\n)\n\n// Map states\nconst mapStateToProps = state => ({\n    items: state\n});\n\n// Map dispatch\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(listActions, dispatch)\n});\n\n// Exports\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TextListContainer);\n","\n// ListOfThings\n// ============\n// A basic sample component\n\n// Imports\nimport React from 'react';\nimport TextListContainer from '../TextListContainer/TextListContainer';\n\nclass ListOfThings extends React.Component {\n\n    render() {\n        return (\n            <TextListContainer />\n        );\n    }\n}\n\n// Exports\nexport default ListOfThings;\n","\r\n// App\r\n// ============\r\n// All of JS is organised from here\r\n\r\n// Imports\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport items from '../store/reducers';\r\nimport ListOfThings from '../components/ListOfThings/ListOfThings';\r\n\r\nlet store = createStore(items);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ListOfThings />\r\n    </Provider>\r\n    , document.querySelector('#app'));\r\n"],"names":["emptyFunction","ReactPropTypesSecret","invariant","require$$0","warning","require$$1","require$$2","require$$3","require$$4","require$$5","hasOwnProperty","isNode","isTextNode","hyphenate","msPattern","camelize","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","assign","checkPropTypes","PropTypes","Children","Component","getOwnPropertySymbols","_classCallCheck","_possibleConstructorReturn","_inherits","createElement","hoistStatics","is","shallowEqual","Symbol","objectProto","symToStringTag","nativeObjectToString","root","ponyfill","$$observable","_extends","_objectWithoutProperties","defaultSelectorFactory","initialState","items","state","action","type","text","id","addItem","item","TextList","newId","itemsList","props","map","thisItem","React","actions","document","querySelector","value","bind","TextListContainer","mapStateToProps","mapDispatchToProps","bindActionCreators","listActions","dispatch","connect","ListOfThings","store","createStore","ReactDOM","render"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}